{"version":3,"file":"app.bundle.js","mappings":"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E,KADA;AAEPC,IAAAA,YAAY,EAAE;AAFP,GAAD,CAAV,CAFU,CAOV;;AACAnD,EAAAA,WAAW,CAACkB,UAAZ,CAAuB;AACnBgC,IAAAA,KAAK,EAAE,KADY;AAEnBC,IAAAA,YAAY,EAAE;AAFK,GAAvB,EARU,CAaV;;AACA,QAAMC,OAAO,gBAAG,iDAAC,GAAD;AAAK,aAAS,EAAC;AAAf,IAAhB;AACApC,EAAAA,6CAAA,CAAgBoC,OAAhB,EAAyBnL,QAAQ,CAAC8J,cAAT,CAAwB,MAAxB,CAAzB;AAEH,CAjBA,CAAD;;;;;;;;;;ACtnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/appointment-templates/AppointmentTemplateController.ts","webpack://template-feo-react-babel/./src/appointment-templates/AppointmentTemplateDetailModal.ts","webpack://template-feo-react-babel/./src/appointment-templates/AppointmentTemplateFilterView.ts","webpack://template-feo-react-babel/./src/appointment-templates/AppointmentTemplateView.ts","webpack://template-feo-react-babel/./src/appointments/AppointmentBookView.ts","webpack://template-feo-react-babel/./src/appointments/AppointmentController.ts","webpack://template-feo-react-babel/./src/appointments/AppointmentDetailModal.ts","webpack://template-feo-react-babel/./src/appointments/AppointmentFilterView.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/patient-booking-system/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["import {SidebarLocation, SidebarPrefs} from \"ui-framework-jps\";\n\n\nexport enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch',\n    patientSearch: 'fastSearchNames',\n    recentPatientSearches: 'recentPatientSearches',\n    appointments: 'appointment',\n    appointmentTypes: 'appointmentType',\n    clinicConfig:'clinicConfig',\n    providers:'provider',\n    appointmentTemplates:'appointmentTemplate'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphQL',\n    users: '/api/users',\n    clinicConfig: '/api/clinic-config'\n};\n\nexport const NAVIGATION = {\n    appointmentBook: 'navigationItemAppointmentBook',\n    patientSearch: 'navigationItemPatientSearch',\n    appointmentTemplates: 'navigationItemAppointmentTemplating',\n    clinicChat: 'navigationItemChat',\n    patientRecords: 'navigationItemPatientRecords',\n    logout: 'navigationItemLogout'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone',\n    calendarControl: 'calendarControl',\n    calendarDetail:'calendarDetail'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\nexport const CurrentWorkoutSidebarPrefs: SidebarPrefs = {\n    id: 'currentWorkoutSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.right\n}\n\nexport const CurrentWorkoutContainers = {\n    list: 'exercises',\n    detail: 'workoutDetail'\n}\n\nexport const ExerciseTypesSidebarPrefs: SidebarPrefs = {\n    id: 'exerciseTypesSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.left\n}\n\nexport const ExerciseTypesSidebarContainers = {\n    container: 'exerciseTypesContainer',\n}\n\nexport const  WorkoutSummarySidebarPrefs: SidebarPrefs = {\n    id: 'workoutSummarySidebar',\n    expandedSize: '100%',\n    location: SidebarLocation.bottom\n}\n\nexport const  WorkoutSummarySidebarContainers = {\n    container: 'workoutSummary',\n}\n\nexport const SELECT = {\n    appointmentType : 'event-appt-type',\n    patientSearch : 'event-patient'\n}\n\n","import debug from 'debug';\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport {isSameMongo} from \"./EqualityFunctions\";\nimport {\n    AggregateStateManager,\n    AsyncStateManagerWrapper,\n    BasicObjectDefinitionFactory,\n    ChatManager,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DownloadManager, FieldDefinition, FieldType,\n    GraphQLApiStateManager, KeyType,\n    MemoryBufferStateManager,\n    NotificationController, ObjectDefinitionRegistry,\n    RESTApiStateManager,\n    SimpleValueDataSource,\n    SocketManager,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true\n            },\n            {\n                stateName: STATE_NAMES.clinicConfig,\n                serverURL: '',\n                api: API_Config.clinicConfig,\n                isActive: true\n            },\n        ]);\n        let qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([\n            {\n                stateName: STATE_NAMES.patientSearch,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPatientSearchDetails {_id,identifiers { legacyId},flags {isInactive,hasWarnings},name {firstname,surname}, warnings {_id, warnings}}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPatientSearchDetails',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointments,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointments {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    create: 'mutation createAppointment($data: AppointmentInput!){addAppointment(appt: $data) {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    destroy: 'mutation deleteAppointment($identifier: String!){deleteAppointment(id: $identifier)}',\n                    update: 'mutation updateAppointment($data: AppointmentInput!){updateAppointment(appt: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointments',\n                    create: 'addAppointment',\n                    destroy: 'deleteAppointment',\n                    update: 'updateAppointment',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTypes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTypes {_id,name,colour,icon}}',\n                    create: 'mutation createAppointmentType($data: AppointmentInput!){addAppointmentType(apptType: $data) {_id,name,colour,icon}}',\n                    destroy: 'mutation deleteAppointmentType($identifier: String!){deleteAppointmentType(id: $identifier)}',\n                    update: 'mutation updateAppointmentType($data: AppointmentInput!){updateAppointmentType(apptType: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTypes',\n                    create: 'addAppointmentType',\n                    destroy: 'deleteAppointmentType',\n                    update: 'updateAppointmentType',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.providers,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getProviders {_id,name,providerNo,isCurrent}}',\n                    create: 'mutation addProvider($data: ProviderInput!){addProvider(provider: $data) {_id,name,providerNo,isCurrent}}',\n                    destroy: 'mutation deleteProvider($identifier: String!){deleteProvider(id: $identifier)}',\n                    update: 'mutation updateProvider($data: ProviderInput!){updateProvider(provider: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getProviders',\n                    create: 'addProvider',\n                    destroy: 'deleteProvider',\n                    update: 'updateProvider',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTemplates,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTemplates {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    create: 'mutation addAppointmentTemplate($data: AppointmentTemplateInput!){addAppointmentTemplate(template: $data) {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    destroy: 'mutation deleteAppointmentTemplate($identifier: String!){deleteAppointmentTemplate(id: $identifier)}',\n                    update: 'mutation updateAppointmentTemplate($data: AppointmentTemplateInput!){updateAppointmentTemplate(template: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTemplates',\n                    create: 'addAppointmentTemplate',\n                    destroy: 'deleteAppointmentTemplate',\n                    update: 'updateAppointmentTemplate',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n        ])\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo);\n        let memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        let asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n        let asyncQL = new AsyncStateManagerWrapper(aggregateSM, qlSM, isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.appointments,STATE_NAMES.patientSearch,STATE_NAMES.recentPatientSearches,STATE_NAMES.appointmentTypes, STATE_NAMES.providers,STATE_NAMES.appointmentTemplates], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.users,STATE_NAMES.clinicConfig], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.providers);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n            this.getStateManager().getStateByName(STATE_NAMES.clinicConfig);\n            this.getStateManager().getStateByName(STATE_NAMES.patientSearch);\n            this.getStateManager().getStateByName(STATE_NAMES.appointments);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\n\n","\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","\n\nimport debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {DataChangeType, NotificationManager, NotificationType, SecurityManager, SocketListener} from \"ui-framework-jps\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        let stateObj = message.data;\n        slLogger(stateObj);\n\n        // are we the same user that made the changes?\n        if (message.user === SecurityManager.getInstance().getLoggedInUsername()) {\n            slLogger(`changes made by the current user, no need to do anything`);\n        }\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case DataChangeType.create: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.info);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.update: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            console.log(stateObj);\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.delete: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {AppointmentTemplateFilterView} from \"./AppointmentTemplateFilterView\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\n\n\nconst logger = debug('appointment-template-controller');\n\n\ntype AppointmentTemplateDataElements = {\n    appointmentTypes: any[] | null,\n    clinicConfig: any | null,\n    providers: any[] | null,\n    oldEvent: any | null,\n    tempEvent: any,\n    isDeletingEvent: boolean,\n    isRestoringEvent: boolean,\n    currentFirstDate:number,\n    currentFirstDateDayNumber:number,\n    currentLastDate:number\n}\n\nexport class AppointmentTemplateController implements StateChangeListener {\n    private static _instance: AppointmentTemplateController;\n\n    public static getInstance(): AppointmentTemplateController {\n        if (!(AppointmentTemplateController._instance)) {\n            AppointmentTemplateController._instance = new AppointmentTemplateController();\n        }\n        return AppointmentTemplateController._instance;\n    }\n\n\n\n    private dataElements: AppointmentTemplateDataElements = {\n        appointmentTypes: null,\n        clinicConfig: null,\n        providers: null,\n        oldEvent: null,\n        tempEvent: {},\n        isDeletingEvent: false,\n        isRestoringEvent: false,\n        currentFirstDate:0,\n        currentLastDate:0,\n        currentFirstDateDayNumber:1\n    };\n\n    public getModel(): AppointmentTemplateDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentTemplateView.getInstance().onDocumentLoaded();\n        AppointmentTemplateFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.providers, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTemplates, this);\n\n    }\n\n    public getIconForAppointmentType(appointmentType: string) {\n        logger(`Getting icon for appoint type ${appointmentType}`);\n        let result = ``;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) {\n                if (this.dataElements.appointmentTypes[foundIndex].icon) {\n                    result = `<i class=\"md-custom-event-icon ${this.dataElements.appointmentTypes[foundIndex].icon}\"></i>`;\n                }\n\n            }\n        }\n        return result;\n    }\n\n\n    public getIconsForEventTemplate(event: any): string {\n        return this.getIconForAppointmentType(event.type);\n    }\n\n    public getColourForAppointmentType(appointmentType: string) {\n        let result = `rgba(10, 100, 100, 50)`;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = this.dataElements.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    public getColourForAppointmentTemplate(appointment: any) {\n        return this.getColourForAppointmentType(appointment.type);;\n    }\n\n    public getEventForAppointmentTemplate(appointment:any):any {\n        if (appointment.day < this.dataElements.currentFirstDateDayNumber) return null;\n        const loadDate = this.dataElements.currentFirstDate + (appointment.day - this.dataElements.currentFirstDateDayNumber);\n        const time = parseInt(appointment.time); // HHMMSS as a time\n        const duration = appointment.duration; // seconds\n\n        const startTimeHours = Math.floor(appointment.time / 10000);\n        const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n        const appointmentDuration = Math.floor(duration / 60);\n\n        let endTimeHours = startTimeHours;\n        let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n        if (endTimeMinutes > 60) {\n            endTimeMinutes -= 60;\n            endTimeHours += 1; // 24 hour time\n        }\n\n        let timeString = `${endTimeHours}`;\n        if (endTimeHours < 10) timeString = '0' + timeString;\n        if (endTimeMinutes < 10) timeString += '0';\n        timeString += `${endTimeMinutes}`;\n\n        let result = {\n            id: appointment._id,\n            start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n            color: this.getColourForAppointmentTemplate(appointment),\n            allDay: false,\n            editable: true,\n            repeat:'weekly',\n            resource: appointment.provider,\n            createdBy: appointment.createdBy,\n            created: appointment.created,\n            modified: appointment.modified,\n            type: appointment.type,\n            provider: appointment.provider\n        }\n\n        return result;\n\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        this.dataElements.currentFirstDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        this.dataElements.currentFirstDateDayNumber = parseInt(moment(event.firstDay).format('d'));\n        this.dataElements.currentLastDate = parseInt(moment(event.lastDay).format('YYYYMMDD')) - 1;\n        logger(`Need to load date range (${this.dataElements.currentFirstDate},${this.dataElements.currentLastDate }) starting with day ${this.dataElements.currentFirstDateDayNumber}`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n        let results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) results.push(result);\n        });\n\n        inst.setEvents(results);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Template Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                this.dataElements.clinicConfig = newValue[0];\n                AppointmentTemplateView.getInstance().applyClinicConfig(this.dataElements.clinicConfig);\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                this.dataElements.appointmentTypes = newValue;\n                AppointmentTemplateDetailModal.getInstance().setupAppointmentTypeDropDown(newValue);\n                break;\n\n            }\n            case (STATE_NAMES.providers): {\n                this.dataElements.providers = newValue;\n\n                AppointmentTemplateFilterView.getInstance().populateProviders(newValue);\n\n                AppointmentTemplateView.getInstance().setupProviders(newValue);\n\n                break;\n\n            }\n            case (STATE_NAMES.appointmentTemplates): {\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n                let results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    let result = this.getEventForAppointmentTemplate(appointment);\n                    if (result) results.push(result);\n                });\n\n                AppointmentTemplateView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment Template inserted by another user');\n            logger(appointment);\n\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) AppointmentTemplateView.getInstance().getCalender().addEvent(result);\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointmentTemplates) {\n            logger('Appointment Template deleted by another user');\n            logger(appointment);\n\n            AppointmentTemplateView.getInstance().getCalender().removeEvent([appointment._id]);\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) AppointmentTemplateView.getInstance().getCalender().updateEvent(result);\n        }\n    }\n\n    public getAppointmentTemplateFromEvent(event: any): any {\n        let day = parseInt(moment(event.start).format('d'));\n        let time = moment(event.start).format('HHmmss');\n        let duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        let appointment = {\n            _id: event.id,\n            day: day,\n            time: time,\n            duration: duration,\n            createdBy: event.createdBy,\n            created: event.created,\n            modified: event.modified,\n            type: event.type,\n            provider: event.resource\n        };\n        return appointment;\n    }\n\n\n}\n","import {SELECT, STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, getInst, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\n\nconst logger = debug('appointment-template-detail-view');\n\ntype AppointmentTemplateDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    deleteButton: HTMLButtonElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n}\n\n\nexport class AppointmentTemplateDetailModal {\n\n    private static _instance: AppointmentTemplateDetailModal;\n\n    public static getInstance(): AppointmentTemplateDetailModal {\n        if (!(AppointmentTemplateDetailModal._instance)) {\n            AppointmentTemplateDetailModal._instance = new AppointmentTemplateDetailModal();\n        }\n        return AppointmentTemplateDetailModal._instance;\n    }\n\n\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n\n    private patients: any[];\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    private viewElements: AppointmentTemplateDetailViewElements = {\n        popup: null,\n        range: null,\n        deleteButton: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        providersDropdown: null\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete-template');\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById('event-appt-type-template');\n\n        \n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-template-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            onClose: function () {\n                if (AppointmentTemplateController.getInstance().getModel().isDeletingEvent) {\n                    //\n                    AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n                    Controller.getInstance().getStateManager().removeItemFromState(\n                        STATE_NAMES.appointmentTemplates,\n                        AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(AppointmentTemplateController.getInstance().getModel().tempEvent),\n                        false);\n\n                } else if (AppointmentTemplateController.getInstance().getModel().isRestoringEvent) {\n                    //\n                    AppointmentTemplateView.getInstance().getCalender().updateEvent(AppointmentTemplateController.getInstance().getModel().oldEvent);\n                    Controller.getInstance().getStateManager().updateItemInState(\n                        STATE_NAMES.appointmentTemplates,\n                        AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(AppointmentTemplateController.getInstance().getModel().tempEvent),\n                        false);\n                }\n            },\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n\n        this.viewElements.range = datepicker('#event-date-template', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input-template',\n            endInput: '#end-input-template',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentTemplateDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                let date = args.value;\n                // update event's start date\n                AppointmentTemplateController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentTemplateController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointment templates');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        let types: any[] = [];\n\n        appointmentTypes.forEach((type: any) => {\n            if (!(type.isStatus)) types.push(type.name);\n        });\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#event-appt-type-template', {\n            data: types,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider-template', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentTemplateController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointmentTemplate(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n        AppointmentTemplateController.getInstance().getModel().isDeletingEvent = true;\n        AppointmentTemplateController.getInstance().getModel().isRestoringEvent = false;\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentTemplateController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        let colour = AppointmentTemplateController.getInstance().getColourForAppointmentType('Consulting');\n\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        let updatedEvent = {\n                            id: appointmentId,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            editable: true,\n                            resource: AppointmentTemplateController.getInstance().getModel().tempEvent.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            type: AppointmentTemplateController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentTemplateController.getInstance().getModel().tempEvent.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n                        //\n                        AppointmentTemplateController.getInstance().getModel().isDeletingEvent = false;\n\n                        // navigate the calendar to the correct view\n                        AppointmentTemplateView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n        this.viewElements.range.setVal([AppointmentTemplateController.getInstance().getModel().tempEvent.start, AppointmentTemplateController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentTemplateController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointmentTemplate(args: any) {\n        let ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n        AppointmentTemplateController.getInstance().getModel().isDeletingEvent = false;\n        AppointmentTemplateController.getInstance().getModel().isRestoringEvent = true;\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        let updatedEvent = {\n                            id: ev.id,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            editable: true,\n                            resource: ev.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n                        \n                        // @ts-ignore\n                        updatedEvent.color = AppointmentTemplateController.getInstance().getColourForAppointmentTemplate(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentTemplateView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentTemplateController.getInstance().getModel().isRestoringEvent = false;\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(AppointmentTemplateController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentTemplateController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentTemplateDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentTemplateController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n    }\n\n}\n","import {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {Checkbox, enhance, Input, registerComponent} from \"@mobiscroll/javascript\";\n\nexport class AppointmentTemplateFilterView {\n    private static _instance: AppointmentTemplateFilterView;\n\n    public static getInstance(): AppointmentTemplateFilterView {\n        if (!(AppointmentTemplateFilterView._instance)) {\n            AppointmentTemplateFilterView._instance = new AppointmentTemplateFilterView();\n        }\n        return AppointmentTemplateFilterView._instance;\n    }\n\n    private providersEl: HTMLDivElement|null;\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providerFilter');\n        registerComponent(Checkbox);\n        registerComponent(Input);\n    }\n\n    public populateProviders(providers:any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider:any) => {\n                let labelEl = document.createElement('label');\n                let inputEl = document.createElement('input');\n                inputEl.setAttribute('type','checkbox');\n                inputEl.setAttribute('value',provider.name);\n                inputEl.setAttribute(\"checked\",'');\n                inputEl.setAttribute(\"mbsc-checkbox\",'');\n                inputEl.setAttribute('data-label',provider.name);\n                inputEl.classList.add('provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            enhance(this.providersEl);\n\n\n            document.querySelectorAll('.provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    let checkboxList = document.querySelectorAll('.provider-checkbox');\n                    let selected:any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        let checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id:checkbox.value,name:checkbox.value});\n                        }\n                    }\n\n                    AppointmentTemplateView.getInstance().getCalender().setOptions({\n                       resources: selected\n                    });\n                });\n            });\n\n        }\n\n    }\n\n}","import {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport {datepicker, Datepicker, eventcalendar, Eventcalendar, snackbar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES, VIEW_CONTAINER} from \"../AppTypes\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\n\nconst logger = debug('appointment-view');\n\ntype AppointmentTemplateViewElements = {\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentTemplateView {\n    private static _instance: AppointmentTemplateView;\n\n    public static getInstance(): AppointmentTemplateView {\n        if (!(AppointmentTemplateView._instance)) {\n            AppointmentTemplateView._instance = new AppointmentTemplateView();\n        }\n        return AppointmentTemplateView._instance;\n    }\n\n    private constructor() {\n        this.handleAppointmentTemplateRendering = this.handleAppointmentTemplateRendering.bind(this);\n    }\n\n\n    private viewElements: AppointmentTemplateViewElements = {\n        calendar: null,\n    }\n\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n    handleAppointmentTemplateRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentTemplateController.getInstance().getIconsForEventTemplate(data.original);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row \">' +\n            `      <div style=\"background:${data.color}\" class=\"col-12 md-custom-event-template-type\">${data.original.type}</div>` +\n            '      <div class=\"col-12 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n                `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n                '      </div>' +\n                '  </div>' +\n                '</div>';\n        } else {\n            buffer += '' +\n                '  </div>' +\n                '</div>';\n        }\n        return buffer;\n    }\n\n\n    public onDocumentLoaded() {\n\n        AppointmentTemplateDetailModal.getInstance().onDocumentLoaded();\n\n\n        let options: any;\n        if (AppointmentTemplateController.getInstance().getModel().clinicConfig) {\n            logger('Using clinic config options');\n            options = {\n                clickToCreate: AppointmentTemplateController.getInstance().getModel().clinicConfig.clickToCreate,\n                dragTimeStep: AppointmentTemplateController.getInstance().getModel().clinicConfig.dragTimeStep,\n                dragToCreate: AppointmentTemplateController.getInstance().getModel().clinicConfig.dragToCreate,\n                dragToMove: AppointmentTemplateController.getInstance().getModel().clinicConfig.dragToMove,\n                dragToResize: AppointmentTemplateController.getInstance().getModel().clinicConfig.dragToResize,\n                min: moment().subtract(AppointmentTemplateController.getInstance().getModel().clinicConfig.min, \"months\"),\n                controls: AppointmentTemplateController.getInstance().getModel().clinicConfig.controls,\n                showControls: AppointmentTemplateController.getInstance().getModel().clinicConfig.showControls,\n                view: AppointmentTemplateController.getInstance().getModel().clinicConfig.view,\n                invalidateEvent: AppointmentTemplateController.getInstance().getModel().clinicConfig.invalidateEvent,\n                invalid: AppointmentTemplateController.getInstance().getModel().clinicConfig.invalid,\n            }\n            options.view.schedule.type = 'week';\n        } else {\n            logger('Using DEFAULT config options');\n            options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'week',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n        }\n\n\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentTemplateController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentTemplateDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentTemplateController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentTemplateDetailModal.getInstance().startCreateAppointmentTemplate(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentTemplateView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            AppointmentTemplateController.getInstance().getModel().oldEvent = Object.assign({}, args.event);\n            AppointmentTemplateController.getInstance().getModel().tempEvent = args.event;\n\n            if (!AppointmentTemplateDetailModal.getInstance().isVisible()) {\n                logger(args);\n                AppointmentTemplateDetailModal.getInstance().updateAppointmentTemplate(args);\n            }\n        }\n        options.renderScheduleEvent = this.handleAppointmentTemplateRendering;\n        options.onEventUpdated = (args:any) => {\n            console.log(args);\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentTemplateController.getInstance().getAppointmentTemplateFromEvent(args.event),\n                false);\n        }\n\n        if (AppointmentTemplateController.getInstance().getModel().providers) {\n            let providers: any[] = [];\n\n            AppointmentTemplateController.getInstance().getModel().providers.forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById('templateDetail'), options);\n    }\n\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n            const config = {...clinicConfig};\n            config.view.schedule.type = 'week';\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n\n\n        }\n        AppointmentTemplateDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n\n    public setupProviders(providersCollection: any[]) {\n        let providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentTemplateDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n\n}","import {AppointmentController} from \"./AppointmentController\";\nimport {datepicker, Datepicker, eventcalendar, Eventcalendar, snackbar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES, VIEW_CONTAINER} from \"../AppTypes\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\n\nconst logger = debug('appointment-view');\n\ntype AppointmentViewElements = {\n    datePicker: Datepicker | null,\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentBookView {\n    private static _instance: AppointmentBookView;\n\n    public static getInstance(): AppointmentBookView {\n        if (!(AppointmentBookView._instance)) {\n            AppointmentBookView._instance = new AppointmentBookView();\n        }\n        return AppointmentBookView._instance;\n    }\n\n    private constructor() {\n        this.handleAppointmentRendering = this.handleAppointmentRendering.bind(this);\n    }\n\n\n    private viewElements: AppointmentViewElements = {\n        datePicker: null,\n        calendar: null,\n    }\n\n    protected setupDatePicker() {\n        // @ts-ignore\n        this.viewElements.datePicker = datepicker(document.getElementById(VIEW_CONTAINER.calendarControl), {\n            controls: ['calendar'],\n            display: \"inline\",\n            dateFormat: 'YYYYMMDD',\n            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            showWeekNumbers: true,\n            onChange: (event: any, inst: any) => {\n                AppointmentBookView.getInstance().viewElements.calendar?.navigate(event.value);\n            }\n        });\n    }\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n    handleAppointmentRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentController.getInstance().getIconsForEvent(data.original);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row \">' +\n            `      <div style=\"background:${data.color}\" class=\"col-sm-12 col-md-2 md-custom-event-type\">${data.original.type}</div>` +\n            `      <div class=\"col-sm-4 col-md-6 md-custom-event-title\">${data.title}</div>` +\n            '      <div class=\"col-sm-6 col-md-4 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n                `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n                '      </div>' +\n                '  </div>' +\n                '</div>';\n        } else {\n            buffer += '' +\n                '  </div>' +\n                '</div>';\n        }\n        return buffer;\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.setupDatePicker();\n        AppointmentDetailModal.getInstance().onDocumentLoaded();\n\n\n        let options: any;\n        if (AppointmentController.getInstance().getModel().clinicConfig) {\n            logger('Using clinic config options');\n            options = {\n                clickToCreate: AppointmentController.getInstance().getModel().clinicConfig.clickToCreate,\n                dragTimeStep: AppointmentController.getInstance().getModel().clinicConfig.dragTimeStep,\n                dragToCreate: AppointmentController.getInstance().getModel().clinicConfig.dragToCreate,\n                dragToMove: AppointmentController.getInstance().getModel().clinicConfig.dragToMove,\n                dragToResize: AppointmentController.getInstance().getModel().clinicConfig.dragToResize,\n                min: moment().subtract(AppointmentController.getInstance().getModel().clinicConfig.min, \"months\"),\n                controls: AppointmentController.getInstance().getModel().clinicConfig.controls,\n                showControls: AppointmentController.getInstance().getModel().clinicConfig.showControls,\n                view: AppointmentController.getInstance().getModel().clinicConfig.view,\n                invalidateEvent: AppointmentController.getInstance().getModel().clinicConfig.invalidateEvent,\n                invalid: AppointmentController.getInstance().getModel().clinicConfig.invalid,\n            }\n        } else {\n            logger('Using DEFAULT config options');\n            options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'day',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n        }\n\n\n        options.onSelectedDateChange = (event: any, inst: any) => {\n            AppointmentBookView.getInstance().viewElements.datePicker?.setVal(event.date);\n        };\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentDetailModal.getInstance().startCreateAppointment(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentBookView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            if (args.event.editable) {\n                AppointmentController.getInstance().getModel().oldEvent = Object.assign({}, args.event);\n                AppointmentController.getInstance().getModel().tempEvent = args.event;\n\n                if (!AppointmentDetailModal.getInstance().isVisible()) {\n                    logger(args);\n                    AppointmentDetailModal.getInstance().updateAppointment(args);\n                }\n            }\n        }\n        options.renderScheduleEvent = this.handleAppointmentRendering;\n        options.onEventUpdated = (args:any) => {\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(args.event),\n                false);\n\n        }\n\n        if (AppointmentController.getInstance().getModel().providers) {\n            let providers: any[] = [];\n\n            AppointmentController.getInstance().getModel().providers.forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById(VIEW_CONTAINER.calendarDetail), options);\n    }\n\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                min: moment().subtract(clinicConfig.min, \"months\"),\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n\n\n        }\n        AppointmentDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n\n    public setupProviders(providersCollection: any[]) {\n        let providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n\n}","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {AppointmentFilterView} from \"./AppointmentFilterView\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\n\n\nconst logger = debug('appointment-controller');\n\n\ntype AppointmentDataElements = {\n    appointmentTypes: any[] | null,\n    clinicConfig: any | null,\n    providers: any[] | null,\n    oldEvent: any | null,\n    tempEvent: any,\n    isDeletingEvent: boolean,\n    isRestoringEvent: boolean,\n    loadDate:number,\n    loadDateFinish:number,\n}\n\nexport class AppointmentController implements StateChangeListener {\n    private static _instance: AppointmentController;\n\n    public static getInstance(): AppointmentController {\n        if (!(AppointmentController._instance)) {\n            AppointmentController._instance = new AppointmentController();\n        }\n        return AppointmentController._instance;\n    }\n\n    public static APPOINTMENT_STATUS_ARRIVED = 'Patient Arrived';\n    public static APPOINTMENT_STATUS_READY_FOR_BILLING = 'Ready For Billing';\n    public static APPOINTMENT_STATUS_BILLING_COMPLETE = 'Billing Complete';\n    public static APPOINTMENT_TYPE_PATIENT_CANCELLED = 'Patient Cancelled';\n    public static APPOINTMENT_TYPE_PATIENT_DNA = 'Did Not Arrive';\n\n\n    private dataElements: AppointmentDataElements = {\n        appointmentTypes: null,\n        clinicConfig: null,\n        providers: null,\n        oldEvent: null,\n        tempEvent: {},\n        isDeletingEvent: false,\n        isRestoringEvent: false,\n        loadDate:0,\n        loadDateFinish:0\n    };\n\n    public getModel(): AppointmentDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentBookView.getInstance().onDocumentLoaded();\n        AppointmentFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.providers, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointments, this);\n\n    }\n\n    public getIconForAppointmentType(appointmentType: string) {\n        logger(`Getting icon for appoint type ${appointmentType}`);\n        let result = ``;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) {\n                if (this.dataElements.appointmentTypes[foundIndex].icon) {\n                    result = `<i class=\"md-custom-event-icon ${this.dataElements.appointmentTypes[foundIndex].icon}\"></i>`;\n                }\n\n            }\n        }\n        return result;\n    }\n\n\n    public getIconsForEvent(event: any): string {\n        let buffer = '';\n        if (event.arrivalTime) {\n            if (event.arrivalTime.trim().length > 0) {\n                buffer += this.getIconForAppointmentType(AppointmentController.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (event.readyForBilling) {\n            buffer += this.getIconForAppointmentType(AppointmentController.APPOINTMENT_STATUS_READY_FOR_BILLING);\n        }\n        if (event.isBilled) {\n            buffer += this.getIconForAppointmentType(AppointmentController.APPOINTMENT_STATUS_BILLING_COMPLETE);\n        }\n        buffer += this.getIconForAppointmentType(event.type);\n\n        return buffer;\n    }\n\n    public getColourForAppointmentType(appointmentType: string) {\n        let result = `rgba(10, 100, 100, 50)`;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = this.dataElements.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    public getColourForAppointment(appointment: any) {\n        let colour = this.getColourForAppointmentType(appointment.type);;\n        if (appointment.arrivalTime) {\n            if (appointment.arrivalTime.trim().length > 0) {\n                colour = this.getColourForAppointmentType(AppointmentController.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (appointment.readyForBilling) {\n            colour = this.getColourForAppointmentType(AppointmentController.APPOINTMENT_STATUS_READY_FOR_BILLING);\n        }\n        if (appointment.isBilled) {\n            colour = this.getColourForAppointmentType(AppointmentController.APPOINTMENT_STATUS_BILLING_COMPLETE);\n        }\n        if (appointment.isCancelled) {\n            colour = this.getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n        }\n        if (appointment.isDNA) {\n            colour = this.getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA);\n        }\n        return colour;\n    }\n\n    public getEventForAppointment(loadDate:number, appointment:any):any {\n        const today = parseInt(moment().format('YYYYMMDD'));\n\n        let canEdit = ((loadDate >= today) && (!appointment.isDNA && !appointment.isCancelled) && (!appointment.isBilled));\n        // convert the start and end time into the format for the calendar\n        const time = parseInt(appointment.time); // HHMMSS as a time\n        const duration = appointment.duration; // seconds\n\n        const startTimeHours = Math.floor(appointment.time / 10000);\n        const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n        const appointmentDuration = Math.floor(duration / 60);\n\n        let endTimeHours = startTimeHours;\n        let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n        if (endTimeMinutes > 60) {\n            endTimeMinutes -= 60;\n            endTimeHours += 1; // 24 hour time\n        }\n\n        let timeString = `${endTimeHours}`;\n        if (endTimeHours < 10) timeString = '0' + timeString;\n        if (endTimeMinutes < 10) timeString += '0';\n        timeString += `${endTimeMinutes}`;\n\n        let result = {\n            id: appointment._id,\n            start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n            title: appointment.name,\n            description: appointment.note,\n            color: this.getColourForAppointment(appointment),\n            allDay: false,\n            editable: canEdit,\n            resource: appointment.provider,\n            patientId: appointment._patient,\n            isDNA: appointment.isDNA,\n            isCancelled: appointment.isCancelled,\n            createdBy: appointment.createdBy,\n            created: appointment.created,\n            modified: appointment.modified,\n            arrivalTime: appointment.arrivalTime,\n            type: appointment.type,\n            provider: appointment.provider,\n            readyForBilling: appointment.readyForBilling,\n            billingItems: appointment.billingItems,\n            isBilled:appointment.isBilled\n        }\n\n        return result;\n\n    }\n\n\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        this.dataElements.loadDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        this.dataElements.loadDateFinish = parseInt(moment(event.lastDay).format('YYYYMMDD'));\n        logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        let results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                logger('Found appointment');\n                logger(appointment);\n\n                let result = this.getEventForAppointment(this.dataElements.loadDate,appointment);\n\n\n                logger('Converted to event');\n                logger(result);\n                results.push(result);\n            }\n\n        });\n\n        inst.setEvents(results);\n\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                this.dataElements.clinicConfig = newValue[0];\n                AppointmentBookView.getInstance().applyClinicConfig(this.dataElements.clinicConfig);\n                break;\n            }\n            case (STATE_NAMES.patientSearch): {\n                AppointmentDetailModal.getInstance().setupPatientSearchDropDown(newValue);\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                this.dataElements.appointmentTypes = newValue;\n                AppointmentDetailModal.getInstance().setupAppointmentTypeDropDown(newValue);\n                break;\n\n            }\n            case (STATE_NAMES.providers): {\n                this.dataElements.providers = newValue;\n\n                AppointmentFilterView.getInstance().populateProviders(newValue);\n\n                AppointmentBookView.getInstance().setupProviders(newValue);\n\n                break;\n\n            }\n            case (STATE_NAMES.appointments): {\n\n                this.dataElements.loadDate = parseInt(moment().format('YYYYMMDD'));\n                this.dataElements.loadDateFinish = parseInt(moment().add(1,'days').format('YYYYMMDD'));\n                logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n                let results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                        logger('Found appointment');\n                        logger(appointment);\n\n                        let result = this.getEventForAppointment(this.dataElements.loadDate,appointment);\n\n\n                        logger('Converted to event');\n                        logger(result);\n                        results.push(result);\n                    }\n\n                });\n\n                AppointmentBookView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment inserted by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                let result = this.getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                AppointmentBookView.getInstance().getCalender().addEvent(result);\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointments) {\n            logger('Appointment deleted by another user');\n            logger(appointment);\n\n            AppointmentBookView.getInstance().getCalender().removeEvent([appointment._id]);\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                let result = this.getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                AppointmentBookView.getInstance().getCalender().updateEvent(result);\n            }\n        }\n    }\n\n    public getAppointmentFromEvent(event: any): any {\n        let start = parseInt(moment(event.start).format('YYYYMMDD'));\n        let time = moment(event.start).format('HHmmss');\n        let duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        let appointment = {\n            _id: event.id,\n            name: event.title,\n            note: event.description,\n            start: start,\n            time: time,\n            duration: duration,\n            _patient: event.patientId,\n            isDNA: event.isDNA,\n            isCancelled: event.isCancelled,\n            createdBy: event.createdBy,\n            created: event.created,\n            modified: event.modified,\n            arrivalTime: event.arrivalTime,\n            type: event.type,\n            provider: event.resource,\n            readyForBilling: event.readyForBilling,\n            isBilled: event.isBilled,\n            billingItems: event.billingItems\n        };\n        return appointment;\n    }\n\n\n}\n","import {SELECT, STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, getInst, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentController} from \"./AppointmentController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\n\nconst logger = debug('appointment-detail-view');\n\ntype AppointmentDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    titleInput: HTMLInputElement | null,\n    descriptionTextarea: HTMLTextAreaElement | null,\n    deleteButton: HTMLButtonElement | null,\n    patientArrivedButton: HTMLButtonElement | null,\n    patientCancelledButton: HTMLButtonElement | null,\n    patientDNAButton: HTMLButtonElement | null,\n    readyForBillingButton: HTMLButtonElement | null,\n    billingCompleteButton: HTMLButtonElement | null,\n    patientSearchEl: HTMLSelectElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    patientSearchDropdown: any | null\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n    warningsEl: HTMLTextAreaElement | null\n}\n\n\nexport class AppointmentDetailModal {\n\n    private static _instance: AppointmentDetailModal;\n\n    public static getInstance(): AppointmentDetailModal {\n        if (!(AppointmentDetailModal._instance)) {\n            AppointmentDetailModal._instance = new AppointmentDetailModal();\n        }\n        return AppointmentDetailModal._instance;\n    }\n\n\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n\n    private patients: any[];\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    private viewElements: AppointmentDetailViewElements = {\n        popup: null,\n        range: null,\n        titleInput: null,\n        descriptionTextarea: null,\n        deleteButton: null,\n        patientArrivedButton: null,\n        patientCancelledButton: null,\n        patientDNAButton: null,\n        readyForBillingButton: null,\n        billingCompleteButton: null,\n        patientSearchEl: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        patientSearchDropdown: null,\n        providersDropdown: null,\n        warningsEl: null\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.titleInput = <HTMLInputElement>document.getElementById('event-title');\n        this.viewElements.descriptionTextarea = <HTMLTextAreaElement>document.getElementById('event-desc');\n        this.viewElements.patientArrivedButton = <HTMLButtonElement>document.getElementById('event-arrived');\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete');\n        this.viewElements.patientCancelledButton = <HTMLButtonElement>document.getElementById('event-cancelled');\n        this.viewElements.patientDNAButton = <HTMLButtonElement>document.getElementById('event-dna');\n        this.viewElements.readyForBillingButton = <HTMLButtonElement>document.getElementById('event-readyforbilling');\n        this.viewElements.billingCompleteButton = <HTMLButtonElement>document.getElementById('event-billingcompleted');\n\n        this.viewElements.patientSearchEl = <HTMLSelectElement>document.getElementById(SELECT.patientSearch);\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById(SELECT.appointmentType);\n\n        this.viewElements.warningsEl = <HTMLTextAreaElement>document.getElementById(\"patient-warning\");\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            onClose: function () {\n                if (AppointmentController.getInstance().getModel().isDeletingEvent) {\n                    //\n                    AppointmentBookView.getInstance().getCalender().removeEvent(AppointmentController.getInstance().getModel().tempEvent);\n                    Controller.getInstance().getStateManager().removeItemFromState(\n                        STATE_NAMES.appointments,\n                        AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().getModel().tempEvent),\n                        false);\n\n                } else if (AppointmentController.getInstance().getModel().isRestoringEvent) {\n                    //\n                    AppointmentBookView.getInstance().getCalender().updateEvent(AppointmentController.getInstance().getModel().oldEvent);\n                    Controller.getInstance().getStateManager().updateItemInState(\n                        STATE_NAMES.appointments,\n                        AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().getModel().tempEvent),\n                        false);\n                }\n            },\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n        this.viewElements.titleInput.addEventListener('input', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.title = ev.target.value;\n        });\n\n        this.viewElements.descriptionTextarea.addEventListener('change', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.description = ev.target.value;\n        });\n\n        this.viewElements.range = datepicker('#event-date', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input',\n            endInput: '#end-input',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                let date = args.value;\n                // update event's start date\n                AppointmentController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n        console.log(this.viewElements.range);\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointments');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        let types: any[] = [];\n\n        appointmentTypes.forEach((type: any) => {\n            if (!(type.isStatus)) types.push(type.name);\n        });\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#' + SELECT.appointmentType, {\n            data: types,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointment(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.patientCancelledButton.style.display = 'none';\n        this.viewElements.patientDNAButton.style.display = 'none';\n        this.viewElements.patientArrivedButton.style.display = 'none';\n        this.viewElements.readyForBillingButton.style.display = 'none';\n        this.viewElements.billingCompleteButton.style.display = 'none';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n        AppointmentController.getInstance().getModel().isDeletingEvent = true;\n        AppointmentController.getInstance().getModel().isRestoringEvent = false;\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        let colour = AppointmentController.getInstance().getColourForAppointmentType('Consulting');\n\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        let updatedEvent = {\n                            id: appointmentId,\n                            title: getInst(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            patientId: AppointmentController.getInstance().getModel().tempEvent.patientId,\n                            editable: true,\n                            resource: AppointmentController.getInstance().getModel().tempEvent.resource,\n                            isDNA: false,\n                            isCancelled: false,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: AppointmentController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentController.getInstance().getModel().tempEvent.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentBookView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentBookView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n                        //\n                        AppointmentController.getInstance().getModel().isDeletingEvent = false;\n\n                        // navigate the calendar to the correct view\n                        AppointmentBookView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = AppointmentController.getInstance().getModel().tempEvent.title;\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = '';\n\n        this.viewElements.range.setVal([AppointmentController.getInstance().getModel().tempEvent.start, AppointmentController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentController.getInstance().getModel().tempEvent.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.patientSearchDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointment(args: any) {\n        let ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.patientArrivedButton.style.display = 'block';\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.patientCancelledButton.style.display = 'block';\n        this.viewElements.patientDNAButton.style.display = 'block';\n        this.viewElements.readyForBillingButton.style.display = 'block';\n        this.viewElements.billingCompleteButton.style.display = 'block';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        AppointmentController.getInstance().getModel().isDeletingEvent = false;\n        AppointmentController.getInstance().getModel().isRestoringEvent = true;\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        let updatedEvent = {\n                            id: ev.id,\n                            title: getInst(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            patientId: ev.patientId,\n                            editable: true,\n                            resource: ev.resource,\n                            isDNA: ev.isDNA,\n                            isCancelled: ev.isCancelled,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n                        // @ts-ignore\n                        updatedEvent.color = AppointmentController.getInstance().getColourForAppointment(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentBookView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentBookView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentController.getInstance().getModel().isRestoringEvent = false;\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = ev.title || '';\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = ev.description || '';\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.patientSearchDropdown.setVal(ev.patientId);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        let warningsText = this.getPatientWarnings(ev.patientId);\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentBookView.getInstance().getCalender().removeEvent(AppointmentController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentBookView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n        this.viewElements.patientCancelledButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            let originalType = originalEvent.type;\n            let originalNote = originalEvent.note;\n\n            originalEvent.isCancelled = true;\n            originalEvent.type = AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.note = AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isCancelled = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Cancelled'\n            });\n        });\n\n        this.viewElements.patientArrivedButton.addEventListener('click', function () {\n            // update the event to arrived\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            originalEvent.arrivalTime = moment().format('HHmmss');\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.arrivalTime = '';\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Arrived'\n            });\n        });\n\n        this.viewElements.patientDNAButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n            let originalNote = originalEvent.note;\n            let originalType = originalEvent.type;\n\n            originalEvent.isDNA = true;\n            originalEvent.type = AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.note = AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isDNA = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient DNA'\n            });\n        });\n        this.viewElements.readyForBillingButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.readyForBilling = true;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_STATUS_READY_FOR_BILLING);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.readyForBilling = false;\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Ready For Billing'\n            });\n        });\n        this.viewElements.billingCompleteButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.isBilled = true;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_STATUS_BILLING_COMPLETE);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().getModel().isRestoringEvent = false;\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isBilled = false;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Billing Complete'\n            });\n        });\n    }\n\n    private getPatientWarnings(patientId:string) {\n        let patientBasicDetails: any = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: patientId});\n        let warningsText = '';\n        if (patientBasicDetails && patientBasicDetails.flags.hasWarnings) {\n            patientBasicDetails.warnings.warnings.forEach((warning: any) => {\n                warningsText += warning + '\\r\\n';\n            });\n            logger('Patient has warnings');\n            logger(patientBasicDetails);\n            logger(warningsText);\n\n        }\n        return warningsText;\n\n    }\n\n    public setupPatientSearchDropDown(patientsCollection: any[]) {\n        this.patients = [];\n\n        patientsCollection.forEach((patient: any) => {\n            this.patients.push({text: `${patient.name.surname}, ${patient.name.firstname}`, value: patient._id});\n        });\n\n        // add the patient search values to the data of the select dropdown\n        //\n        this.viewElements.patientSearchDropdown = select('#' + SELECT.patientSearch, {\n            filter: true,\n            data: AppointmentDetailModal.getInstance().patients,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.titleInput).value = event.valueText;\n\n                let warningsText = this.getPatientWarnings(event.value);\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n                AppointmentController.getInstance().getModel().tempEvent.patientId = event.value;\n                AppointmentController.getInstance().getModel().tempEvent.warnings = warningsText;\n            }\n        });\n\n    }\n\n\n}\n","import {AppointmentBookView} from \"./AppointmentBookView\";\nimport {AppointmentController} from \"./AppointmentController\";\nimport App from \"../App\";\nimport moment from \"moment\";\n\nexport class AppointmentFilterView {\n    private static _instance: AppointmentFilterView;\n\n    public static getInstance(): AppointmentFilterView {\n        if (!(AppointmentFilterView._instance)) {\n            AppointmentFilterView._instance = new AppointmentFilterView();\n        }\n        return AppointmentFilterView._instance;\n    }\n\n    private providersEl: HTMLDivElement|null;\n    private calendarFilterEl : HTMLDivElement|null;\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providers');\n        this.calendarFilterEl = <HTMLDivElement>document.getElementById('calendarFilter');\n    }\n\n    public populateProviders(providers:any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider:any) => {\n                let labelEl = document.createElement('label');\n                let inputEl = document.createElement('input');\n                inputEl.setAttribute('type','checkbox');\n                inputEl.setAttribute('value',provider.name);\n                inputEl.setAttribute(\"checked\",'');\n                inputEl.setAttribute(\"mbsc-checkbox\",'');\n                inputEl.setAttribute('data-label',provider.name);\n                inputEl.classList.add('provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            // @ts-ignore\n            mobiscroll5.enhance(this.providersEl);\n            // @ts-ignore\n            mobiscroll5.enhance(this.calendarFilterEl);\n\n\n            document.querySelectorAll('.provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    let checkboxList = document.querySelectorAll('.provider-checkbox');\n                    let selected:any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        let checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id:checkbox.value,name:checkbox.value});\n                        }\n                    }\n\n                    console.log(selected);\n\n                     AppointmentBookView.getInstance().getCalender().setOptions({\n                        resources: selected\n                     });\n                });\n            });\n\n            // document.querySelectorAll('.md-view-change').forEach(function (elm) {\n            //     elm.addEventListener('change', function (ev) {\n            //\n            //         let config = {...AppointmentTemplateController.getInstance().getModel().clinicConfig};\n            //          config.view.schedule.type = ev.target.value;\n            //\n            //         let options = {\n            //             //clickToCreate: config.clickToCreate,\n            //             //dragTimeStep: config.dragTimeStep,\n            //             //dragToCreate: config.dragToCreate,\n            //             //dragToMove: config.dragToMove,\n            //             //dragToResize: config.dragToResize,\n            //             //min: moment().subtract(config.min, \"months\"),\n            //             //controls: config.controls,\n            //             //showControls: config.showControls,\n            //             view: {\n            //                 schedule: {\n            //                     type: ev.target.value,\n            //                     startTime: config.view.schedule.startTime,\n            //                     endTime: config.view.schedule.endTime,\n            //                     timeCellStep:10,\n            //                     timeLabelStep:60\n            //                 }\n            //             },\n            //             //invalidateEvent: config.invalidateEvent,\n            //             //invalid: config.invalid,\n            //         }\n            //\n            //         console.log(options);\n            //\n            //         AppointmentTemplateView.getInstance().getCalender().setOptions(options);\n            //\n            //     });\n            // });\n\n\n        }\n\n    }\n\n}","import debug from 'debug';\nimport Controller from './Controller';\n\nimport {\n    API_Config,\n    NAVIGATION,\n} from \"./AppTypes\";\nimport React, {ReactNode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AppointmentController} from \"./appointments/AppointmentController\";\nimport {\n    ChatRoomsSidebar,\n    ContextualInformationHelper,\n    SecurityManager,\n    UnreadMessageCountListener\n} from \"ui-framework-jps\";\nimport {setOptions} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./appointment-templates/AppointmentTemplateController\";\n\n\n\n\n\n\nconst logger = debug('app');\n\nexport default class App extends React.Component implements UnreadMessageCountListener {\n\n\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    private thisEl: HTMLDivElement | null = null;\n    private chatNavigationItem: HTMLAnchorElement | null = null;\n\n\n\n    public constructor() {\n        // @ts-ignore\n        super();\n        // event handlers\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowAppointmentBook = this.handleShowAppointmentBook.bind(this);\n        this.handleShowAppointmentBook = this.handleShowAppointmentTemplates.bind(this);\n        this.handleShowAppointmentBook = this.handleShowPatientRecords.bind(this);\n        this.handleShowAppointmentBook = this.handleShowPatientSearch.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    render(): ReactNode {\n        logger(\"Rendering App\");\n        return (\n            <div></div>\n        )\n    }\n\n\n\n\n    componentDidMount(): void {\n        logger('component Did Mount');\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupNavigationItemHandling();\n\n        AppointmentController.getInstance().onDocumentLoaded();\n        AppointmentTemplateController.getInstance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n    }\n\n\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    protected handleShowAppointmentBook(event:Event):void {\n\n    }\n    protected handleShowAppointmentTemplates(event:Event):void {\n\n    }\n    protected handleShowPatientRecords(event:Event):void {\n\n    }\n    protected handleShowPatientSearch(event:Event):void {\n\n    }\n\n\n    private setupNavigationItemHandling() {\n        document.getElementById(NAVIGATION.appointmentBook).addEventListener('click', this.handleShowAppointmentBook);\n        let templateEl = document.getElementById(NAVIGATION.appointmentTemplates);\n        if (templateEl) {\n            templateEl.addEventListener('click', this.handleShowAppointmentTemplates);\n        }\n        document.getElementById(NAVIGATION.patientRecords).addEventListener('click',this.handleShowPatientRecords);\n        document.getElementById(NAVIGATION.patientSearch).addEventListener('click',this.handleShowPatientSearch);\n\n\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.clinicChat);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n\n}\n\nlocalStorage.debug = 'api-ts-results appointment-template-controller';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n$(function () {\n\n    setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    mobiscroll5.setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    const element = <App className=\"container-fluid justify-content-around\"/>;\n    ReactDOM.render(element, document.getElementById('root'));\n\n});\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","patientSearch","recentPatientSearches","appointments","appointmentTypes","clinicConfig","providers","appointmentTemplates","API_Config","login","graphQL","NAVIGATION","appointmentBook","clinicChat","patientRecords","logout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","workoutSummary","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","calendarControl","calendarDetail","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","CurrentWorkoutSidebarPrefs","id","expandedSize","location","SidebarLocation","right","CurrentWorkoutContainers","list","detail","ExerciseTypesSidebarPrefs","left","ExerciseTypesSidebarContainers","container","WorkoutSummarySidebarPrefs","bottom","WorkoutSummarySidebarContainers","SELECT","appointmentType","cLogger","debug","cLoggerDetail","constructor","getInstance","Controller","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","qlSM","GraphQLApiStateManager","apiURL","apis","findAll","create","destroy","update","find","data","idField","aggregateSM","memorySM","asyncREST","asyncQL","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","getCurrentUser","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","handleShowChat","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","v4","addWorkoutExercisesToCurrentWorkout","workout","exercise","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","window","filterResults","item1","item2","slLogger","handleDataChangedByAnotherUser","message","type","user","stateObj","SecurityManager","DataChangeType","NotificationManager","username","NotificationType","console","logger","AppointmentTemplateController","dataElements","oldEvent","tempEvent","isDeletingEvent","isRestoringEvent","currentFirstDate","currentLastDate","currentFirstDateDayNumber","getModel","AppointmentTemplateView","AppointmentTemplateFilterView","getIconForAppointmentType","foundIndex","icon","getIconsForEventTemplate","event","getColourForAppointmentType","getColourForAppointmentTemplate","appointment","getEventForAppointmentTemplate","loadDate","time","parseInt","duration","startTimeHours","Math","startTimeMinutes","appointmentDuration","endTimeHours","endTimeMinutes","timeString","start","moment","end","color","allDay","editable","repeat","resource","createdBy","created","modified","provider","onPageLoading","results","inst","newValue","AppointmentTemplateDetailModal","getAppointmentTemplateFromEvent","day","_id","datePickerResponsive","medium","controls","touchUi","datetimePickerResponsive","viewElements","popup","range","deleteButton","appointmentTypeEl","appointmentTypeDropdown","providersDropdown","close","isVisible","applyClinicConfig","stepMinute","dragTimeStep","document","display","contentPadding","fullScreen","onClose","responsive","width","datepicker","select","startInput","endInput","showRangeLabels","maxTime","onChange","date","args","setupAppointmentTypeDropDown","types","setupProviderDropdown","startCreateAppointmentTemplate","headerText","buttons","text","keyCode","handler","mobiId","appointmentId","colour","createdOn","updatedEvent","free","cssClass","anchor","elm","updateAppointmentTemplate","ev","currentTarget","setupActionButtons","deletedEvent","snackbar","button","action","registerComponent","populateProviders","labelEl","inputEl","enhance","checkboxList","selected","i","checkbox","resources","calendar","getCalender","handleAppointmentTemplateRendering","icons","buffer","options","clickToCreate","dragToCreate","dragToMove","dragToResize","min","showControls","view","invalidateEvent","invalid","schedule","startDay","endDay","startTime","endTime","timeCellStep","timeLabelStep","recurring","weekDays","title","Object","groupBy","eventcalendar","config","setupProviders","providersCollection","AppointmentBookView","datePicker","setupDatePicker","dateFormat","dayNamesMin","showWeekNumbers","handleAppointmentRendering","AppointmentController","AppointmentDetailModal","APPOINTMENT_STATUS_ARRIVED","APPOINTMENT_STATUS_READY_FOR_BILLING","APPOINTMENT_STATUS_BILLING_COMPLETE","APPOINTMENT_TYPE_PATIENT_CANCELLED","APPOINTMENT_TYPE_PATIENT_DNA","loadDateFinish","AppointmentFilterView","getIconsForEvent","getColourForAppointment","getEventForAppointment","today","canEdit","description","patientId","isDNA","isCancelled","arrivalTime","readyForBilling","billingItems","isBilled","getAppointmentFromEvent","note","_patient","titleInput","descriptionTextarea","patientArrivedButton","patientCancelledButton","patientDNAButton","readyForBillingButton","billingCompleteButton","patientSearchEl","patientSearchDropdown","warningsEl","getInst","startCreateAppointment","mobiscroll5","updateAppointment","warningsText","originalEvent","originalType","originalNote","getPatientWarnings","patientBasicDetails","warning","setupPatientSearchDropDown","patientsCollection","patient","surname","firstname","filter","React","ReactDOM","ContextualInformationHelper","setOptions","App","Component","thisEl","chatNavigationItem","bind","handleShowAppointmentBook","handleShowAppointmentTemplates","handleShowPatientRecords","handleShowPatientSearch","localStorage","render","componentDidMount","getElementById","setupNavigationItemHandling","hideAllSideBars","chatSidebar","eventHide","roomName","href","eventShow","chatView","selectChatRoom","countChanged","newCount","innerHTML","addEventListener","templateEl","plugin","log","info","$","theme","themeVariant","element"],"sourceRoot":""}