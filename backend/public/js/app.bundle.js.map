{"version":3,"file":"app.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;;WAAYA;AAAAA,EAAAA,UAAAA,uBAAAA,KAAAA,eAAAA;AAAAA,EAAAA,UAAAA,qBAAAA,KAAAA,aAAAA;AAAAA,EAAAA,UAAAA,sBAAAA,KAAAA,cAAAA;AAAAA,EAAAA,UAAAA,6BAAAA,KAAAA,qBAAAA;GAAAA,cAAAA;;AAOL,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EADkB;AAEvBC,EAAAA,QAAQ,EAFe;AAGvBC,EAAAA,aAAa,EAHU;AAIvBC,EAAAA,QAAQ,EAJe;AAKvBC,EAAAA,kBAAkB,EALK;AAMvBC,EAAAA,aAAa,EANU;AAOvBC,EAAAA,qBAAqB,EAPE;AAQvBC,EAAAA,YAAY,EARW;AASvBC,EAAAA,gBAAgB,EATO;AAUvBC,EAAAA,YAAY,EAAC;AAVU,CAApB;AAaA,MAAMC,UAAU,GAAG;AACtBC,EAAAA,KAAK,EADiB;AAEtBC,EAAAA,OAAO,EAFe;AAGtBZ,EAAAA,KAAK,EAHiB;AAItBS,EAAAA,YAAY,EAAE;AAJQ,CAAnB;AAOA,MAAMI,UAAU,GAAG;AACtBC,EAAAA,cAAc,EADQ;AAEtBC,EAAAA,YAAY,EAFU;AAGtBC,EAAAA,eAAe,EAHO;AAItBC,EAAAA,MAAM,EAJgB;AAKtBC,EAAAA,cAAc,EALQ;AAMtBC,EAAAA,cAAc,EANQ;AAOtBC,EAAAA,MAAM,EAAE;AAPc,CAAnB;AAUA,MAAMC,SAAS,GAAG;AACrBC,EAAAA,QAAQ,EADa;AAErBC,EAAAA,gBAAgB,EAFK;AAGrBC,EAAAA,cAAc,EAHO;AAIrBC,EAAAA,cAAc,EAJO;AAKrBC,EAAAA,iBAAiB,EAAE;AALE,CAAlB;AAQA,MAAMC,SAAS,GAAG;AACrBC,EAAAA,YAAY,EADS;AAErBC,EAAAA,OAAO,EAFc;AAGrB5B,EAAAA,QAAQ,EAHa;AAIrB6B,EAAAA,cAAc,EAJO;AAKrB5B,EAAAA,aAAa,EALQ;AAMrB6B,EAAAA,UAAU,EANW;AAOrB5B,EAAAA,QAAQ,EAPa;AAQrBe,EAAAA,cAAc,EARO;AASrBc,EAAAA,SAAS,EAAE;AATU,CAAlB;AAYA,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,kBAAkB,EADQ;AAE1BC,EAAAA,oBAAoB,EAFM;AAG1BC,EAAAA,gBAAgB,EAHU;AAI1BC,EAAAA,eAAe,EAJW;AAK1BC,EAAAA,cAAc,EAAC;AALW,CAAvB;AAQA,MAAMC,MAAM,GAAG;AAClBC,EAAAA,qBAAqB,EADH;AAElBC,EAAAA,eAAe,EAAE;AAFC,CAAf;AAKA,MAAMC,KAAK,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAAd;AAIA,MAAMC,0BAAwC,GAAG;AACpDC,EAAAA,EAAE,EADkD;AAEpDC,EAAAA,YAAY,EAFwC;AAGpDC,EAAAA,QAAQ,EAAEC,mEAAqBC;AAHqB,CAAjD;AAMA,MAAMC,wBAAwB,GAAG;AACpCC,EAAAA,IAAI,EADgC;AAEpCC,EAAAA,MAAM,EAAE;AAF4B,CAAjC;AAKA,MAAMC,yBAAuC,GAAG;AACnDR,EAAAA,EAAE,EADiD;AAEnDC,EAAAA,YAAY,EAFuC;AAGnDC,EAAAA,QAAQ,EAAEC,kEAAoBM;AAHqB,CAAhD;AAMA,MAAMC,8BAA8B,GAAG;AAC1CC,EAAAA,SAAS,EAAE;AAD+B,CAAvC;AAIA,MAAOC,0BAAwC,GAAG;AACrDZ,EAAAA,EAAE,EADmD;AAErDC,EAAAA,YAAY,EAFyC;AAGrDC,EAAAA,QAAQ,EAAEC,oEAAsBU;AAHqB,CAAlD;AAMA,MAAOC,+BAA+B,GAAG;AAC5CH,EAAAA,SAAS,EAAE;AADiC,CAAzC;AAIA,MAAMI,MAAM,GAAG;AAClBC,EAAAA,eAAe,EADG;AAElBxD,EAAAA,aAAa,EAAG;AAFE,CAAf;;;;;;;;;;;;;;;;;;;;;;;;AC5GP;AACA;AACA;AACA;AACA;AACA;AACA;AAcA,MAAMyD,MAAM,GAAGC,4CAAK,CAApB,wBAAoB,CAApB;AA6BO,4BAA2D;AAGrC,SAAXC,WAAW,GAA0B;AAC/C,QAAI,CAAEC,qBAAqB,CAA3B,WAAwC;AACpCA,MAAAA,qBAAqB,CAArBA,SAAAA,GAAkC,IAAlCA,qBAAkC,EAAlCA;AACH;;AACD,WAAOA,qBAAqB,CAA5B;AACH;;AAEOC,EAAAA,YAAY,GAA4B;AAC5CC,IAAAA,UAAU,EADkC;AAE5CC,IAAAA,QAAQ,EAFoC;AAG5CC,IAAAA,KAAK,EAHuC;AAI5CC,IAAAA,KAAK,EAJuC;AAK5CC,IAAAA,UAAU,EALkC;AAM5CC,IAAAA,mBAAmB,EANyB;AAO5CC,IAAAA,YAAY,EAPgC;AAQ5CC,IAAAA,oBAAoB,EARwB;AAS5CC,IAAAA,sBAAsB,EATsB;AAU5CC,IAAAA,gBAAgB,EAV4B;AAW5CC,IAAAA,eAAe,EAX6B;AAY5CC,IAAAA,iBAAiB,EAZ2B;AAa5CC,IAAAA,uBAAuB,EAbqB;AAc5CC,IAAAA,qBAAqB,EAAE;AAdqB,GAA5B;AAiBZC,EAAAA,YAAY,GAA4B;AAC5CzE,IAAAA,gBAAgB,EAD4B;AAE5CC,IAAAA,YAAY,EAFgC;AAG5CyE,IAAAA,QAAQ,EAHoC;AAI5CC,IAAAA,SAAS,EAJmC;AAK5CC,IAAAA,eAAe,EAL6B;AAM5CC,IAAAA,gBAAgB,EAN4B;AAO5CC,IAAAA,QAAQ,EAAE;AAPkC,GAA5B;AAUe,SAApBC,oBAAoB,GAAG;AAClCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,QAAQ,EAAE,CADN,UACM,CADN;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAD0B,GAAH;AAMI,SAAxBC,wBAAwB,GAAG;AACtCH,IAAAA,MAAM,EAAE;AACJC,MAAAA,QAAQ,EAAE,aADN,MACM,CADN;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAD8B,GAAH;AAOU,SAAlCE,kCAAkC;AACN,SAA5BC,4BAA4B;;AAInCC,EAAAA,WAAW,GAAG;AAClB,+BAA2B,8BAA3B,IAA2B,CAA3B;AACA,yBAAqB,wBAArB,IAAqB,CAArB;AACA,sCAAkC,qCAAlC,IAAkC,CAAlC;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AAEAC,IAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,wBAAAA,CAAoEhG,+DAApEgG,EAAAA,IAAAA;AACAA,IAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,wBAAAA,CAAoEhG,mEAApEgG,EAAAA,IAAAA;AACAA,IAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,wBAAAA,CAAoEhG,gEAApEgG,EAAAA,IAAAA;AAEH;;AAEMC,EAAAA,mBAAmB,cAA8B;AACpDlC,IAAAA,MAAM,CAANA,0BAAM,CAANA;AACAA,IAAAA,MAAM,CAANA,KAAM,CAANA;AACH;;AACSmC,EAAAA,yBAAyB,kBAA0B;AACzDnC,IAAAA,MAAM,CAAE,iCAAgCD,eAAxCC,EAAM,CAANA;AACA,QAAIoC,MAAM,GAAV;;AACA,QAAI,kBAAJ,kBAAwC;AACpC,UAAIC,UAAU,GAAG,6CAA8CC,IAAD,IAAUA,IAAI,CAAJA,IAAAA,KAAxE,eAAiB,CAAjB;;AACA,UAAID,UAAU,IAAd,GAAqB;AACjB,YAAI,+CAAJ,MAAyD;AACrDD,UAAAA,MAAM,GAAI,kCAAiC,+CAA+CG,IAA1FH,QAAAA;AACH;AAEJ;AACJ;;AACD;AACH;;AAESI,EAAAA,2BAA2B,kBAA0B;AAC3D,QAAIJ,MAAM,GAAV;;AACA,QAAI,kBAAJ,kBAAwC;AACpC,UAAIC,UAAU,GAAG,6CAA8CC,IAAD,IAAUA,IAAI,CAAJA,IAAAA,KAAxE,eAAiB,CAAjB;AACA,UAAID,UAAU,IAAd,GAAqBD,MAAM,GAAG,+CAATA,MAAAA;AACxB;;AACD;AACH;;AAESK,EAAAA,uBAAuB,cAAmB;AAChD,WAAO,iCAAiCC,WAAW,CAAnD,IAAO,CAAP;AACH;;AAESC,EAAAA,gBAAgB,QAAmB;AACzC,QAAIC,MAAM,GAAV;;AACA,QAAIC,KAAK,CAAT,aAAuB;AACnB,UAAIA,KAAK,CAALA,WAAAA,CAAAA,IAAAA,GAAAA,MAAAA,GAAJ,GAAyC;AACrCD,QAAAA,MAAM,IAANA,mDAAAA;AACH;AACJ;;AACDA,IAAAA,MAAM,IAAIzC,qBAAqB,CAArBA,WAAAA,GAAAA,yBAAAA,CAA8D0C,KAAK,CAA7ED,IAAUzC,CAAVyC;AAEA;AACH;;AAEME,EAAAA,aAAa,cAA8B;AAAG;AACjD9C,IAAAA,MAAM,CAANA,KAAM,CAANA;AACA,UAAM+C,KAAK,GAAGC,QAAQ,CAACC,6CAAM,GAANA,MAAAA,CAAvB,UAAuBA,CAAD,CAAtB;AACA,UAAMC,QAAQ,GAAGF,QAAQ,CAACC,6CAAM,CAACJ,KAAK,CAAZI,QAAM,CAANA,CAAAA,MAAAA,CAA1B,UAA0BA,CAAD,CAAzB;AACA,UAAME,cAAc,GAAGH,QAAQ,CAACC,6CAAM,CAACJ,KAAK,CAAZI,OAAM,CAANA,CAAAA,MAAAA,CAAhC,UAAgCA,CAAD,CAA/B;AACAjD,IAAAA,MAAM,CAAE,4BAA2BkD,QAAS,IAAGC,cAA/CnD,GAAM,CAANA;AAGA,UAAMvD,YAAY,GAAGwF,+DAAAA,GAAAA,eAAAA,GAAAA,cAAAA,CAA0DhG,+DAA1DgG,CAArB;AACA,QAAImB,OAAc,GAAlB;AACA3G,IAAAA,YAAY,CAAZA,OAAAA,CAAsBiG,WAAD,IAAsB;AACvC,UAAKA,WAAW,CAAXA,KAAAA,IAAD,QAACA,IAAmCA,WAAW,CAAXA,KAAAA,IAAxC,gBAA8E;AAC1E1C,QAAAA,MAAM,CAANA,mBAAM,CAANA;AACAA,QAAAA,MAAM,CAANA,WAAM,CAANA;AACA,YAAIqD,OAAO,GAAKH,QAAQ,IAAT,KAACA,IAAuB,CAACR,WAAW,CAAZ,KAAvBQ,IAA6C,CAACR,WAAW,CAHC,WAG1E,CAH0E,CAI1E;;AACA,cAAMY,IAAI,GAAGN,QAAQ,CAACN,WAAW,CALyC,IAKrD,CAArB,CAL0E,CAKjC;;AACzC,cAAMa,QAAQ,GAAGb,WAAW,CAN8C,QAM1E,CAN0E,CAMnC;;AAEvC,cAAMc,cAAc,GAAGC,IAAI,CAAJA,KAAAA,CAAWf,WAAW,CAAXA,IAAAA,GAAlC,KAAuBe,CAAvB;AACA,cAAMC,gBAAgB,GAAGD,IAAI,CAAJA,KAAAA,CAAW,CAACH,IAAI,GAAIE,cAAc,GAAvB,SAApC,GAAyBC,CAAzB;AACA,cAAME,mBAAmB,GAAGF,IAAI,CAAJA,KAAAA,CAAWF,QAAQ,GAA/C,EAA4BE,CAA5B;AAEA,YAAIG,YAAY,GAAhB;AACA,YAAIC,cAAc,GAAGH,gBAAgB,GAArC;;AAEA,YAAIG,cAAc,GAAlB,IAAyB;AACrBA,UAAAA,cAAc,IAAdA,EAAAA;AACAD,UAAAA,YAAY,IAFS,CAErBA,CAFqB,CAEF;AACtB;;AAED,YAAIE,UAAU,GAAI,GAAEF,YAApB;AACA,YAAIA,YAAY,GAAhB,IAAuBE,UAAU,GAAG,MAAbA,UAAAA;AACvB,YAAID,cAAc,GAAlB,IAAyBC,UAAU,IAAVA,GAAAA;AACzBA,QAAAA,UAAU,IAAK,GAAED,cAAjBC,EAAAA;AAEA,YAAI1B,MAAM,GAAG;AACTrD,UAAAA,EAAE,EAAE2D,WAAW,CADN;AAETqB,UAAAA,KAAK,EAAEd,6CAAM,CAAE,GAAEC,QAAS,GAAER,WAAW,CAACY,IAA3B,IAFJ,gBAEI,CAFJ;AAGTU,UAAAA,GAAG,EAAEf,6CAAM,CAAE,GAAEC,QAAS,GAAEY,UAAf,IAHF,cAGE,CAHF;AAITG,UAAAA,KAAK,EAAEvB,WAAW,CAJT;AAKTwB,UAAAA,WAAW,EAAExB,WAAW,CALf;AAMTyB,UAAAA,KAAK,EAAE,6BANE,WAMF,CANE;AAOTC,UAAAA,MAAM,EAPG;AAQTC,UAAAA,QAAQ,EARC;AASTC,UAAAA,QAAQ,EAAE5B,WAAW,CATZ;AAUT6B,UAAAA,SAAS,EAAE7B,WAAW,CAVb;AAWT8B,UAAAA,KAAK,EAAE9B,WAAW,CAXT;AAYT+B,UAAAA,WAAW,EAAE/B,WAAW,CAZf;AAaTgC,UAAAA,SAAS,EAAEhC,WAAW,CAbb;AAcTiC,UAAAA,OAAO,EAAEjC,WAAW,CAdX;AAeTkC,UAAAA,QAAQ,EAAElC,WAAW,CAfZ;AAgBTmC,UAAAA,WAAW,EAAEnC,WAAW,CAhBf;AAiBTJ,UAAAA,IAAI,EAAEI,WAAW,CAjBR;AAkBTlB,UAAAA,QAAQ,EAACkB,WAAW,CAAClB;AAlBZ,SAAb;AAqBA,qCAA6BkB,WAAW,CAAxC;AAEA1C,QAAAA,MAAM,CAANA,oBAAM,CAANA;AACAA,QAAAA,MAAM,CAANA,MAAM,CAANA;AACAoD,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,MAAAA;AACH;AApDL3G,KAAAA;AAwDAqI,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,OAAAA;AAGH;;AAEMC,EAAAA,0BAA0B,cAA8B;AAC3D/E,IAAAA,MAAM,CAANA,KAAM,CAANA;AAEH;;AAEMgF,EAAAA,qBAAqB,cAAiC;AACzDhF,IAAAA,MAAM,CAANA,KAAM,CAANA;AACA;AACH;;AAEMiF,EAAAA,oBAAoB,cAA8B;AACrDjF,IAAAA,MAAM,CAANA,KAAM,CAANA;AAEH;;AAEMkF,EAAAA,oBAAoB,cAA8B;AACrDlF,IAAAA,MAAM,CAANA,KAAM,CAANA;AAEH;;AAEMmF,EAAAA,oBAAoB,cAA8B;AAErDnF,IAAAA,MAAM,CAANA,KAAM,CAANA;AACH;;AAEMoF,EAAAA,oBAAoB,cAA8B;AAErDpF,IAAAA,MAAM,CAANA,KAAM,CAANA;AACH;;AAEMqF,EAAAA,gBAAgB,GAAG;AACtB;AACA;AACA,mCAA+BC,kEAAU,CAACC,QAAQ,CAARA,cAAAA,CAAwBpH,qEAAxBoH,CAAD,EAA0D;AAC/F5D,MAAAA,QAAQ,EAAE,CADqF,UACrF,CADqF;AAE/F6D,MAAAA,OAAO,EAFwF;AAG/FC,MAAAA,UAAU,EAHqF;AAI/FC,MAAAA,WAAW,EAAE,2CAJkF,KAIlF,CAJkF;AAK/FC,MAAAA,eAAe,EALgF;AAM/FC,MAAAA,QAAQ,EAAE,iBAA2B;AAAA;;AACjC,sDAAqB,CAArB,4HAAoE/C,KAAK,CAAzE;AACA1C,QAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,mBAAAA,CAAwD0C,KAAK,CAA7D1C,KAAAA,EAAAA,IAAAA;AACH;AAT8F,KAA1D,CAAzC;AAYA;;AACA,QAAI,kBAAJ,cAAoC;AAChCH,MAAAA,MAAM,CAANA,6BAAM,CAANA;AACA6F,MAAAA,OAAO,GAAG;AACNC,QAAAA,aAAa,EAAE,+BADT;AAENC,QAAAA,YAAY,EAAE,+BAFR;AAGNC,QAAAA,YAAY,EAAE,+BAHR;AAINC,QAAAA,UAAU,EAAE,+BAJN;AAKNC,QAAAA,YAAY,EAAE,+BALR;AAMNC,QAAAA,GAAG,EAAElD,6CAAM,GAANA,QAAAA,CAAkB,+BAAlBA,GAAAA,EANC,QAMDA,CANC;AAONtB,QAAAA,QAAQ,EAAE,+BAPJ;AAQNyE,QAAAA,YAAY,EAAE,+BARR;AASNC,QAAAA,IAAI,EAAE,+BATA;AAUNC,QAAAA,eAAe,EAAE,+BAVX;AAWNC,QAAAA,OAAO,EAAE,+BAA+BA;AAXlC,OAAVV;AAFJ,WAeO;AACH7F,MAAAA,MAAM,CAANA,8BAAM,CAANA;AACA6F,MAAAA,OAAO,GAAG;AACNC,QAAAA,aAAa,EADP;AAENC,QAAAA,YAAY,EAFN;AAGNC,QAAAA,YAAY,EAHN;AAINC,QAAAA,UAAU,EAJJ;AAKNC,QAAAA,YAAY,EALN;AAMNC,QAAAA,GAAG,EAAElD,6CAAM,GAANA,QAAAA,CAAAA,CAAAA,EANC,QAMDA,CANC;AAONtB,QAAAA,QAAQ,EAAE,CAPJ,UAOI,CAPJ;AAQNyE,QAAAA,YAAY,EARN;AASNC,QAAAA,IAAI,EAAE;AACFG,UAAAA,QAAQ,EAAE;AACNlE,YAAAA,IAAI,EADE;AAENmE,YAAAA,QAAQ,EAFF;AAGNC,YAAAA,MAAM,EAHA;AAINC,YAAAA,SAAS,EAJH;AAKNC,YAAAA,OAAO,EALD;AAMNC,YAAAA,YAAY,EANN;AAONC,YAAAA,aAAa,EAAE;AAPT;AADR,SATA;AAoBNR,QAAAA,eAAe,EApBT;AAqBNC,QAAAA,OAAO,EAAE,CAAC;AACNQ,UAAAA,SAAS,EAAE;AACPC,YAAAA,MAAM,EADC;AAEPC,YAAAA,QAAQ,EAAE;AAFH;AADL,SAAD,EAML;AACIlD,UAAAA,KAAK,EADT;AAEIC,UAAAA,GAAG,EAFP;AAGIC,UAAAA,KAAK,EAHT;AAII8C,UAAAA,SAAS,EAAE;AACPC,YAAAA,MAAM,EADC;AAEPC,YAAAA,QAAQ,EAAE;AAFH;AAJf,SANK;AArBH,OAAVpB;AAuCH;;AACDA,IAAAA,OAAO,CAAPA,oBAAAA,GAA+B,iBAA2B;AAAA;;AACtD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,mBAAAA,CAAwD0C,KAAK,CAA7D1C,IAAAA,EAAAA,IAAAA;AACA,qDAAqB,CAArB,8HAAoE0C,KAAK,CAAzE;AAFJgD,KAAAA;;AAIAA,IAAAA,OAAO,CAAPA,aAAAA,GAAwB,iBAA2B;AAC/C1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,aAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AADJ0F,KAAAA;;AAGAA,IAAAA,OAAO,CAAPA,cAAAA,GAAyB,iBAA2B;AAChD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,oBAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAFgD,KAEhDA,GAFgD,CAGhD;;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,GAA6D0C,KAAK,CAAlE1C,KAAAA;AACAH,MAAAA,MAAM,CAANA,gBAAM,CAANA;AACAA,MAAAA,MAAM,CAANA,KAAM,CAANA;AAEA,0BAAoB6C,KAAK,CAAzB;AARJgD,KAAAA;;AAUAA,IAAAA,OAAO,CAAPA,aAAAA,GAAwB,iBAA2B;AAC/C1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AADJ0F,KAAAA;;AAGAA,IAAAA,OAAO,CAAPA,cAAAA,GAAyB,iBAA2B;AAChD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,oBAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AAEA+G,MAAAA,gEAAQ,CAAC;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,YAAY;AAChB;AACAjH,YAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAmE0C,KAAK,CAAxE1C,KAAAA;AACA8B,YAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAA4D0C,KAAK,CAFrEZ,KAEI9B,CAFJ8B,EAAAA,KAAAA;AAJA;AASJoF,UAAAA,IAAI,EAAE;AATF,SADH;AAYLC,QAAAA,OAAO,EAAE;AAZJ,OAAD,CAARJ;AAHJrB,KAAAA;;AAkBAA,IAAAA,OAAO,CAAPA,iBAAAA,GAA4B,iBAA2B;AACnD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,oBAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AADJ0F,KAAAA;;AAGAA,IAAAA,OAAO,CAAPA,cAAAA,GAAyB,iBAA2B;AAChD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,oBAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AADJ0F,KAAAA;;AAGAA,IAAAA,OAAO,CAAPA,kBAAAA,GAA6B,iBAA2B;AACpD1F,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,0BAAAA,CAAAA,KAAAA,EAAAA,IAAAA;AADJ0F,KAAAA;;AAGAA,IAAAA,OAAO,CAAPA,YAAAA,GAAwB0B,IAAD,IAAe;AAClCC,MAAAA,OAAO,CAAPA,GAAAA,CAAYD,IAAI,CAAhBC,KAAAA;;AACA,UAAID,IAAI,CAAJA,KAAAA,CAAJ,UAAyB;AACrBpH,QAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,GAA4DsH,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBF,IAAI,CAAlFpH,KAA4DsH,CAA5DtH;AACAA,QAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,GAA6DoH,IAAI,CAAjEpH,KAAAA;;AAEA,YAAI,CAACA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAAL,SAAKA,EAAL,EAAyE;AACrEH,UAAAA,MAAM,CAANA,IAAM,CAANA;AACA;AACH;AACJ;AAVL6F,KAAAA;;AAYAA,IAAAA,OAAO,CAAPA,mBAAAA,GAA+B6B,IAAD,IAAc;AACxC1H,MAAAA,MAAM,CAANA,iBAAM,CAANA;AACAA,MAAAA,MAAM,CAANA,IAAM,CAANA;AACA,YAAM2H,KAAK,GAAGxH,qBAAqB,CAArBA,WAAAA,GAAAA,gBAAAA,CAAqDuH,IAAI,CAAvE,QAAcvH,CAAd;AACAH,MAAAA,MAAM,CAANA,kBAAM,CAANA;AACAA,MAAAA,MAAM,CAANA,KAAM,CAANA;AAEA,UAAI4C,MAAM,GAAG,qEAAqE8E,IAAI,CAAzE,yBAAmGA,IAAI,CAAvG,qFAEmBA,IAAI,CAFvB,4CAEoEA,IAAI,CAAJA,QAAAA,CAFpE,kBAGT;AAHS,+CAIgCA,IAAI,CAJpC,4DAK+BA,IAAI,CALnC,gBAKoDA,IAAI,CALxD,MAAb;;AAMA,UAAIC,KAAK,CAALA,IAAAA,GAAAA,MAAAA,GAAJ,GAA6B;AACzB/E,QAAAA,MAAM,IAAI,oDAAVA,qBAAAA;AADJ,aAGK;AACDA,QAAAA,MAAM,IAANA,cAAAA;AACH;;AACD;AAnBJiD,KAAAA;;AAuBA,mCAAiDN,QAAQ,CAARA,cAAAA,CAAjD,aAAiDA,CAAjD;AACA,4CAA6DA,QAAQ,CAARA,cAAAA,CAA7D,YAA6DA,CAA7D;AACA,6CAA4DA,QAAQ,CAARA,cAAAA,CAA5D,eAA4DA,CAA5D;AACA,qCAAoDA,QAAQ,CAARA,cAAAA,CAApD,cAAoDA,CAApD;AACA,+CAA8DA,QAAQ,CAARA,cAAAA,CAA9D,iBAA8DA,CAA9D;AACA,yCAAwDA,QAAQ,CAARA,cAAAA,CAAxD,WAAwDA,CAAxD;AACA,wCAAuDA,QAAQ,CAARA,cAAAA,CAAwBzF,2DAAxByF,CAAvD;AACA,0CAAyDA,QAAQ,CAARA,cAAAA,CAAwBzF,6DAAxByF,CAAzD,CAlKsB,CAqKtB;;AACA,8BAA0BhF,6DAAK,2BAA2B;AACtDiF,MAAAA,OAAO,EAD+C;AAEtDoC,MAAAA,cAAc,EAFwC;AAGtDC,MAAAA,UAAU,EAH4C;AAItDC,MAAAA,KAAK,EAJiD;AAKtDC,MAAAA,YAAY,EAL0C;AAMtDC,MAAAA,OAAO,EAAE,YAAY;AACjB,YAAI7H,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAJ,iBAAsE;AAClE;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAsEA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAtEA,SAAAA;AACA8B,UAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,mBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAA4DA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAFhE8B,SAEI9B,CAFJ8B,EAAAA,KAAAA;AAHJ,eAQO,IAAI9B,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAJ,kBAAuE;AAC1E;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAsEA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAtEA,QAAAA;AACA8B,UAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAA4DA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAFhE8B,SAEI9B,CAFJ8B,EAAAA,KAAAA;AAIH;AAtBiD;AAwBtDgG,MAAAA,UAAU,EAAE;AACRvG,QAAAA,MAAM,EAAE;AACJ8D,UAAAA,OAAO,EADH;AAEJ0C,UAAAA,KAAK,EAFD;AAGJL,UAAAA,UAAU,EAHN;AAIJjG,UAAAA,OAAO,EAAE;AAJL;AADA;AAxB0C,KAA3B,CAA/B;AAkCA,2DAAuD,cAAmB;AACtE;AACAzB,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAmEgI,EAAE,CAAFA,MAAAA,CAAnEhI,KAAAA;AAFJ;AAKA,qEAAiE,cAAmB;AAChF;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAAyEgI,EAAE,CAAFA,MAAAA,CAAzEhI,KAAAA;AA/MkB,KA6MtB,EA7MsB,CAkNtB;;AACA,8BAA0BmF,kEAAU,gBAAgB;AAChD3D,MAAAA,QAAQ,EAAE,CADsC,MACtC,CADsC;AAEhDyG,MAAAA,MAAM,EAF0C;AAGhDC,MAAAA,UAAU,EAHsC;AAIhDC,MAAAA,QAAQ,EAJwC;AAKhDC,MAAAA,eAAe,EALiC;AAMhD3G,MAAAA,OAAO,EANyC;AAOhD4G,MAAAA,UAAU,EAPsC;AAQhDC,MAAAA,OAAO,EARyC;AAShDR,MAAAA,UAAU,EAAE9H,qBAAqB,CATe;AAUhDyF,MAAAA,QAAQ,EAAE,gBAAqB;AAC3B,YAAI8C,IAAI,GAAGnB,IAAI,CADY,KAC3B,CAD2B,CAE3B;;AACApH,QAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAmEuI,IAAI,CAAvEvI,CAAuE,CAAvEA;AACAA,QAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,GAAAA,GAAiEuI,IAAI,CAArEvI,CAAqE,CAArEA;AACH;AAf+C,KAAhB,CAApC;AAmBA,6DAAyD,YAAY;AACjE;AACA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAsEA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAtEA,SAAAA;AACA8B,MAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,mBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAA4DA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAFhE8B,SAEI9B,CAFJ8B,EAAAA,KAAAA;AAKA9B,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,gBAAAA,GAAAA,KAAAA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAViE,KAUjEA,GAViE,CAYjE;;AACA,UAAIwI,YAAY,GAAGxI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAb8C,SAajE,CAbiE,CAejE;;AACA+G,MAAAA,gEAAQ,CAAC;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,YAAY;AAChB;AACAjH,YAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA;AACA8B,YAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,YAEI9B,CAFJ8B,EAAAA,KAAAA;AAJA;AASJoF,UAAAA,IAAI,EAAE;AATF,SADH;AAYLC,QAAAA,OAAO,EAAE;AAZJ,OAAD,CAARJ;AAhBJ;AAgCA,uEAAmE,YAAY;AAC3E;AACA;AACA,UAAI0B,aAAa,GAAGzI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAApB;AAEA,UAAI0I,YAAY,GAAGD,aAAa,CAAhC;AACA,UAAIE,YAAY,GAAGF,aAAa,CAAhC;AAEAA,MAAAA,aAAa,CAAbA,WAAAA,GAAAA,IAAAA;AACAA,MAAAA,aAAa,CAAbA,IAAAA,GAAqBzI,qBAAqB,CAA1CyI,kCAAAA;AACAA,MAAAA,aAAa,CAAbA,IAAAA,GAAqBzI,qBAAqB,CAA1CyI,kCAAAA;AACAA,MAAAA,aAAa,CAAbA,QAAAA,GAAAA,KAAAA;AACAA,MAAAA,aAAa,CAAbA,KAAAA,GAAsBzI,qBAAqB,CAArBA,WAAAA,GAAAA,2BAAAA,CAAgEA,qBAAqB,CAZhC,kCAYrDA,CAAtByI,CAZ2E,CAc3E;;AACAzI,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACA8B,MAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,aAEI9B,CAFJ8B,EAAAA,KAAAA;AAKA9B,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,gBAAAA,GAAAA,KAAAA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAtB2E,KAsB3EA,GAtB2E,CAyB3E;;AACA+G,MAAAA,gEAAQ,CAAC;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,YAAY;AAChBwB,YAAAA,aAAa,CAAbA,WAAAA,GAAAA,KAAAA;AACAA,YAAAA,aAAa,CAAbA,IAAAA,GAAAA,YAAAA;AACAA,YAAAA,aAAa,CAAbA,IAAAA,GAAAA,YAAAA;AACAA,YAAAA,aAAa,CAAbA,QAAAA,GAAAA,IAAAA;AACAA,YAAAA,aAAa,CAAbA,KAAAA,GAAsBzI,qBAAqB,CAArBA,WAAAA,GAAAA,2BAAAA,CALN,YAKMA,CAAtByI,CALgB,CAMhB;;AACAzI,YAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACA8B,YAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,aAEI9B,CAFJ8B,EAAAA,KAAAA;AATA;AAcJoF,UAAAA,IAAI,EAAE;AAdF,SADH;AAiBLC,QAAAA,OAAO,EAAE;AAjBJ,OAAD,CAARJ;AA1BJ;AA+CA,qEAAiE,YAAY;AACzE;AACA;AACA,UAAI0B,aAAa,GAAGzI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAApB;AAEAyI,MAAAA,aAAa,CAAbA,WAAAA,GAA4B3F,6CAAM,GAANA,MAAAA,CAL6C,QAK7CA,CAA5B2F,CALyE,CAOzE;;AACAzI,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACAqH,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,aAAAA;AACAvF,MAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,aAEI9B,CAFJ8B,EAAAA,KAAAA;AAKA9B,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,gBAAAA,GAAAA,KAAAA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAhByE,KAgBzEA,GAhByE,CAmBzE;;AACA+G,MAAAA,gEAAQ,CAAC;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,YAAY;AAChBwB,YAAAA,aAAa,CAAbA,WAAAA,GADgB,EAChBA,CADgB,CAEhB;;AACAzI,YAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACA8B,YAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,aAEI9B,CAFJ8B,EAAAA,KAAAA;AALA;AAUJoF,UAAAA,IAAI,EAAE;AAVF,SADH;AAaLC,QAAAA,OAAO,EAAE;AAbJ,OAAD,CAARJ;AApBJ;AAqCA,iEAA6D,YAAY;AACrE;AACA;AACA,UAAI0B,aAAa,GAAGzI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAApB;AAEAyI,MAAAA,aAAa,CAAbA,KAAAA,GAAAA,IAAAA;AACAA,MAAAA,aAAa,CAAbA,IAAAA,GAAqBzI,qBAAqB,CAA1CyI,4BAAAA;AACAA,MAAAA,aAAa,CAAbA,IAAAA,GAAqBzI,qBAAqB,CAA1CyI,4BAAAA;AACAA,MAAAA,aAAa,CAAbA,QAAAA,GAAAA,KAAAA;AACAA,MAAAA,aAAa,CAAbA,KAAAA,GAAsBzI,qBAAqB,CAArBA,WAAAA,GAAAA,2BAAAA,CAAgEA,qBAAqB,CATtC,4BAS/CA,CAAtByI,CATqE,CAWrE;;AACAzI,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACA8B,MAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,aAEI9B,CAFJ8B,EAAAA,KAAAA;AAKA9B,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,gBAAAA,GAAAA,KAAAA;AACAA,MAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAAAA,KAAAA;AA7WkB,KA0VtB,EA1VsB,CAgXtB;;AACA,iCAA6B4I,qEAAa,CAACxD,QAAQ,CAARA,cAAAA,CAAwBpH,oEAAxBoH,CAAD,EAA1C,OAA0C,CAA1C;AAEH;;AAEDyD,EAAAA,aAAa,mCAA8D,CAC1E;;AAEDC,EAAAA,eAAe,GAAW;AACtB;AACH;;AAEDC,EAAAA,YAAY,8BAAyD;AACjElJ,IAAAA,MAAM,CAAE,0BAAyBmJ,IAAjCnJ,EAAM,CAANA;;AAEA;AACI,WAAK/D,+DAAL;AAA+B;AAC3B,2CAAiCmN,QAAQ,CAAzC,CAAyC,CAAzC;;AACA,cAAI,kBAAJ,UAAgC;AAC5BpJ,YAAAA,MAAM,CAANA,4CAAM,CAANA;AAEA,kDAAsC;AAClC8F,cAAAA,aAAa,EAAE,+BADmB;AAElCC,cAAAA,YAAY,EAAE,+BAFoB;AAGlCC,cAAAA,YAAY,EAAE,+BAHoB;AAIlCC,cAAAA,UAAU,EAAE,+BAJsB;AAKlCC,cAAAA,YAAY,EAAE,+BALoB;AAMlCC,cAAAA,GAAG,EAAElD,6CAAM,GAANA,QAAAA,CAAkB,+BAAlBA,GAAAA,EAN6B,QAM7BA,CAN6B;AAOlCmD,cAAAA,YAAY,EAAE,+BAPoB;AAQlCC,cAAAA,IAAI,EAAE,+BAR4B;AASlCC,cAAAA,eAAe,EAAE,+BATiB;AAUlCC,cAAAA,OAAO,EAAE,+BAA+BA;AAVN,aAAtC;AAaA,+CAAmC;AAC/BiC,cAAAA,UAAU,EAAE,+BAA+BzC;AADZ,aAAnC;AAGH;;AACD;AACH;;AACD,WAAM9J,gEAAN;AAAkC;AAC9B,cAAIoN,QAAe,GAAnB;AAEAD,UAAAA,QAAQ,CAARA,OAAAA,CAAkBE,OAAD,IAAkB;AAC/BD,YAAAA,QAAQ,CAARA,IAAAA,CAAc;AAAChC,cAAAA,IAAI,EAAG,GAAEiC,OAAO,CAAPA,IAAAA,CAAaC,OAAQ,KAAID,OAAO,CAAPA,IAAAA,CAAaE,SAAhD;AAA6DC,cAAAA,KAAK,EAAEH,OAAO,CAACI;AAA5E,aAAdL;AAJ0B,WAG9BD,EAH8B,CAO9B;AACA;;AACAjJ,UAAAA,qBAAqB,CAArBA,qBAAAA,GAA8CiI,8DAAM,CAAC,MAAMtI,2DAAP,EAA6B;AAC7E6J,YAAAA,MAAM,EADuE;AAE7EjC,YAAAA,IAAI,EAFyE;AAG7E9B,YAAAA,QAAQ,EAAE,iBAA2B;AACjC;AACAgE,cAAAA,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,UAAO,CAAPA,CAAAA,KAAAA,GAA6E/G,KAAK,CAAlF+G,SAAAA;AAEAzJ,cAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAuE0C,KAAK,CAA5E1C,KAAAA;AACH;AAR4E,WAA7B,CAApDA;AAUA;AACH;;AACD,WAAMlE,mEAAN;AAAqC;AACjC;AAEA,cAAI4N,KAAY,GAAhB;AAEAT,UAAAA,QAAQ,CAARA,OAAAA,CAAkB9G,IAAD,IAAe;AAC5BuH,YAAAA,KAAK,CAALA,IAAAA,CAAWvH,IAAI,CAAfuH,IAAAA;AAN6B,WAKjCT,EALiC,CASjC;AACA;;AACA,sDAA4ChB,8DAAM,CAAC,MAAMtI,6DAAP,EAA+B;AAC7E4H,YAAAA,IAAI,EADyE;AAE7E9B,YAAAA,QAAQ,EAAE,iBAA2B;AAEjCgE,cAAAA,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,mBAAO,CAAPA,CAAAA,KAAAA,GAAsF/G,KAAK,CAA3F+G,SAAAA;AACAzJ,cAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA,IAAAA,GAAkE0C,KAAK,CAAvE1C,SAAAA;AACH;AAN4E,WAA/B,CAAlD;AAQA;AAEH;AAnEL;AAsEH;;AAED2J,EAAAA,qBAAqB,+BAA0D,CAC9E;;AAEDC,EAAAA,uBAAuB,iCAA4D,CAClF;;AAEDC,EAAAA,uBAAuB,+CAA+E,CACrG;;AAEOC,EAAAA,uBAAuB,QAAkB;AAC7C,QAAIlG,KAAK,GAAGf,QAAQ,CAACC,6CAAM,CAACJ,KAAK,CAAZI,KAAM,CAANA,CAAAA,MAAAA,CAArB,UAAqBA,CAAD,CAApB;AACA,QAAIK,IAAI,GAAGL,6CAAM,CAACJ,KAAK,CAAZI,KAAM,CAANA,CAAAA,MAAAA,CAAX,QAAWA,CAAX;AACA,QAAIM,QAAQ,GAAGN,6CAAM,CAACJ,KAAK,CAAZI,GAAM,CAANA,CAAAA,IAAAA,CAAuBA,6CAAM,CAACJ,KAAK,CAAnCI,KAA6B,CAA7BA,EAAf,SAAeA,CAAf;AAGA,QAAIP,WAAW,GAAG;AACdgH,MAAAA,GAAG,EAAE7G,KAAK,CADI;AAEdsG,MAAAA,IAAI,EAAEtG,KAAK,CAFG;AAGdqH,MAAAA,IAAI,EAAErH,KAAK,CAHG;AAIdkB,MAAAA,KAAK,EAJS;AAKdT,MAAAA,IAAI,EALU;AAMdC,MAAAA,QAAQ,EANM;AAOd4G,MAAAA,QAAQ,EAAEtH,KAAK,CAPD;AAQd2B,MAAAA,KAAK,EAAE3B,KAAK,CARE;AASd4B,MAAAA,WAAW,EAAE5B,KAAK,CATJ;AAUd6B,MAAAA,SAAS,EAAE7B,KAAK,CAVF;AAWd8B,MAAAA,OAAO,EAAE9B,KAAK,CAXA;AAYd+B,MAAAA,QAAQ,EAAE/B,KAAK,CAZD;AAadgC,MAAAA,WAAW,EAAEhC,KAAK,CAbJ;AAcdP,MAAAA,IAAI,EAAEO,KAAK,CAdG;AAedrB,MAAAA,QAAQ,EAAEqB,KAAK,CAACrB;AAfF,KAAlB;AAiBA;AACH;;AAEO4I,EAAAA,cAAc,MAAmB;AACrC;AACA;AACA;AACA;AACA,2DALqC,MAKrC,CALqC,CAMrC;;AACA;AACA;AAEA;AACA,yCAXqC,KAWrC,CAXqC,CAarC;;AACA,uCAAmC;AAC/BC,MAAAA,UAAU,EADqB;AAE/BC,MAAAA,OAAO,EAAE,WAEL;AACIjD,QAAAA,IAAI,EADR;AAEIkD,QAAAA,OAAO,EAFX;AAGIC,QAAAA,OAAO,EAAE,YAAY;AACjB,cAAI9B,IAAI,GAAGvI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CADM,MACNA,EAAX,CADiB,CAEjB;;AACA,cAAIsK,MAAM,GAAGtK,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAHI,EAGjB,CAHiB,CAIjB;;AACA,cAAIuK,aAAa,GAAGC,gDALH,EAKjB,CALiB,CAMjB;AACA;;AACA,cAAIC,MAAM,GAAGzK,qBAAqB,CAArBA,WAAAA,GAAAA,2BAAAA,CAAgE0K,WAAW,CAAXA,OAAAA,CAAoB1K,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAApB0K,mBAAAA,EAA7E,KAAa1K,CAAb;AAEA,cAAI2K,SAAS,GAAG9H,QAAQ,CAACC,6CAAM,GAANA,MAAAA,CAVR,gBAUQA,CAAD,CAAxB,CAViB,CAYjB;;AACA,cAAI8H,YAAY,GAAG;AACfhM,YAAAA,EAAE,EADa;AAEfkF,YAAAA,KAAK,EAAE2F,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,UAAO,CAAPA,CAFQ;AAGf1F,YAAAA,WAAW,EAAE0F,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,mBAAO,CAAPA,CAHE;AAIfxF,YAAAA,MAAM,EAJS;AAKfL,YAAAA,KAAK,EAAE2E,IAAI,CALI,CAKJ,CALI;AAMf1E,YAAAA,GAAG,EAAE0E,IAAI,CANM,CAMN,CANM;AAOfsC,YAAAA,IAAI,EAPW;AAQf7G,YAAAA,KAAK,EARU;AASfI,YAAAA,SAAS,EAAEpE,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CATI;AAUfkE,YAAAA,QAAQ,EAVO;AAWfC,YAAAA,QAAQ,EAAEnE,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAXK;AAYfqE,YAAAA,KAAK,EAZU;AAafC,YAAAA,WAAW,EAbI;AAcfC,YAAAA,SAAS,EAAEuG,yEAAAA,GAdI,mBAcJA,EAdI;AAeftG,YAAAA,OAAO,EAfQ;AAgBfC,YAAAA,QAAQ,EAhBO;AAiBfC,YAAAA,WAAW,EAjBI;AAkBfvC,YAAAA,IAAI,EAAEnC,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAlBS;AAmBfqB,YAAAA,QAAQ,EAAErB,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAiDqB;AAnB5C,WAAnB;AAqBAxB,UAAAA,MAAM,CAANA,WAAM,CAANA;AACAA,UAAAA,MAAM,CAnCW,YAmCX,CAANA,CAnCiB,CAqCjB;;AACAG,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAsE,CAAtEA,MAAsE,CAAtEA;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA;AACA8B,UAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CACIhG,+DADJgG,EAEI9B,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA,CAFJ8B,YAEI9B,CAFJ8B,EAxCiB,KAwCjBA,EAxCiB,CA4CjB;;AACA9B,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,eAAAA,GA7CiB,KA6CjBA,CA7CiB,CA+CjB;AACA;;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAmE4K,YAAY,CAjD9D,KAiDjB5K,EAjDiB,CAmDjB;;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAAAA,KAAAA;AAvDR;AAyDI+K,QAAAA,QAAQ,EAAE;AAzDd,OAFK;AAFsB,KAAnC,EAdqC,CAgFrC;AACA;;AACAL,IAAAA,WAAW,CAAXA,OAAAA,CAAoB,kBAApBA,UAAAA,EAAAA,KAAAA,GAA0D,4BAlFrB,KAkFrCA,CAlFqC,CAmFrC;;AACAA,IAAAA,WAAW,CAAXA,OAAAA,CAAoB,kBAApBA,mBAAAA,EAAAA,KAAAA,GAAAA,EAAAA;AAEA,mCAA+B,CAAC,4BAAD,OAAoC,4BAAnE,GAA+B,CAA/B;AACA,uCAAmC;AAC/BlJ,MAAAA,QAAQ,EAAE,qCAAqC,CAArC,MAAqC,CAArC,GAAgD,CAD3B,UAC2B,CAD3B;AAE/BsG,MAAAA,UAAU,EAAE,qCAAqC9H,qBAAqB,CAA1D,uBAAkFA,qBAAqB,CAAC0B;AAFrF,KAAnC,EAvFqC,CA2FrC;;AACA,uCAAmC;AAACsJ,MAAAA,MAAM,EAAEC;AAAT,KAAnC;AAEA;AACH;;AAEOC,EAAAA,eAAe,OAAY;AAC/B,QAAIlD,EAAE,GAAGZ,IAAI,CAAb;AAEAC,IAAAA,OAAO,CAAPA,GAAAA,CAAYW,EAAE,CAHiB,SAG/BX,EAH+B,CAK/B;;AACA;AACA;AACA;AACA,uDAT+B,OAS/B,CAT+B,CAU/B;;AACA;AACA;AAGA;AACA,yCAhB+B,IAgB/B,CAhB+B,CAkB/B;;AACA,uCAAmC;AAC/B6C,MAAAA,UAAU,EADqB;AAE/BC,MAAAA,OAAO,EAAE,WAEL;AACIjD,QAAAA,IAAI,EADR;AAEIkD,QAAAA,OAAO,EAFX;AAGIC,QAAAA,OAAO,EAAE,YAAY;AACjB,cAAI9B,IAAI,GAAGvI,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CADM,MACNA,EAAX,CADiB,CAEjB;;AACA,cAAI2K,SAAS,GAAG9H,QAAQ,CAACC,6CAAM,GAANA,MAAAA,CAHR,gBAGQA,CAAD,CAAxB,CAHiB,CAIjB;;AACA,cAAI8H,YAAY,GAAG;AACfhM,YAAAA,EAAE,EAAEoJ,EAAE,CADS;AAEflE,YAAAA,KAAK,EAAE2F,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,UAAO,CAAPA,CAFQ;AAGf1F,YAAAA,WAAW,EAAE0F,+DAAO,CAACzJ,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAARyJ,mBAAO,CAAPA,CAHE;AAIfxF,YAAAA,MAAM,EAJS;AAKfL,YAAAA,KAAK,EAAE2E,IAAI,CALI,CAKJ,CALI;AAMf1E,YAAAA,GAAG,EAAE0E,IAAI,CANM,CAMN,CANM;AAOfsC,YAAAA,IAAI,EAPW;AAQf7G,YAAAA,KAAK,EAAEgE,EAAE,CARM;AASf5D,YAAAA,SAAS,EAAE4D,EAAE,CATE;AAUf9D,YAAAA,QAAQ,EAVO;AAWfC,YAAAA,QAAQ,EAAE6D,EAAE,CAXG;AAYf3D,YAAAA,KAAK,EAZU;AAafC,YAAAA,WAAW,EAbI;AAcfC,YAAAA,SAAS,EAAEuG,yEAAAA,GAdI,mBAcJA,EAdI;AAeftG,YAAAA,OAAO,EAAEwD,EAAE,CAfI;AAgBfvD,YAAAA,QAAQ,EAhBO;AAiBfC,YAAAA,WAAW,EAjBI;AAkBfvC,YAAAA,IAAI,EAAE6F,EAAE,CAlBO;AAmBf3G,YAAAA,QAAQ,EAAE2G,EAAE,CAAC3G;AAnBE,WAAnB;AAqBAxB,UAAAA,MAAM,CAANA,SAAM,CAANA;AACAA,UAAAA,MAAM,CAANA,YAAM,CAANA;AACAG,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CA5BiB,YA4BjBA,EA5BiB,CA8BjB;AACA;;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAmEuI,IAAI,CAAvEvI,CAAuE,CAAvEA;AAEAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,gBAAAA,GAAAA,KAAAA;AACAA,UAAAA,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA,CAAAA,KAAAA,CAAAA,KAAAA;AAtCR;AAwCI+K,QAAAA,QAAQ,EAAE;AAxCd,OAFK;AAFsB,KAAnC,EAnB+B,CAoE/B;AACA;;AACAL,IAAAA,WAAW,CAAXA,OAAAA,CAAoB,kBAApBA,UAAAA,EAAAA,KAAAA,GAA0D1C,EAAE,CAAFA,KAAAA,IAtE3B,EAsE/B0C,CAtE+B,CAuE/B;;AACAA,IAAAA,WAAW,CAAXA,OAAAA,CAAoB,kBAApBA,mBAAAA,EAAAA,KAAAA,GAAmE1C,EAAE,CAAFA,WAAAA,IAAnE0C,EAAAA;AACA,mCAA+B,CAAC1C,EAAE,CAAH,OAAWA,EAAE,CAzEb,GAyEA,CAA/B,EAzE+B,CA2E/B;;AACA,uCAAmC;AAC/BxG,MAAAA,QAAQ,EAAEwG,EAAE,CAAFA,MAAAA,GAAY,CAAZA,MAAY,CAAZA,GAAuB,CADF,UACE,CADF;AAE/BF,MAAAA,UAAU,EAAEE,EAAE,CAAFA,MAAAA,GAAYhI,qBAAqB,CAAjCgI,oBAAAA,GAAyDhI,qBAAqB,CAAC0B;AAF5D,KAAnC,EA5E+B,CAiF/B;;AACA,uCAAmC;AAACsJ,MAAAA,MAAM,EAAE5D,IAAI,CAAJA,QAAAA,CAAc+D;AAAvB,KAAnC;AACA;AACH;;AAv3B6D;;;;;;;;;;;;;;;;;;;;;;ACjDlE;AACA;AACA;AACA;AACA;AACA;AAoBA,MAAMC,OAAO,GAAGtL,4CAAK,CAArB,eAAqB,CAArB;AACA,MAAMuL,aAAa,GAAGvL,4CAAK,CAA3B,sBAA2B,CAA3B;AAEe,iBAAoE;AAK/E;AAGQ+B,EAAAA,WAAW,GAAG,CACrB;;AAEwB,SAAX9B,WAAW,GAAe;AACpC,QAAI,CAAE+B,UAAU,CAAhB,WAA6B;AACzBA,MAAAA,UAAU,CAAVA,SAAAA,GAAuB,IAAvBA,UAAuB,EAAvBA;AACH;;AACD,WAAOA,UAAU,CAAjB;AACH;;AAEDwJ,EAAAA,oBAAoB,qCAA+C;AAC/D;AACA,6BAF+D,iBAE/D,CAF+D,CAG/D;;AACA,QAAIC,MAAM,GAAGC,6EAAAA,EAAb;AACAD,IAAAA,MAAM,CAANA,UAAAA,CAAkB,CACd;AACIE,MAAAA,SAAS,EAAE3P,wDADf;AAEI4P,MAAAA,SAAS,EAFb;AAGIC,MAAAA,GAAG,EAAElP,uDAHT;AAIImP,MAAAA,QAAQ,EAAE;AAJd,KADc,EAOd;AACIH,MAAAA,SAAS,EAAE3P,+DADf;AAEI4P,MAAAA,SAAS,EAFb;AAGIC,MAAAA,GAAG,EAAElP,8DAHT;AAIImP,MAAAA,QAAQ,EAAE;AAJd,KAPc,CAAlBL;AAcA,QAAIM,IAAI,GAAGC,gFAAAA,EAAX;AACAD,IAAAA,IAAI,CAAJA,UAAAA,CAAgB,CACZ;AACIJ,MAAAA,SAAS,EAAE3P,gEADf;AAEI4P,MAAAA,SAAS,EAFb;AAGIK,MAAAA,MAAM,EAAEtP,yDAHZ;AAIIuP,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAJV;AAWI9E,MAAAA,IAAI,EAAE;AACF0E,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAXV;AAkBIT,MAAAA,QAAQ,EAlBZ;AAmBIU,MAAAA,OAAO,EAAE;AAnBb,KADY,EAsBZ;AACIb,MAAAA,SAAS,EAAE3P,+DADf;AAEI4P,MAAAA,SAAS,EAFb;AAGIK,MAAAA,MAAM,EAAEtP,yDAHZ;AAIIuP,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAJV;AAWI9E,MAAAA,IAAI,EAAE;AACF0E,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAXV;AAkBIT,MAAAA,QAAQ,EAlBZ;AAmBIU,MAAAA,OAAO,EAAE;AAnBb,KAtBY,EA2CZ;AACIb,MAAAA,SAAS,EAAE3P,mEADf;AAEI4P,MAAAA,SAAS,EAFb;AAGIK,MAAAA,MAAM,EAAEtP,yDAHZ;AAIIuP,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAJV;AAWI9E,MAAAA,IAAI,EAAE;AACF0E,QAAAA,OAAO,EADL;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAXV;AAkBIT,MAAAA,QAAQ,EAlBZ;AAmBIU,MAAAA,OAAO,EAAE;AAnBb,KA3CY,CAAhBT;AAmEA,QAAIU,WAAW,GAAG,wEAAlB,2DAAkB,CAAlB;AACA,QAAIC,QAAQ,GAAG,2EAAf,2DAAe,CAAf;AAEA,QAAIC,SAAS,GAAG,gGAAhB,2DAAgB,CAAhB;AACA,QAAIC,OAAO,GAAG,8FAAd,2DAAc,CAAd;AAEAH,IAAAA,WAAW,CAAXA,eAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAAAA,KAAAA;AACAA,IAAAA,WAAW,CAAXA,eAAAA,CAAAA,SAAAA,EAAuC,CAACzQ,qEAAD,EAAiCA,+DAAjC,EAA0DA,gEAA1D,EAAoFA,wEAApF,CAAvCyQ,EAAAA,KAAAA;AACAA,IAAAA,WAAW,CAAXA,eAAAA,CAAAA,OAAAA,EAAqC,CAACzQ,qEAAD,EAAiCA,wDAAjC,EAAmDA,+DAAnD,CAArCyQ,EAAAA,KAAAA;AACA,wBAhG+D,WAgG/D,CAhG+D,CAkG/D;;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,mCAA+B,kCAA/B,IAA+B,CAA/B;AACA,mCAA+B,kCAtGgC,IAsGhC,CAA/B,CAtG+D,CAwG/D;;AACA;AAEA;AACH;AAED;AACJ;AACA;;;AACWrH,EAAAA,gBAAgB,GAAS;AAC5BkG,IAAAA,OAAO,CADqB,yBACrB,CAAPA,CAD4B,CAE5B;;AACA,QAAIuB,oBAAoB,GAAG,IAA3B,+DAA2B,EAA3B;AACAC,IAAAA,uEAAAA,GAAAA,WAAAA,CAJ4B,oBAI5BA,EAJ4B,CAM5B;;AACAxB,IAAAA,OAAO,CAAE,mCAAkC,wBAAyB,KAAI,0BAAxEA,EAAO,CAAPA;;AACA,QAAI,yCAAJ,GAAgD;AAC5C;AACA,UAAIyB,WAAW,GAAGC,qEAAAA,EAAlB,CAF4C,CAEC;AAE7C;;AACAC,MAAAA,gFAAAA;AACAF,MAAAA,WAAW,CAAXA,cAAAA,CAA2B,KANiB,mBAMjB,EAA3BA,EAN4C,CAQ5C;;AACAA,MAAAA,WAAW,CAAXA,sBAAAA,CAAmC,KAAnCA,eAAAA;AAEAA,MAAAA,WAAW,CAXiC,KAW5CA,GAX4C,CAa5C;;AACA,4CAAsC/Q,wDAAtC;AACA,4CAAsCA,mEAAtC;AACA,4CAAsCA,+DAAtC;AACA,4CAAsCA,gEAAtC;AACA,4CAAsCA,+DAAtC,EAlB4C,CAoB5C;;AACAkR,MAAAA,yEAAAA,GAAAA,mBAAAA;AACH;AAEJ;;AAEMC,EAAAA,eAAe,GAAiB;AACnC,WAAO,KAAP;AACH;;AAEMnE,EAAAA,eAAe,GAAW;AAC7B;AACH;;AAEMoE,EAAAA,UAAU,GAAY;AACzB,QAAIA,UAAU,GAAd;;AACA,QAAI;AACA;AACA,wBAAkB;AACdA,QAAAA,UAAU,GAAVA,IAAAA;AACH;AAJL,MAKE,cAAc,CACf;;AACD;AACH;;AAEMC,EAAAA,iBAAiB,GAAW;AAC/B,QAAIlL,MAAM,GAAV;;AACA,QAAI;AACA;AACA,wBAAkB;AACd;AACAA,QAAAA,MAAM,GAAGmL,YAAY,CAArBnL,GAAAA;AACH;AALL,MAME,cAAc,CACf;;AACDoJ,IAAAA,aAAa,CAAE,wBAAuBpJ,MAAtCoJ,EAAa,CAAbA;AACA;AACH;;AAEMgC,EAAAA,mBAAmB,GAAW;AACjC,QAAIpL,MAAM,GAAV;;AACA,QAAI;AACA;AACA,wBAAkB;AACd;AACAA,QAAAA,MAAM,GAAGmL,YAAY,CAArBnL,QAAAA;AACH;AALL,MAME,cAAc,CACf;;AACDoJ,IAAAA,aAAa,CAAE,qBAAoBpJ,MAAnCoJ,EAAa,CAAbA;AACA;AACH;;AAEMiC,EAAAA,aAAa,UAAwB;AACxClC,IAAAA,OAAO,CAAPA,OAAO,CAAPA;AACH;;AAEMmC,EAAAA,cAAc,GAAW;AAC5B,WAAO,KAAP,iBAAO,EAAP;AACH;;AAED5D,EAAAA,qBAAqB,+BAA0D,CAC9E;;AAEDC,EAAAA,uBAAuB,iCAA4D,CAClF;;AAEDC,EAAAA,uBAAuB,+CAA+E,CACrG;;AAEDd,EAAAA,YAAY,4BAAiD,CAC5D;;AAEDyE,EAAAA,cAAc,WAA0B;AACpC;AACH;;AAEDtB,EAAAA,MAAM,gCAAyE;AAC3E;AACI,WAAKpQ,gEAAL;AAAgC;AAC5BsP,UAAAA,OAAO,CAAPA,mCAAO,CAAPA;AACAC,UAAAA,aAAa,CAAbA,OAAa,CAAbA;AACA;AACA;AACH;AANL;AAQH;;AAEDoC,EAAAA,MAAM,gCAAyE;AAC3E;AACI,WAAK3R,gEAAL;AAAgC;AAC5BsP,UAAAA,OAAO,CAAPA,6EAAO,CAAPA;AACAC,UAAAA,aAAa,CAAbA,OAAa,CAAbA;AACA;AACH;AALL;AAOH;;AAEDe,EAAAA,MAAM,gCAAyE;AAC3E;AACI,WAAKtQ,gEAAL;AAAgC;AAC5BsP,UAAAA,OAAO,CAAPA,+BAAO,CAAPA;AACAC,UAAAA,aAAa,CAAbA,OAAa,CAAbA;AACA;AACA;AACH;AANL;AAQH;;AAEDqC,EAAAA,2BAA2B,eAA0B;AACjD,QAAIC,cAAc,GAAG,EAAC,GAAGC;AAAJ,KAArB;AACAD,IAAAA,cAAc,CAAdA,GAAAA,GAAqBnD,gDAF4B,EAEjDmD,CAFiD,CAEtB;;AAC3B;AACH;;AAEDE,EAAAA,mCAAmC,UAAqB;AACpD,QAAIC,OAAO,CAAX,WAAuB;AACnBA,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,OAAAA,CAA2BC,QAAD,IAAmB;AACzC;AADJD,OAAAA;AAGH;AACJ;;AAEOE,EAAAA,0BAA0B,GAAG;AACjC;AACA,QAAIC,sBAA4C,GAAGC,kFAAAA,GAAAA,aAAAA,CAAqDpS,gEAArDoS,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAnD,KAAmDA,CAAnD;AACAC,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAiHC,4DAAjHD,EAAAA,IAAAA,EAAAA,eAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAiHC,qEAAjHD,EAAAA,IAAAA,EAAAA,2BAAAA,EACI,wEAA0B,CACtB;AAACnF,MAAAA,IAAI,EAAL;AAAiBM,MAAAA,KAAK,EAAE;AAAxB,KADsB,EAEtB;AAACN,MAAAA,IAAI,EAAL;AAAmBM,MAAAA,KAAK,EAAE;AAA1B,KAFsB,CAA1B,CADJ6E;AAKAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,UAAAA,EAAAA,UAAAA,EAAyHC,gEAAzHD,EAAAA,IAAAA,EAAAA,eAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAiHC,+DAAjHD,EAAAA,KAAAA,EAAAA,gBAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,MAAAA,EAAAA,aAAAA,EAAwHC,+DAAxHD,EAAAA,KAAAA,EAAAA,gBAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAqHC,6DAArHD,EAAAA,KAAAA,EAAAA,aAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,sBAAAA,EAAAA,UAAAA,EAAAA,UAAAA,EAAyHC,6DAAzHD,EAAAA,KAAAA,EAAAA,oBAAAA;AAEA/C,IAAAA,OAAO,CAAPA,sCAAO,CAAPA;AACAA,IAAAA,OAAO,CAAPA,sBAAO,CAAPA;AACAC,IAAAA,aAAa,CAAC6C,kFAAAA,GAAAA,cAAAA,CAAd7C,cAAc6C,CAAD,CAAb7C;AAEA,QAAIgD,iBAAuC,GAAGH,kFAAAA,GAAAA,aAAAA,CAAqDpS,2DAArDoS,EAAAA,SAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAA9C,KAA8CA,CAA9C;AACAC,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAA4GC,4DAA5GD,EAAAA,KAAAA,EAAAA,yBAAAA;AACAA,IAAAA,sFAAAA,GAAAA,6BAAAA,CAAAA,iBAAAA,EAAAA,WAAAA,EAAAA,WAAAA,EAAsHC,+DAAtHD,EAAAA,IAAAA,EAAAA,4BAAAA;AACA,QAAIG,wBAAyC,GAAGH,sFAAAA,GAAAA,6BAAAA,CAAAA,iBAAAA,EAAAA,WAAAA,EAAAA,WAAAA,EAAsHC,kEAAtHD,EAAAA,IAAAA,EAAhD,2BAAgDA,CAAhD;AACAG,IAAAA,wBAAwB,CAAxBA,MAAAA,GAAkCC,gEAAlCD;AACAA,IAAAA,wBAAwB,CAAxBA,wBAAAA,GAAoDL,sBAAsB,CAA1EK,EAAAA;AAEAlD,IAAAA,OAAO,CAAPA,gCAAO,CAAPA;AACAA,IAAAA,OAAO,CAAPA,iBAAO,CAAPA;AACAC,IAAAA,aAAa,CAAC6C,kFAAAA,GAAAA,cAAAA,CAAd7C,SAAc6C,CAAD,CAAb7C;AAGH;AAED;AACJ;AACA;AACA;AACA;;;AACYmD,EAAAA,eAAe,GAAW;AAC9B,QAAIvM,MAAM,GADoB,EAC9B,CAD8B,CAE9B;;AACA,QAAKwM,MAAM,CAAP,GAACA,IAAgBA,MAAM,CAANA,GAAAA,CAArB,WAA4C;AACxC;AACAxM,MAAAA,MAAM,GAAGwM,MAAM,CAANA,GAAAA,CAATxM,SAAAA;AACH;;AACD;AACH;;AAED4G,EAAAA,aAAa,mCAA8D,CAC1E;;AA5U8E;;;;;;;;;;;;;;;;;;AC1B5E,8BAAiD;AACpD,SAAQ6F,KAAK,CAALA,EAAAA,KAAaC,KAAK,CAA1B;AACH;AAEM,mCAAsD;AACzD,SAAQD,KAAK,CAALA,GAAAA,KAAcC,KAAK,CAA3B;AACH;AAGM,sCAAyD;AAC5D,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;AAEM,kCAAqD;AACxD,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;;;;;;;;;;;;;;;;;;;;ACfD;AAGA;AAEA;AACA;AAEA,MAAMC,QAAQ,GAAG9O,4CAAK,CAAtB,iBAAsB,CAAtB;AAEe,6BAAuD;AAE3D+B,EAAAA,WAAW,GAAG,CACpB;;AAEMgN,EAAAA,8BAA8B,UAAe;AAChDD,IAAAA,QAAQ,CAAE,wBAAuBzH,OAAO,CAAChF,IAAK,mBAAkBgF,OAAO,CAACsE,SAAU,iBAAgBtE,OAAO,CAAC2H,IAA1GF,EAAQ,CAARA;AACA,UAAMG,UAAU,GAAG,oGAA2DjT,wDAA3D,EAA8E;AAACyN,MAAAA,GAAG,EAAEpC,OAAO,CAAC2H;AAAd,KAA9E,CAAnB;AACA,QAAIE,QAAQ,GAAZ;;AACA,oBAAgB;AACZA,MAAAA,QAAQ,GAAGD,UAAU,CAArBC,QAAAA;AACH;;AACDJ,IAAAA,QAAQ,CAAE,wBAAuBzH,OAAO,CAAChF,IAAK,mBAAkBgF,OAAO,CAACsE,SAAU,iBAAgBuD,QAAlGJ,EAAQ,CAARA;AAEA,QAAIK,QAAQ,GAAG9H,OAAO,CAAtB;AACAyH,IAAAA,QAAQ,CAVwC,QAUxC,CAARA,CAVgD,CAWhD;;AACA,QAAI;AACA,cAAQzH,OAAO,CAAf;AACI,aAAK+H,mEAAL;AAA4B;AACxB,oBAAQ/H,OAAO,CAAf;AACI,mBAAKrL,wDAAL;AAAwB;AACpBgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6DhG,wDAA7DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACAqN,kBAAAA,6EAAAA,GAAAA,IAAAA,CAAuCF,QAAQ,CAA/CE,QAAAA,EAA2D,GAAEF,QAAQ,CAACD,QAAtEG,uBAAAA,EAAuGC,mEAAvGD;AACA;AACH;;AACD,mBAAKrT,+DAAL;AAA+B;AAC3BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6DhG,+DAA7DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;;AACD,mBAAKhG,mEAAL;AAAmC;AAC/BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6DhG,mEAA7DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;AAbL;;AAeA;AACH;;AACD,aAAKoN,mEAAL;AAA4B;AACxB,oBAAQ/H,OAAO,CAAf;AACI,mBAAKrL,mEAAL;AAAmC;AAC/BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6DhG,mEAA7DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;;AACD,mBAAKhG,+DAAL;AAA+B;AAC3BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6DhG,+DAA7DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;AARL;;AAUA;AACH;;AACD,aAAKoN,sEAAL;AAA4B;AACxB,oBAAQ/H,OAAO,CAAf;AACI,mBAAKrL,mEAAL;AAAmC;AAC/BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,mBAAAA,CAA+DhG,mEAA/DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;;AACD,mBAAKhG,+DAAL;AAA+B;AAC3BgG,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,mBAAAA,CAA+DhG,+DAA/DgG,EAAAA,QAAAA,EAAAA,IAAAA;AACA;AACH;AARL;;AAUA;AACH;AA5CL;AADJ,MA+CE,YAAY;AACV8M,MAAAA,QAAQ,CAARA,GAAQ,CAARA;AACH;AAEJ;;AAEDtB,EAAAA,aAAa,UAAwB;AACjCsB,IAAAA,QAAQ,CAAE,qBAAoBzH,OAA9ByH,EAAQ,CAARA;AACH;;AAEDrB,EAAAA,cAAc,GAAW;AACrB,WAAOzL,+DAAAA,GAAP,iBAAOA,EAAP;AACH;;AA5EiE;;;;;;;;;;;;;;;;;;;;;;;;ACZtE;AACA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAOA;AAOA,MAAMjC,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;AAEe,MAAM6P,GAAN,SAAkBN,4CAAlB,CAAwE;AAEnF;AAEA;AAEA;AAGQQ,EAAAA,MAAM,GAA0B,IAA1B;AACNC,EAAAA,kBAAkB,GAA6B,IAA7B;;AAInBjO,EAAAA,WAAW,GAAG;AACjB;AACA,YAFiB,CAGjB;;AACA,SAAKkO,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKxC,cAAL,GAAsB,KAAKA,cAAL,CAAoBwC,IAApB,CAAyB,IAAzB,CAAtB;AAEAlO,IAAAA,mEAAA,GAAyBwJ,oBAAzB,CAA8C,IAA9C,EAAoDmD,MAAM,CAACwB,YAA3D;AACH;;AAEDC,EAAAA,MAAM,GAAc;AAChBrQ,IAAAA,MAAM,CAAC,eAAD,CAAN;AACA,wBACI,6DADJ;AAGH;;AAKDsQ,EAAAA,iBAAiB,GAAS;AACtBtQ,IAAAA,MAAM,CAAC,qBAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,iBAAD,CAAN,CAFsB,CAGtB;;AACA,SAAKgQ,MAAL,GAAczK,QAAQ,CAACgL,cAAT,CAAwB,MAAxB,CAAd;AAEA,SAAKC,oBAAL;AACA,SAAKC,cAAL;AACA,SAAKC,2BAAL;AAEAvQ,IAAAA,yFAAA,GAAoCkF,gBAApC;AACAsK,IAAAA,qFAAA,GAA0CtK,gBAA1C;AACA4F,IAAAA,yEAAA,GAA8B5F,gBAA9B,CAA+CtI,4DAA/C;AACAkF,IAAAA,mEAAA,GAAyBoD,gBAAzB;AAEH;;AAEDqI,EAAAA,cAAc,GAAG;AACb,WAAOzL,mEAAA,GAAyBqL,iBAAzB,EAAP;AACH;;AAEDqD,EAAAA,eAAe,GAAG;AACd,SAAKC,WAAL,CAAiBC,SAAjB,CAA2B,IAA3B;AACA,SAAKC,iBAAL,CAAuBD,SAAvB,CAAiC,IAAjC;AACH;;AAEDX,EAAAA,oBAAoB,CAACrN,KAAD,EAAe;AAC/B7C,IAAAA,MAAM,CAAC,2BAAD,CAAN;AACA6C,IAAAA,KAAK,CAACkO,cAAN,GAF+B,CAG/B;AACA;;AACA,QAAI,CAAC9O,mEAAA,GAAyBoL,UAAzB,EAAL,EAA4C;AACxC;AACAuB,MAAAA,MAAM,CAAC3P,QAAP,CAAgB+R,IAAhB,GAAuBpU,2DAAvB;AACA;AACH;;AACD,SAAKkU,iBAAL,CAAuBG,SAAvB,CAAiCpO,KAAjC;AACH;;AAGD8K,EAAAA,cAAc,CAACuD,QAAD,EAA0B;AACpClR,IAAAA,MAAM,CAAC,oBAAD,CAAN,CADoC,CAEpC;;AACA,QAAI,CAACiC,mEAAA,GAAyBoL,UAAzB,EAAL,EAA4C;AACxC;AACAuB,MAAAA,MAAM,CAAC3P,QAAP,CAAgB+R,IAAhB,GAAuBpU,2DAAvB;AACA;AACH;;AACD,SAAKgU,WAAL,CAAiBK,SAAjB,CAA2B,IAA3B;;AACA,QAAIC,QAAJ,EAAc;AACV,WAAKC,QAAL,CAAcC,cAAd,CAA6BF,QAA7B;AACH;AACJ;;AAEDG,EAAAA,YAAY,CAACC,QAAD,EAAyB;AACjC;AACA,QAAI1O,MAAM,GAAG,mCAAb;;AACA,QAAI0O,QAAQ,GAAG,CAAf,EAAkB;AACd1O,MAAAA,MAAM,IAAK,uDAAsD0O,QAAS,eAA1E;AACH;;AACD,QAAI,KAAKrB,kBAAT,EAA6B,KAAKA,kBAAL,CAAwBsB,SAAxB,GAAqC,GAAE3O,MAAO,EAA9C;AAChC;;AAGO8N,EAAAA,2BAA2B,GAAG;AAClC;AACAnL,IAAAA,QAAQ,CAACgL,cAAT,CAAwBxT,kEAAxB,EAAiDyU,gBAAjD,CAAkE,OAAlE,EAA2E,KAAKtB,oBAAhF,EAFkC,CAGlC;;AACA,SAAKD,kBAAL,GAA0B1K,QAAQ,CAACgL,cAAT,CAAwBxT,4DAAxB,CAA1B,CAJkC,CAMlC;;AACA,SAAKkT,kBAAL,CAAwBuB,gBAAxB,CAAyC,OAAzC,EAAkD,KAAK7D,cAAvD;AACH;;AAEO6C,EAAAA,oBAAoB,GAAG;AAC3B;AACA,SAAKM,iBAAL,GAAyBlB,2EAAA,CAA8B3N,mEAAA,GAAyBmL,eAAzB,EAA9B,CAAzB;AACA,SAAK0D,iBAAL,CAAuBzL,gBAAvB;AACH;;AAEOoL,EAAAA,cAAc,GAAG;AACrB;AACA,SAAKG,WAAL,GAAmBlB,0EAAA,CAA6BzN,mEAAA,GAAyBmL,eAAzB,EAA7B,CAAnB;AACA,SAAKwD,WAAL,CAAiBvL,gBAAjB;AACH;;AAtHkF;AAyHvF+K,YAAY,CAACnQ,KAAb,GAAqB,uCAArB;AACAmQ,YAAY,CAACqB,MAAb,GAAsB,MAAtB;AAEAxR,kDAAA,GAAYuH,OAAO,CAACmK,IAAR,CAAaxB,IAAb,CAAkB3I,OAAlB,CAAZ;AAEAoK,CAAC,CAAC,YAAY;AAEV/B,EAAAA,kEAAU,CAAC;AACP/H,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,YAAY,EAAE;AAFP,GAAD,CAAV,CAFU,CAOV;;AACA,QAAM8J,OAAO,gBAAG,iDAAC,GAAD;AAAK,aAAS,EAAC;AAAf,IAAhB;AACApC,EAAAA,6CAAA,CAAgBoC,OAAhB,EAAyBtM,QAAQ,CAACgL,cAAT,CAAwB,MAAxB,CAAzB;AAEH,CAXA,CAAD;;;;;;;;;;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/app/AppointmentController.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/app/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/app/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/patient-booking-system/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["import {SidebarLocation, SidebarPrefs} from \"ui-framework-jps\";\n\n\nexport enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch',\n    patientSearch: 'fastSearchNames',\n    recentPatientSearches: 'recentPatientSearches',\n    appointments: 'appointment',\n    appointmentTypes: 'appointmentType',\n    clinicConfig:'clinicConfig'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphQL',\n    users: '/api/users',\n    clinicConfig: '/api/clinic-config'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary: 'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n    logout: 'navigationItemLogout'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone',\n    calendarControl: 'calendarControl',\n    calendarDetail:'calendarDetail'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\nexport const CurrentWorkoutSidebarPrefs: SidebarPrefs = {\n    id: 'currentWorkoutSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.right\n}\n\nexport const CurrentWorkoutContainers = {\n    list: 'exercises',\n    detail: 'workoutDetail'\n}\n\nexport const ExerciseTypesSidebarPrefs: SidebarPrefs = {\n    id: 'exerciseTypesSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.left\n}\n\nexport const ExerciseTypesSidebarContainers = {\n    container: 'exerciseTypesContainer',\n}\n\nexport const  WorkoutSummarySidebarPrefs: SidebarPrefs = {\n    id: 'workoutSummarySidebar',\n    expandedSize: '100%',\n    location: SidebarLocation.bottom\n}\n\nexport const  WorkoutSummarySidebarContainers = {\n    container: 'workoutSummary',\n}\n\nexport const SELECT = {\n    appointmentType : 'event-appt-type',\n    patientSearch : 'event-patient'\n}\n\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {SELECT, STATE_NAMES, VIEW_CONTAINER} from \"./AppTypes\";\nimport Controller from \"./Controller\";\nimport {v4} from \"uuid\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\nimport {\n    Datepicker,\n    datepicker,\n    Eventcalendar,\n    eventcalendar,\n    getInst,\n    Popup,\n    popup,\n    select,\n    snackbar\n} from \"@mobiscroll/javascript\";\nimport App from \"../App\";\n\n\nconst logger = debug('appointment-controller');\n\ntype AppointmentViewElements = {\n    datePicker: Datepicker | null,\n    calendar: Eventcalendar | null,\n    popup: Popup | null,\n    range: any | null,\n    titleInput: HTMLInputElement | null,\n    descriptionTextarea: HTMLTextAreaElement | null,\n    deleteButton: HTMLButtonElement | null,\n    patientArrivedButton: HTMLButtonElement | null,\n    patientCancelledButton: HTMLButtonElement | null,\n    patientDNAButton: HTMLButtonElement | null,\n    patientSearchEl: HTMLSelectElement | null,\n    appointmentTypeEl: HTMLSelectElement | null\n    patientSearchDropdown: any | null\n    appointmentTypeDropdown: any | null\n}\n\ntype AppointmentDataElements = {\n    appointmentTypes: any[] | null,\n    clinicConfig: any | null,\n    oldEvent: any | null,\n    tempEvent: any,\n    isDeletingEvent: boolean,\n    isRestoringEvent: boolean,\n    provider: string\n}\n\nexport class AppointmentController implements StateChangeListener {\n    private static _instance: AppointmentController;\n\n    public static getInstance(): AppointmentController {\n        if (!(AppointmentController._instance)) {\n            AppointmentController._instance = new AppointmentController();\n        }\n        return AppointmentController._instance;\n    }\n\n    private viewElements: AppointmentViewElements = {\n        datePicker: null,\n        calendar: null,\n        popup: null,\n        range: null,\n        titleInput: null,\n        descriptionTextarea: null,\n        deleteButton: null,\n        patientArrivedButton: null,\n        patientCancelledButton: null,\n        patientDNAButton: null,\n        patientSearchEl: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        patientSearchDropdown: null\n    }\n\n    private dataElements: AppointmentDataElements = {\n        appointmentTypes: null,\n        clinicConfig: null,\n        oldEvent: null,\n        tempEvent: {},\n        isDeletingEvent: false,\n        isRestoringEvent: false,\n        provider: ''\n    };\n\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n\n    private static APPOINTMENT_TYPE_PATIENT_CANCELLED = 'Patient Cancelled';\n    private static APPOINTMENT_TYPE_PATIENT_DNA = 'Did Not Arrive';\n\n\n\n    private constructor() {\n        this.handleNewDatePicked = this.handleNewDatePicked.bind(this);\n        this.onPageLoading = this.onPageLoading.bind(this);\n        this.onAppointmentEditRequested = this.onAppointmentEditRequested.bind(this);\n        this.onAppointmentDeleting = this.onAppointmentDeleting.bind(this);\n        this.onAppointmentDeleted = this.onAppointmentDeleted.bind(this);\n        this.onAppointmentCreated = this.onAppointmentCreated.bind(this);\n        this.onAppointmentContext = this.onAppointmentContext.bind(this);\n        this.onAppointmentUpdated = this.onAppointmentUpdated.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch, this);\n\n    }\n\n    public handleNewDatePicked(event: any, inst: any): void {\n        logger(`Handling new date picked`);\n        logger(event);\n    }\n    protected getIconForAppointmentType(appointmentType: string) {\n        logger(`Getting icon for appoint type ${appointmentType}`);\n        let result = ``;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) {\n                if (this.dataElements.appointmentTypes[foundIndex].icon) {\n                    result = `<i class=\"md-custom-event-icon ${this.dataElements.appointmentTypes[foundIndex].icon}\"></i>`;\n                }\n\n            }\n        }\n        return result;\n    }\n\n    protected getColourForAppointmentType(appointmentType: string) {\n        let result = `rgba(10, 100, 100, 50)`;\n        if (this.dataElements.appointmentTypes) {\n            let foundIndex = this.dataElements.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = this.dataElements.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    protected getColourForAppointment(appointment: any) {\n        return this.getColourForAppointmentType(appointment.type);\n    }\n\n    protected getIconsForEvent(event:any):string {\n        let buffer = '';\n        if (event.arrivalTime) {\n            if (event.arrivalTime.trim().length > 0) {\n                buffer += '<i class=\"md-custom-event-icon fas fa-chair\"></i>';\n            }\n        }\n        buffer += AppointmentController.getInstance().getIconForAppointmentType(event.type);\n\n        return buffer;\n    }\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        const today = parseInt(moment().format('YYYYMMDD'));\n        const loadDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        const loadDateFinish = parseInt(moment(event.lastDay).format('YYYYMMDD'));\n        logger(`Need to load date range (${loadDate},${loadDateFinish})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        let results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start >= loadDate) && (appointment.start <= loadDateFinish)) {\n                logger('Found appointment');\n                logger(appointment);\n                let canEdit = ((loadDate >= today) && (!appointment.isDNA && !appointment.isCancelled));\n                // convert the start and end time into the format for the calendar\n                const time = parseInt(appointment.time); // HHMMSS as a time\n                const duration = appointment.duration; // seconds\n\n                const startTimeHours = Math.floor(appointment.time / 10000);\n                const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n                const appointmentDuration = Math.floor(duration / 60);\n\n                let endTimeHours = startTimeHours;\n                let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n                if (endTimeMinutes > 60) {\n                    endTimeMinutes -= 60;\n                    endTimeHours += 1; // 24 hour time\n                }\n\n                let timeString = `${endTimeHours}`;\n                if (endTimeHours < 10) timeString = '0' + timeString;\n                if (endTimeMinutes < 10) timeString += '0';\n                timeString += `${endTimeMinutes}`;\n\n                let result = {\n                    id: appointment._id,\n                    start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n                    end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n                    title: appointment.name,\n                    description: appointment.note,\n                    color: this.getColourForAppointment(appointment),\n                    allDay: false,\n                    editable: canEdit,\n                    resource: appointment.provider,\n                    patientId: appointment._patient,\n                    isDNA: appointment.isDNA,\n                    isCancelled: appointment.isCancelled,\n                    createdBy: appointment.createdBy,\n                    created: appointment.created,\n                    modified: appointment.modified,\n                    arrivalTime: appointment.arrivalTime,\n                    type: appointment.type,\n                    provider:appointment.provider\n                }\n\n                this.dataElements.provider = appointment.provider;\n\n                logger('Converted to event');\n                logger(result);\n                results.push(result);\n            }\n\n        });\n\n        inst.setEvents(results);\n\n\n    }\n\n    public onAppointmentEditRequested(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentDeleting(event: any, inst: any): boolean {\n        logger(event);\n        return false;\n    }\n\n    public onAppointmentDeleted(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentCreated(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentContext(event: any, inst: any): void {\n\n        logger(event);\n    }\n\n    public onAppointmentUpdated(event: any, inst: any): void {\n\n        logger(event);\n    }\n\n    public onDocumentLoaded() {\n        // setup the scheduler\n        // @ts-ignore\n        this.viewElements.datePicker = datepicker(document.getElementById(VIEW_CONTAINER.calendarControl), {\n            controls: ['calendar'],\n            display: \"inline\",\n            dateFormat: 'YYYYMMDD',\n            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            showWeekNumbers: true,\n            onChange: (event: any, inst: any) => {\n                AppointmentController.getInstance().viewElements.calendar?.navigate(event.value);\n                AppointmentController.getInstance().handleNewDatePicked(event.value, inst)\n            }\n        });\n\n        let options: any;\n        if (this.dataElements.clinicConfig) {\n            logger('Using clinic config options');\n            options = {\n                clickToCreate: this.dataElements.clinicConfig.clickToCreate,\n                dragTimeStep: this.dataElements.clinicConfig.dragTimeStep,\n                dragToCreate: this.dataElements.clinicConfig.dragToCreate,\n                dragToMove: this.dataElements.clinicConfig.dragToMove,\n                dragToResize: this.dataElements.clinicConfig.dragToResize,\n                min: moment().subtract(this.dataElements.clinicConfig.min, \"months\"),\n                controls: this.dataElements.clinicConfig.controls,\n                showControls: this.dataElements.clinicConfig.showControls,\n                view: this.dataElements.clinicConfig.view,\n                invalidateEvent: this.dataElements.clinicConfig.invalidateEvent,\n                invalid: this.dataElements.clinicConfig.invalid,\n            }\n        } else {\n            logger('Using DEFAULT config options');\n            options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'day',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n        }\n        options.onSelectedDateChange = (event: any, inst: any) => {\n            AppointmentController.getInstance().handleNewDatePicked(event.date, inst);\n            AppointmentController.getInstance().viewElements.datePicker?.setVal(event.date);\n        };\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentCreated(event, inst);\n            AppointmentController.getInstance().viewElements.popup.close();\n            // store temporary event\n            AppointmentController.getInstance().dataElements.tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            this.createAddPopup(event.target);\n        };\n        options.onEventDelete = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentDeleting(event, inst);\n        };\n        options.onEventDeleted = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentDeleted(event, inst);\n\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventRightClick = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentContext(event, inst);\n        };\n        options.onEventUpdated = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentUpdated(event, inst);\n        };\n        options.onEventDoubleClick = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentEditRequested(event, inst);\n        };\n        options.onEventClick = (args: any) => {\n            console.log(args.event);\n            if (args.event.editable) {\n                AppointmentController.getInstance().dataElements.oldEvent = Object.assign({}, args.event);\n                AppointmentController.getInstance().dataElements.tempEvent = args.event;\n\n                if (!AppointmentController.getInstance().viewElements.popup.isVisible()) {\n                    logger(args);\n                    this.createEditPopup(args);\n                }\n            }\n        }\n        options.renderScheduleEvent = (data:any) => {\n            logger(`Rendering event`);\n            logger(data);\n            const icons = AppointmentController.getInstance().getIconsForEvent(data.original);\n            logger(`Applicable icons`);\n            logger(icons);\n\n            let buffer = '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n                '<div class=\"md-custom-event-wrapper\">' +\n                '<div style=\"background:' + data.color + '\" class=\"md-custom-event-type\">' + data.original.type+ '</div>' +\n                // '<div class=\"md-custom-event-details\">' +\n                '<span class=\"md-custom-event-title\">' + data.title + '</span>' +\n                '<span class=\"md-custom-event-time\">' + data.start + ' - ' + data.end + '</span>';\n            if (icons.trim().length > 0) {\n                buffer += '<span class=\"md-custom-event-img-cont\">' + icons +'</span></div></div>';\n            }\n            else {\n                buffer += '</div></div>';\n            }\n            return buffer;\n\n        }\n\n        this.viewElements.titleInput = <HTMLInputElement>document.getElementById('event-title');\n        this.viewElements.descriptionTextarea = <HTMLTextAreaElement>document.getElementById('event-desc');\n        this.viewElements.patientArrivedButton = <HTMLButtonElement>document.getElementById('event-arrived');\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete');\n        this.viewElements.patientCancelledButton = <HTMLButtonElement>document.getElementById('event-cancelled');\n        this.viewElements.patientDNAButton = <HTMLButtonElement>document.getElementById('event-dna');\n        this.viewElements.patientSearchEl = <HTMLSelectElement>document.getElementById(SELECT.patientSearch);\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById(SELECT.appointmentType);\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            theme:'ios',\n            themeVariant:'light',\n            onClose: function () {\n                if (AppointmentController.getInstance().dataElements.isDeletingEvent) {\n                    // @ts-ignore\n                    AppointmentController.getInstance().viewElements.calendar.removeEvent(AppointmentController.getInstance().dataElements.tempEvent);\n                    Controller.getInstance().getStateManager().removeItemFromState(\n                        STATE_NAMES.appointments,\n                        AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().dataElements.tempEvent),\n                        false);\n\n                } else if (AppointmentController.getInstance().dataElements.isRestoringEvent) {\n                    // @ts-ignore\n                    AppointmentController.getInstance().viewElements.calendar.updateEvent(AppointmentController.getInstance().dataElements.oldEvent);\n                    Controller.getInstance().getStateManager().updateItemInState(\n                        STATE_NAMES.appointments,\n                        AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().dataElements.tempEvent),\n                        false);\n                }\n            },\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n        this.viewElements.titleInput.addEventListener('input', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().dataElements.tempEvent.title = ev.target.value;\n        });\n\n        this.viewElements.descriptionTextarea.addEventListener('change', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().dataElements.tempEvent.description = ev.target.value;\n        });\n\n        // @ts-ignore\n        this.viewElements.range = datepicker('#event-date', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input',\n            endInput: '#end-input',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentController.datePickerResponsive,\n            onChange: function (args: any) {\n                let date = args.value;\n                // update event's start date\n                AppointmentController.getInstance().dataElements.tempEvent.start = date[0];\n                AppointmentController.getInstance().dataElements.tempEvent.end = date[1];\n            }\n        });\n\n\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            // @ts-ignore\n            AppointmentController.getInstance().viewElements.calendar.removeEvent(AppointmentController.getInstance().dataElements.tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().dataElements.tempEvent),\n                false);\n\n            AppointmentController.getInstance().dataElements.isRestoringEvent = false;\n            AppointmentController.getInstance().viewElements.popup.close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentController.getInstance().dataElements.tempEvent;\n\n            // @ts-ignore\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n        this.viewElements.patientCancelledButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().dataElements.tempEvent;\n\n            let originalType = originalEvent.type;\n            let originalNote = originalEvent.note;\n\n            originalEvent.isCancelled = true;\n            originalEvent.type = AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.note = AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n\n            // @ts-ignore\n            AppointmentController.getInstance().viewElements.calendar.updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().dataElements.isRestoringEvent = false;\n            AppointmentController.getInstance().viewElements.popup.close();\n\n\n            // @ts-ignore\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isCancelled = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(originalType);\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Cancelled'\n            });\n        });\n\n        this.viewElements.patientArrivedButton.addEventListener('click', function () {\n            // update the event to arrived\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().dataElements.tempEvent;\n\n            originalEvent.arrivalTime = moment().format('HHmmss');\n\n            // @ts-ignore\n            AppointmentController.getInstance().viewElements.calendar.updateEvent(originalEvent);\n            console.log(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().dataElements.isRestoringEvent = false;\n            AppointmentController.getInstance().viewElements.popup.close();\n\n\n            // @ts-ignore\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.arrivalTime= '';\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Arrived'\n            });\n        });\n\n        this.viewElements.patientDNAButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().dataElements.tempEvent;\n\n            originalEvent.isDNA = true;\n            originalEvent.type = AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.note = AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentController.getInstance().getColourForAppointmentType(AppointmentController.APPOINTMENT_TYPE_PATIENT_DNA);\n\n            // @ts-ignore\n            AppointmentController.getInstance().viewElements.calendar.updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentController.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentController.getInstance().dataElements.isRestoringEvent = false;\n            AppointmentController.getInstance().viewElements.popup.close();\n        });\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById(VIEW_CONTAINER.calendarDetail), options);\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                this.dataElements.clinicConfig = newValue[0];\n                if (this.viewElements.calendar) {\n                    logger('State changed, using clinic config options');\n\n                    this.viewElements.calendar.setOptions({\n                        clickToCreate: this.dataElements.clinicConfig.clickToCreate,\n                        dragTimeStep: this.dataElements.clinicConfig.dragTimeStep,\n                        dragToCreate: this.dataElements.clinicConfig.dragToCreate,\n                        dragToMove: this.dataElements.clinicConfig.dragToMove,\n                        dragToResize: this.dataElements.clinicConfig.dragToResize,\n                        min: moment().subtract(this.dataElements.clinicConfig.min, \"months\"),\n                        showControls: this.dataElements.clinicConfig.showControls,\n                        view: this.dataElements.clinicConfig.view,\n                        invalidateEvent: this.dataElements.clinicConfig.invalidateEvent,\n                        invalid: this.dataElements.clinicConfig.invalid,\n                    });\n\n                    this.viewElements.range.setOptions({\n                        stepMinute: this.dataElements.clinicConfig.dragTimeStep\n                    });\n                }\n                break;\n            }\n            case (STATE_NAMES.patientSearch): {\n                let patients: any[] = [];\n\n                newValue.forEach((patient: any) => {\n                    patients.push({text: `${patient.name.surname}, ${patient.name.firstname}`, value: patient._id});\n                });\n\n                // add the patient search values to the data of the select dropdown\n                // @ts-ignore\n                AppointmentController.patientSearchDropdown = select('#' + SELECT.patientSearch, {\n                    filter: true,\n                    data: patients,\n                    onChange: (event: any, inst: any) => {\n                        // @ts-ignore\n                        getInst(AppointmentController.getInstance().viewElements.titleInput).value = event.valueText;\n\n                        AppointmentController.getInstance().dataElements.tempEvent.patientId = event.value;\n                    }\n                });\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                this.dataElements.appointmentTypes = newValue;\n\n                let types: any[] = [];\n\n                newValue.forEach((type: any) => {\n                    types.push(type.name);\n                });\n\n                // add the patient search values to the data of the select dropdown\n                // @ts-ignore\n                this.viewElements.appointmentTypeDropdown = select('#' + SELECT.appointmentType, {\n                    data: types,\n                    onChange: (event: any, inst: any) => {\n\n                        getInst(AppointmentController.getInstance().viewElements.descriptionTextarea).value = event.valueText;\n                        AppointmentController.getInstance().dataElements.tempEvent.type = event.valueText;\n                    }\n                });\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    private getAppointmentFromEvent(event: any): any {\n        let start = parseInt(moment(event.start).format('YYYYMMDD'));\n        let time = moment(event.start).format('HHmmss');\n        let duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        let appointment = {\n            _id: event.id,\n            name: event.title,\n            note: event.description,\n            start: start,\n            time: time,\n            duration: duration,\n            _patient: event.patientId,\n            isDNA: event.isDNA,\n            isCancelled: event.isCancelled,\n            createdBy: event.createdBy,\n            created: event.created,\n            modified: event.modified,\n            arrivalTime: event.arrivalTime,\n            type: event.type,\n            provider: event.provider\n        };\n        return appointment;\n    }\n\n    private createAddPopup(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.patientCancelledButton.style.display = 'none';\n        this.viewElements.patientDNAButton.style.display = 'none';\n        this.viewElements.patientArrivedButton.style.display = 'none';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n        this.dataElements.isDeletingEvent = true;\n        this.dataElements.isRestoringEvent = false;\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentController.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentController.getInstance().dataElements.tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        // @ts-ignore\n                        let colour = AppointmentController.getInstance().getColourForAppointmentType(mobiscroll5.getInst(AppointmentController.getInstance().viewElements.descriptionTextarea).value);\n\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        // @ts-ignore\n                        let updatedEvent = {\n                            id: appointmentId,\n                            title: getInst(AppointmentController.getInstance().viewElements.titleInput).value,\n                            description: getInst(AppointmentController.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            patientId: AppointmentController.getInstance().dataElements.tempEvent.patientId,\n                            editable: true,\n                            resource: AppointmentController.getInstance().dataElements.tempEvent.resource,\n                            isDNA: false,\n                            isCancelled: false,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: AppointmentController.getInstance().dataElements.tempEvent.type,\n                            provider: AppointmentController.getInstance().dataElements.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentController.getInstance().viewElements.calendar.removeEvent([mobiId]);\n                        AppointmentController.getInstance().viewElements.calendar.addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentController.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n                        // @ts-ignore\n                        AppointmentController.getInstance().dataElements.isDeletingEvent = false;\n\n                        // navigate the calendar to the correct view\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.navigate(updatedEvent.start);\n\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.popup.close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = this.dataElements.tempEvent.title;\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = '';\n\n        this.viewElements.range.setVal([this.dataElements.tempEvent.start, this.dataElements.tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: this.dataElements.tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: this.dataElements.tempEvent.allDay ? AppointmentController.datePickerResponsive : AppointmentController.datetimePickerResponsive\n        });\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    private createEditPopup(args: any) {\n        let ev = args.event;\n\n        console.log(ev.patientId);\n\n        // show delete button inside edit popup\n        this.viewElements.patientArrivedButton.style.display = 'block';\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.patientCancelledButton.style.display = 'block';\n        this.viewElements.patientDNAButton.style.display = 'block';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        this.dataElements.isDeletingEvent = false;\n        this.dataElements.isRestoringEvent = true;\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentController.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        // @ts-ignore\n                        let updatedEvent = {\n                            id: ev.id,\n                            title: getInst(AppointmentController.getInstance().viewElements.titleInput).value,\n                            description: getInst(AppointmentController.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: ev.color,\n                            patientId: ev.patientId,\n                            editable: true,\n                            resource: ev.provider,\n                            isDNA: true,\n                            isCancelled: true,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentController.getInstance().viewElements.calendar.updateEvent(updatedEvent);\n\n                        // navigate the calendar to the correct view\n                        // @ts-ignore\n                        AppointmentController.getInstance().viewElements.calendar.navigate(date[0]);\n\n                        AppointmentController.getInstance().dataElements.isRestoringEvent = false;\n                        AppointmentController.getInstance().viewElements.popup.close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = ev.title || '';\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = ev.description || '';\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentController.datePickerResponsive : AppointmentController.datetimePickerResponsive\n        });\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport {isSameMongo} from \"./EqualityFunctions\";\nimport {\n    AggregateStateManager,\n    AsyncStateManagerWrapper,\n    BasicObjectDefinitionFactory,\n    ChatManager,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DownloadManager, FieldDefinition, FieldType,\n    GraphQLApiStateManager, KeyType,\n    MemoryBufferStateManager,\n    NotificationController, ObjectDefinitionRegistry,\n    RESTApiStateManager,\n    SimpleValueDataSource,\n    SocketManager,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true\n            },\n            {\n                stateName: STATE_NAMES.clinicConfig,\n                serverURL: '',\n                api: API_Config.clinicConfig,\n                isActive: true\n            },\n        ]);\n        let qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([\n            {\n                stateName: STATE_NAMES.patientSearch,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPatientSearchDetails {_id,identifiers { legacyId},flags {isInactive,hasWarnings},name {firstname,surname}}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPatientSearchDetails',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointments,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointments {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime}}',\n                    create: 'mutation createAppointment($data: AppointmentInput!){addAppointment(appt: $data) {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime}}',\n                    destroy: 'mutation deleteAppointment($identifier: String!){deleteAppointment(id: $identifier)}',\n                    update: 'mutation updateAppointment($data: AppointmentInput!){updateAppointment(appt: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointments',\n                    create: 'addAppointment',\n                    destroy: 'deleteAppointment',\n                    update: 'updateAppointment',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTypes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTypes {_id,name,colour,icon}}',\n                    create: 'mutation createAppointmentType($data: AppointmentInput!){addAppointmentType(apptType: $data) {_id,name,colour,icon}}',\n                    destroy: 'mutation deleteAppointmentType($identifier: String!){deleteAppointmentType(id: $identifier)}',\n                    update: 'mutation updateAppointmentType($data: AppointmentInput!){updateAppointmentType(apptType: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTypes',\n                    create: 'addAppointmentType',\n                    destroy: 'deleteAppointmentType',\n                    update: 'updateAppointmentType',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n        ])\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo);\n        let memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        let asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n        let asyncQL = new AsyncStateManagerWrapper(aggregateSM, qlSM, isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.appointments,STATE_NAMES.patientSearch,STATE_NAMES.recentPatientSearches], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.users,STATE_NAMES.clinicConfig], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.clinicConfig);\n            this.getStateManager().getStateByName(STATE_NAMES.patientSearch);\n            this.getStateManager().getStateByName(STATE_NAMES.appointments);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\n\n","\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","\n\nimport debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {DataChangeType, NotificationManager, NotificationType, SocketListener} from \"ui-framework-jps\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user});\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case DataChangeType.create: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.info);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.update: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.delete: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\n\n\n\nimport debug from 'debug';\nimport Controller from './app/Controller';\n\nimport {\n    API_Config,\n    NAVIGATION,\n} from \"./app/AppTypes\";\nimport React, {ReactNode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AppointmentController} from \"./app/AppointmentController\";\nimport {\n    ChatRoomsSidebar,\n    ContextualInformationHelper,\n    SecurityManager,\n    UnreadMessageCountListener,\n    UserSearchSidebar\n} from \"ui-framework-jps\";\nimport {setOptions} from \"@mobiscroll/javascript\";\n\n\n\n\n\n\nconst logger = debug('app');\n\nexport default class App extends React.Component implements UnreadMessageCountListener {\n\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    private thisEl: HTMLDivElement | null = null;\n    private chatNavigationItem: HTMLAnchorElement | null = null;\n\n\n\n    public constructor() {\n        // @ts-ignore\n        super();\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    render(): ReactNode {\n        logger(\"Rendering App\");\n        return (\n            <div></div>\n        )\n    }\n\n\n\n\n    componentDidMount(): void {\n        logger('component Did Mount');\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        AppointmentController.getInstance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = UserSearchSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = ChatRoomsSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.chatSidebar.onDocumentLoaded();\n    }\n}\n\nlocalStorage.debug = 'api-ts-results appointment-controller';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n$(function () {\n\n    setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    })\n\n    // @ts-ignore\n    const element = <App className=\"container-fluid justify-content-around\"/>;\n    ReactDOM.render(element, document.getElementById('root'));\n\n});\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","patientSearch","recentPatientSearches","appointments","appointmentTypes","clinicConfig","API_Config","login","graphQL","NAVIGATION","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","logout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","calendarControl","calendarDetail","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","CurrentWorkoutSidebarPrefs","id","expandedSize","location","SidebarLocation","right","CurrentWorkoutContainers","list","detail","ExerciseTypesSidebarPrefs","left","ExerciseTypesSidebarContainers","container","WorkoutSummarySidebarPrefs","bottom","WorkoutSummarySidebarContainers","SELECT","appointmentType","logger","debug","getInstance","AppointmentController","viewElements","datePicker","calendar","popup","range","titleInput","descriptionTextarea","deleteButton","patientArrivedButton","patientCancelledButton","patientDNAButton","patientSearchEl","appointmentTypeEl","appointmentTypeDropdown","patientSearchDropdown","dataElements","oldEvent","tempEvent","isDeletingEvent","isRestoringEvent","provider","datePickerResponsive","medium","controls","touchUi","datetimePickerResponsive","APPOINTMENT_TYPE_PATIENT_CANCELLED","APPOINTMENT_TYPE_PATIENT_DNA","constructor","Controller","handleNewDatePicked","getIconForAppointmentType","result","foundIndex","type","icon","getColourForAppointmentType","getColourForAppointment","appointment","getIconsForEvent","buffer","event","onPageLoading","today","parseInt","moment","loadDate","loadDateFinish","results","canEdit","time","duration","startTimeHours","Math","startTimeMinutes","appointmentDuration","endTimeHours","endTimeMinutes","timeString","start","end","title","description","color","allDay","editable","resource","patientId","isDNA","isCancelled","createdBy","created","modified","arrivalTime","inst","onAppointmentEditRequested","onAppointmentDeleting","onAppointmentDeleted","onAppointmentCreated","onAppointmentContext","onAppointmentUpdated","onDocumentLoaded","datepicker","document","display","dateFormat","dayNamesMin","showWeekNumbers","onChange","options","clickToCreate","dragTimeStep","dragToCreate","dragToMove","dragToResize","min","showControls","view","invalidateEvent","invalid","schedule","startDay","endDay","startTime","endTime","timeCellStep","timeLabelStep","recurring","repeat","weekDays","snackbar","button","action","text","message","args","console","Object","data","icons","contentPadding","fullScreen","theme","themeVariant","onClose","responsive","width","ev","select","startInput","endInput","showRangeLabels","stepMinute","maxTime","date","deletedEvent","originalEvent","originalType","originalNote","eventcalendar","filterResults","getListenerName","stateChanged","name","newValue","patients","patient","surname","firstname","value","_id","filter","getInst","types","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","getAppointmentFromEvent","note","_patient","createAddPopup","headerText","buttons","keyCode","handler","mobiId","appointmentId","v4","colour","mobiscroll5","createdOn","updatedEvent","free","SecurityManager","cssClass","anchor","elm","createEditPopup","currentTarget","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","qlSM","GraphQLApiStateManager","apiURL","apis","findAll","create","destroy","update","find","idField","aggregateSM","memorySM","asyncREST","asyncQL","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","isLoggedIn","getLoggedInUserId","loggedInUser","getLoggedInUsername","handleMessage","getCurrentUser","handleShowChat","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","addWorkoutExercisesToCurrentWorkout","workout","exercise","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","window","item1","item2","slLogger","handleDataChangedByAnotherUser","user","changeUser","username","stateObj","DataChangeType","NotificationManager","NotificationType","React","ReactDOM","ChatRoomsSidebar","ContextualInformationHelper","UserSearchSidebar","setOptions","App","Component","thisEl","chatNavigationItem","handleShowUserSearch","bind","localStorage","render","componentDidMount","getElementById","setupUserSearchViews","setupChatViews","setupNavigationItemHandling","hideAllSideBars","chatSidebar","eventHide","userSearchSidebar","preventDefault","href","eventShow","roomName","chatView","selectChatRoom","countChanged","newCount","innerHTML","addEventListener","plugin","log","info","$","element"],"sourceRoot":""}