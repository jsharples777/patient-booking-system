{"version":3,"file":"app.bundle.js","mappings":"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ACjB;AACA,aAAKod,oBAAL,CAA0BY,MAA1B,CAAiChe,UAAjC,EAA6C,CAA7C;AACA,aAAK6d,gCAAL,CAAsC1O,SAAtC;AACH;AACJ;AACJ;;AA/NkF;;;;;;;;;;ACVvnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://patient-booking-system/./src/AppTypes.ts","webpack://patient-booking-system/./src/Controller.ts","webpack://patient-booking-system/./src/DurationFunctions.ts","webpack://patient-booking-system/./src/SocketListenerDelegate.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateController.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateDetailModal.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateFilterView.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateView.ts","webpack://patient-booking-system/./src/appointment-types/AppointmentTypesCollectionView.ts","webpack://patient-booking-system/./src/appointment-types/AppointmentTypesCompositeView.ts","webpack://patient-booking-system/./src/appointments/AppointmentBookView.ts","webpack://patient-booking-system/./src/appointments/AppointmentController.ts","webpack://patient-booking-system/./src/appointments/AppointmentDetailModal.ts","webpack://patient-booking-system/./src/appointments/AppointmentFilterView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatDetailView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatListView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatSidebar.ts","webpack://patient-booking-system/./src/helper/AppointmentControllerHelper.ts","webpack://patient-booking-system/./src/model/PatientObjectDefinitions.ts","webpack://patient-booking-system/./src/patients/OpenPatientsView.ts","webpack://patient-booking-system/./src/patients/PatientController.ts","webpack://patient-booking-system/./src/patients/PatientRecordTabularView.ts","webpack://patient-booking-system/./src/patients/PatientSearchSidebar.ts","webpack://patient-booking-system/./src/patients/PatientSearchView.ts","webpack://patient-booking-system/./src/today/TodayController.ts","webpack://patient-booking-system/./src/today/TodayView.ts","webpack://patient-booking-system/./src/users/UserValidationHelper.ts","webpack://patient-booking-system/./src/users/UsersCollectionView.ts","webpack://patient-booking-system/./src/users/UsersCompositeView.ts","webpack://patient-booking-system/./src/App.tsx","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplatesReact.tsx","webpack://patient-booking-system/./src/appointments/AppointmentBookReact.tsx","webpack://patient-booking-system/./src/patients/PatientDemographicsCompositeView.tsx","webpack://patient-booking-system/./src/patients/PatientRecordReact.tsx","webpack://patient-booking-system/./src/today/TodaysPatientsView.tsx","webpack://patient-booking-system//Users/jimsharples/Development/patient-booking-system/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://patient-booking-system/webpack/bootstrap","webpack://patient-booking-system/webpack/runtime/chunk loaded","webpack://patient-booking-system/webpack/runtime/compat get default export","webpack://patient-booking-system/webpack/runtime/define property getters","webpack://patient-booking-system/webpack/runtime/hasOwnProperty shorthand","webpack://patient-booking-system/webpack/runtime/make namespace object","webpack://patient-booking-system/webpack/runtime/node module decorator","webpack://patient-booking-system/webpack/runtime/jsonp chunk loading","webpack://patient-booking-system/webpack/before-startup","webpack://patient-booking-system/webpack/startup","webpack://patient-booking-system/webpack/after-startup"],"sourcesContent":["import {SidebarLocation, SidebarPrefs} from \"ui-framework-jps\";\n\n\nexport enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3,\n    Modified\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch',\n    patientSearch: 'fastSearchNames',\n    recentPatientSearches: 'recentPatientSearches',\n    openPatients: 'openPatients',\n    appointments: 'appointment',\n    appointmentTypes: 'appointmentType',\n    clinicConfig: 'clinicConfig',\n    providers: 'provider',\n    appointmentTemplates: 'appointmentTemplate',\n    patients: 'patient',\n    basics: 'basic',\n    name: 'name',\n    contact: 'contact',\n    identifiers: 'identifiers',\n    flags: 'flags',\n    warnings: 'warnings',\n    allergies: 'allergy',\n    consults: 'consult',\n    history: 'history',\n    results: 'result',\n    scripts: 'script',\n    scriptHistory: 'scriptHistory',\n    scriptArchive: 'scriptArchive',\n    recalls: 'recall',\n    tasks: 'task',\n    documents: 'documents',\n    letters: 'letter',\n    vaccinations: 'vaccination',\n    wcc: 'wcc',\n    modifiedDates: 'modifiedDate',\n    loadedPatients: 'loadedPatients',\n    postCodes:'postCode'\n\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphQL',\n    users: '/api/users',\n    clinicConfig: '/api/clinic-config',\n    patients: '/api/patients',\n    patientDemographics: '/api/demographics'\n};\n\nexport const NAVIGATION = {\n    appointmentBook: 'navigationItemAppointmentBook',\n    patientSearch: 'navigationItemPatientSearch',\n    appointmentTemplates: 'navigationItemAppointmentTemplating',\n    clinicChat: 'navigationItemChat',\n    patientRecord: 'navigationItemPatientRecord',\n    logout: 'navigationItemLogout',\n    appointmentTypes: 'navigationItemAppointmentTypes',\n    users: 'navigationItemUsers',\n    today: 'navigationItemToday'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    typePatientSummary: 'patientSummary',\n    fromPatientSearch: 'patientSearch'\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    userSearch: 'userSearch',\n    patientSearch: 'patientSearch',\n    appointmentTypes: 'appointmentTypes',\n    appointmentTypeDetail: 'appointmentTypeDetail',\n    users: 'usersList',\n    userDetail: 'userDetail',\n    openPatients: 'Open Patients',\n    patientName:'Patient Name',\n    patientBasics:'Patient Basics',\n    patientContact:'Patient Contact',\n    patientIdentifiers:'Patient Identifiers'\n}\n\nexport const VIEW_CONTAINER = {\n    calendarControl: 'calendarControl',\n    calendarDetail: 'calendarDetail',\n    patientName:'patient-name-details',\n    patientBasics:'patient-basics-details',\n    patientContact:'patient-contact-details',\n    patientIdentifiers:'patient-identifier-details'\n\n}\n\n\nexport const PatientSearchSidebarPrefs: SidebarPrefs = {\n    id: 'patientSearchSideBar',\n    expandedSize: '40%',\n    location: SidebarLocation.left\n}\n\nexport const PatientSearchSidebarContainers = {\n    container: 'patientSearchZone',\n    openRecords: 'openPatientZone'\n}\n\nexport const AppointmentTypesSidebarPrefs: SidebarPrefs = {\n    id: 'appointmentTypesSideBar',\n    expandedSize: '50%',\n    location: SidebarLocation.left\n}\n\nexport const AppointmentTypesSidebarContainers = {\n    list: 'appointmentTypes',\n    detail: 'appointmentTypeDetail',\n    colourPicker: 'appointmentTypeColour'\n}\n\nexport const UsersSidebarPrefs: SidebarPrefs = {\n    id: 'usersSideBar',\n    expandedSize: '40%',\n    location: SidebarLocation.right\n}\n\nexport const UsersSidebarContainers = {\n    list: 'usersList',\n    detail: 'userDetail'\n}\n\nexport const SELECT = {\n    appointmentType: 'event-appt-type',\n    patientSearch: 'event-patient'\n}\n\n","import debug from 'debug';\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport {\n    AggregateStateManager,\n    AsyncStateManagerWrapper,\n    BasicObjectDefinitionFactory,\n    ChatManager,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DerivedField,\n    DownloadManager,\n    FieldDefinition,\n    FieldType,\n    FieldValueGenerator,\n    GraphQLApiStateManager,\n    isSameMongo,\n    MemoryBufferStateManager,\n    NotificationController,\n    ObjectDefinitionRegistry,\n    RESTApiStateManager,\n    SocketManager,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\nimport {PatientObjectDefinitions} from \"./model/PatientObjectDefinitions\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass DefaultUserValueGenerator implements FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        if (isCreate) {\n            switch (field.id) {\n                case 'isCurrent': {\n                    result = 'true';\n                    break;\n                }\n                case 'resetPassword': {\n                    result = 'true';\n                    break;\n                }\n                case 'password': {\n                    result = 'password';\n                    break;\n                }\n            }\n\n        }\n\n        return result;\n    }\n\n}\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n\n\n    private static patientQuery: string = 'query getPatient($identifier: String!){\\n' +\n        '  getPatient(id: $identifier) {\\n' +\n        '    _id,\\n' +\n        '    lastSeen,\\n' +\n        '    lastSeenBy,\\n' +\n        '    dob,\\n' +\n        '    dod,\\n' +\n        '    gender,\\n' +\n        '    ethnicity,\\n' +\n        '    countryofbirth,\\n' +\n        '    created,\\n' +\n        '    modified,\\n' +\n        '    name{\\n' +\n        '      _id,\\n' +\n        '    \\ttitle,\\n' +\n        '    \\tfirstname,\\n' +\n        '    \\tmiddlename,\\n' +\n        '    \\tsurname,\\n' +\n        '    \\taka\\n' +\n        '  \\t},\\n' +\n        '    contact{\\n' +\n        '    \\t_id,\\n' +\n        '    \\tline1,\\n' +\n        '    \\tline2,\\n' +\n        '    \\tsuburb,\\n' +\n        '    \\tpostcode,\\n' +\n        '    \\tstate,\\n' +\n        '    \\tcountry,\\n' +\n        '    \\thome,\\n' +\n        '    \\twork,\\n' +\n        '    \\tmobile,\\n' +\n        '    \\tnokname,\\n' +\n        '    \\tnokphone\\n' +\n        '    },\\n' +\n        '    identifiers {\\n' +\n        '      _id,\\n' +\n        '    \\tmedicare,\\n' +\n        '    \\tmedicareRef,\\n' +\n        '    \\tlegacyId,\\n' +\n        '   \\t \\tdva,\\n' +\n        '   \\t \\tdvaColour,\\n' +\n        '    \\thcc,\\n' +\n        '    \\tihi\\n' +\n        '    },\\n' +\n        '    flags {\\n' +\n        '      _id,\\n' +\n        '    \\tisAcountHolder,\\n' +\n        '    \\tlegacyAccountHolderId,\\n' +\n        '    \\tisDeceased,\\n' +\n        '    \\tisInactive,\\n' +\n        '    \\tshouldSMS,\\n' +\n        '    \\tisMarried,\\n' +\n        '    \\tisCTGRegistered,\\n' +\n        '    \\thasWarnings\\n' +\n        '    },\\n' +\n        '    warnings {\\n' +\n        '      _id, warnings\\n' +\n        '    },\\n' +\n        '    allergies {\\n' +\n        '      _id,\\n' +\n        '    \\tname,\\n' +\n        '    \\treaction,\\n' +\n        '    \\tcreated,\\n' +\n        '    \\tmodified\\n' +\n        '    },\\n' +\n        '    consults {\\n' +\n        '      _id, date, time, doctor, history, diagnosis, plan, findings, created, modified\\n' +\n        '    },\\n' +\n        '    history {\\n' +\n        '      _id, diagnosis, note, isConfidential, date, created, modified\\n' +\n        '    },\\n' +\n        '    results {\\n' +\n        '      _id, lab, labref, test, orderedBy, copies, requested, collected, reported, collectedTime, imported, received, result, isLinked, reviewedBy, isNormal, isLast\\n' +\n        '    },\\n' +\n        '    scripts {\\n' +\n        '      _id, by, name, on, dose, frequency, instructions, repeats, quantity, drugCode, lastPrinted, created, modified\\n' +\n        '    },\\n' +\n        '    scriptHistory {\\n' +\n        '      _id, changed, dose, change, reason, drugCode, name\\n' +\n        '    },\\n' +\n        '    scriptArchive {\\n' +\n        '      _id, medication, dose, scriptNumber, repeats, quantity, approvalCode, drugCode, note, created, modified\\n' +\n        '    },\\n' +\n        '    recalls{\\n' +\n        '      _id, reason, interval, isRecurring, due, isCompleted, created, modified\\n' +\n        '    },\\n' +\n        '    tasks {\\n' +\n        '      _id, by, isUrgent, isCompleted, isRead, title, details, completed, for, created, modified\\n' +\n        '    },\\n' +\n        '    documents {\\n' +\n        '      _id, title, type, from, reviewed, reviewedBy, data, created, modified\\n' +\n        '    },\\n' +\n        '    letters {\\n' +\n        '      _id, creator, isPrinted, isReviewd, from, type, data, to, created, modified\\n' +\n        '    },\\n' +\n        '    vaccinations {\\n' +\n        '      _id, vaccine, on, by, providerNum, batch, expiry, site, shouldSendtoAIR, airCode, created\\n' +\n        '    },\\n' +\n        '    forms {\\n' +\n        '      _id, title, from, category, data, created, modified\\n' +\n        '    },\\n' +\n        '    wcc {\\n' +\n        '      _id,\\n' +\n        '      employer {\\n' +\n        '        name, \\n' +\n        '        contact {\\n' +\n        '          line1, line2, suburb, state, postCode\\n' +\n        '        },\\n' +\n        '        insurer\\n' +\n        '      },\\n' +\n        '      claim {\\n' +\n        '        number, injury, injuryTime, injuryDate, claimDate, mechanism\\n' +\n        '      },\\n' +\n        '      date,time,reviewed, type, diagnosis, comment, treatment, isReturnToNormalDuties, returnToNormalDuties, isRestrictedDuties, restrictedDutiesFrom, restrictedDutiesTo, isNoCapacity, noCapacityFrom, noCapacityTo\\n' +\n        '    },\\n' +\n        '    modifiedDates {\\n' +\n        '      identifiers, warnings, allergies, consults, history, results, scripts, recalls, documents,letters,vaccinations\\n' +\n        '    }\\n' +\n        '  }\\n' +\n        '}'\n\n\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        const restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.clinicConfig,\n                serverURL: '',\n                api: API_Config.clinicConfig,\n                isActive: true,\n                find: false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName: STATE_NAMES.patients,\n                serverURL: '',\n                api: API_Config.patients,\n                isActive: true,\n                idField: '_id',\n                find: true,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: false\n            },\n        ]);\n        const qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([\n            {\n                stateName: STATE_NAMES.patientSearch,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPatientSearchDetails {_id,isDemoOnly,identifiers { legacyId},flags {isInactive,hasWarnings},name {firstname,surname}, warnings {_id, warnings}, contact {    _id,\\n' +\n                        '    owner,\\n' +\n                        '    line1,\\n' +\n                        '    line2,\\n' +\n                        '    suburb\\n' +\n                        '    postcode,\\n' +\n                        '    state,\\n' +\n                        '    country,\\n' +\n                        '    home,\\n' +\n                        '    work,\\n' +\n                        '    mobile,\\n' +\n                        '    nokname,\\n' +\n                        '    nokphone},\\n' +\n                        'lastSeen,\\n' +\n                        'lastSeenBy,\\n' +\n                        'dob,\\n' +\n                        'dod,\\n' +\n                        'gender,\\n' +\n                        'ethnicity,\\n' +\n                        'countryofbirth}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPatientSearchDetails',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointments,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointments {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    create: 'mutation createAppointment($data: AppointmentInput!){addAppointment(appt: $data) {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    destroy: 'mutation deleteAppointment($identifier: String!){deleteAppointment(id: $identifier)}',\n                    update: 'mutation updateAppointment($data: AppointmentInput!){updateAppointment(appt: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointments',\n                    create: 'addAppointment',\n                    destroy: 'deleteAppointment',\n                    update: 'updateAppointment',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTypes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTypes {_id,name,colour,icon,isStatus}}',\n                    create: 'mutation createAppointmentType($data: AppointmentTypeInput!){addAppointmentType(apptType: $data) {_id,name,colour,icon,isStatus}}',\n                    destroy: 'mutation deleteAppointmentType($identifier: String!){deleteAppointmentType(id: $identifier)}',\n                    update: 'mutation updateAppointmentType($data: AppointmentTypeInput!){updateAppointmentType(apptType: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTypes',\n                    create: 'addAppointmentType',\n                    destroy: 'deleteAppointmentType',\n                    update: 'updateAppointmentType',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.providers,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getProviders {_id,name,providerNo,isCurrent}}',\n                    create: 'mutation addProvider($data: ProviderInput!){addProvider(provider: $data) {_id,name,providerNo,isCurrent}}',\n                    destroy: 'mutation deleteProvider($identifier: String!){deleteProvider(id: $identifier)}',\n                    update: 'mutation updateProvider($data: ProviderInput!){updateProvider(provider: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getProviders',\n                    create: 'addProvider',\n                    destroy: 'deleteProvider',\n                    update: 'updateProvider',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.postCodes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPostCodes {_id,suburb,postcode,state}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPostCodes',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getUsers {_id,username,providerNo,isCurrent,isAdmin,isProvider,resetPassword,password}}',\n                    create: 'mutation addUser($data: UserInput!){addUser(user: $data) {_id,username,providerNo,isCurrent,isAdmin,isProvider,resetPassword,password}}',\n                    destroy: '',\n                    update: 'mutation updateUser($data: UserInput!){updateUser(user: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getUsers',\n                    create: 'addUser',\n                    destroy: '',\n                    update: 'updateUser',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTemplates,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTemplates {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    create: 'mutation addAppointmentTemplate($data: AppointmentTemplateInput!){addAppointmentTemplate(template: $data) {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    destroy: 'mutation deleteAppointmentTemplate($identifier: String!){deleteAppointmentTemplate(id: $identifier)}',\n                    update: 'mutation updateAppointmentTemplate($data: AppointmentTemplateInput!){updateAppointmentTemplate(template: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTemplates',\n                    create: 'addAppointmentTemplate',\n                    destroy: 'deleteAppointmentTemplate',\n                    update: 'updateAppointmentTemplate',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.patients,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: Controller.patientQuery,\n                },\n                data: {\n                    findAll: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n        ])\n\n\n        const aggregateSM = new AggregateStateManager(isSameMongo);\n        const memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        const asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n        const asyncQL = new AsyncStateManagerWrapper(aggregateSM, qlSM, isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        //aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.appointments,STATE_NAMES.patientSearch,STATE_NAMES.recentPatientSearches,STATE_NAMES.appointmentTypes, STATE_NAMES.providers,STATE_NAMES.appointmentTemplates,STATE_NAMES.patients], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.postCodes, STATE_NAMES.users, STATE_NAMES.appointments, STATE_NAMES.patientSearch, STATE_NAMES.recentPatientSearches, STATE_NAMES.appointmentTypes, STATE_NAMES.providers, STATE_NAMES.appointmentTemplates], false);\n        //aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.users,STATE_NAMES.clinicConfig], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.clinicConfig, STATE_NAMES.patients], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n        PatientObjectDefinitions.loadPatientDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        const socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            const chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.postCodes);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.providers);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n            this.getStateManager().getStateByName(STATE_NAMES.clinicConfig);\n            this.getStateManager().getStateByName(STATE_NAMES.patientSearch);\n            this.getStateManager().getStateByName(STATE_NAMES.appointments);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getProviderNo(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.providerNo;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in provider is ${result}`);\n        return result;\n    }\n\n    public isProvider(): boolean {\n        let result = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.isProvider;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is a provider? ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        const copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private setupDataObjectDefinitions() {\n        const apptTypeDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.appointmentTypes, 'Appointment Type', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"name\", \"Name\", FieldType.text, true, \"Name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"colour\", \"Colour\", FieldType.colour, true, \"Choose color from below\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"icon\", \"Icon\", FieldType.text, false, \"Font Awesome icon classes\");\n        const statusFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"isStatus\", \"Patient flow status\", FieldType.boolean, false, \"Used by the application to track patient state\");\n        statusFieldDef.displayOnly = true;\n\n        cLogger(`Appointment type data object definition`);\n        cLogger(apptTypeDef);\n\n\n        const userDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.users, 'Users', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"username\", \"Username\", FieldType.text, true, \"Username\");\n        const isCurrentFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isCurrent\", \"Active?\", FieldType.boolean, false, \"Is this a current user?\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isAdmin\", \"Admin?\", FieldType.boolean, false, \"Does the user have admin privilege?\");\n        const isProviderFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isProvider\", \"Is Provider\", FieldType.boolean, false, \"Is the user a provider\");\n        isProviderFieldDef.displayOnly = true;\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"providerNo\", \"Provider Number\", FieldType.text, false, \"Provider Number\");\n        const resetPasswordFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"resetPassword\", \"Reset Password?\", FieldType.boolean, false, \"Reset the users password \");\n        const passwordFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"password\", \"New Password\", FieldType.text, false, \"New password\");\n        cLogger(`Users type data object definition`);\n        cLogger(userDef);\n\n        const generator = new DefaultUserValueGenerator();\n        // setup default values for new user\n        isCurrentFieldDef.generator = {\n            onCreation: true,\n            onModify: false,\n            generator: generator\n        };\n        resetPasswordFieldDef.generator = {\n            onCreation: true,\n            onModify: false,\n            generator: generator\n        };\n        passwordFieldDef.generator = {\n            onCreation: true,\n            onModify: false,\n            generator: generator\n        };\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n}\n\nclass IsProviderDerivedField implements DerivedField {\n    getValue(dataObj: any, field: FieldDefinition, isCreate: boolean): string {\n        let result = 'false';\n        if (dataObj.providerNo) {\n            if (dataObj.providerNo.trim().length > 0) {\n                result = 'true';\n            }\n        }\n        return result;\n    }\n\n}\n\n\n","export function addDurations(duration1: string, duration2: string): string {\n    const durationRegexp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid: boolean = durationRegexp.test(duration1);\n    const duration2Valid: boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components: string[] = duration1.split(':');\n        const duration2Components: string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        const sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0) ? sumHours + ':' : ''}${(sumMinutes < 10) ? '0' + sumMinutes : sumMinutes}:${(sumSeconds < 10) ? '0' + sumSeconds : sumSeconds}`\n    } else {\n        return '00:00';\n    }\n}\n\nexport function computeTimeStringFromStartTimeAndDurationInSeconds(appointmentTime: string, duration: number): string {\n    const time = parseInt(appointmentTime); // HHMMSS as a time\n\n\n    const startTimeHours = Math.floor(time / 10000);\n    const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n    const appointmentDuration = Math.floor(duration / 60);\n\n    let endTimeHours = startTimeHours;\n    let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n    if (endTimeMinutes >= 60) {\n        endTimeMinutes -= 60;\n        endTimeHours += 1; // 24 hour time\n    }\n\n    let timeString = `${endTimeHours}`;\n    if (endTimeHours < 10) timeString = '0' + timeString;\n    if (endTimeMinutes < 10) timeString += '0';\n    timeString += `${endTimeMinutes}`;\n    return timeString;\n}","import debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {DataChangeType, SecurityManager, SocketListener} from \"ui-framework-jps\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const stateObj = message.data;\n        slLogger(stateObj);\n\n        // are we the same user that made the changes?\n        if (message.user === SecurityManager.getInstance().getLoggedInUsername()) {\n            slLogger(`changes made by the current user, no need to do anything`);\n        }\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case DataChangeType.create: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.update: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.delete: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {AppointmentTemplateFilterView} from \"./AppointmentTemplateFilterView\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {ScheduleListener} from \"../helper/ScheduleListener\";\n\n\nconst logger = debug('appointment-template-controller');\n\n\ntype AppointmentTemplateDataElements = {\n    oldEvent: any | null,\n    tempEvent: any,\n    currentFirstDate: number,\n    currentFirstDateDayNumber: number,\n    currentLastDate: number\n}\n\nexport class AppointmentTemplateController implements StateChangeListener, ScheduleListener {\n    private static _instance: AppointmentTemplateController;\n    private dataElements: AppointmentTemplateDataElements = {\n        oldEvent: null,\n        tempEvent: {},\n        currentFirstDate: 0,\n        currentLastDate: 0,\n        currentFirstDateDayNumber: 1\n    };\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTemplates, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n\n    }\n\n    public static getInstance(): AppointmentTemplateController {\n        if (!(AppointmentTemplateController._instance)) {\n            AppointmentTemplateController._instance = new AppointmentTemplateController();\n        }\n        return AppointmentTemplateController._instance;\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {\n    }\n\n    loadedProviders(providers: any[]): void {\n        AppointmentTemplateFilterView.getInstance().populateProviders(providers);\n        AppointmentTemplateView.getInstance().setupProviders(providers);\n    }\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        AppointmentTemplateView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {\n        AppointmentTemplateDetailModal.getInstance().setupAppointmentTypeDropDown(appointmentTypes);\n    }\n\n    public getModel(): AppointmentTemplateDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentTemplateView.getInstance().onDocumentLoaded();\n        AppointmentTemplateFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    public getEventForAppointmentTemplate(template: any): any {\n        logger(`Creating event for appointment template with first day number of ${this.dataElements.currentFirstDateDayNumber}`);\n        logger(template);\n        if (template.day < this.dataElements.currentFirstDateDayNumber) return null;\n        const loadDate = this.dataElements.currentFirstDate + (template.day - this.dataElements.currentFirstDateDayNumber);\n\n\n        const result = AppointmentControllerHelper.getInstance().getEventForAppointmentTemplateForDate(loadDate, template.day, template);\n        logger('Converted to template event');\n        logger(result);\n\n        return result;\n\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        this.dataElements.currentFirstDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        this.dataElements.currentFirstDateDayNumber = parseInt(moment(event.firstDay).format('d'));\n        this.dataElements.currentLastDate = parseInt(moment(event.lastDay).format('YYYYMMDD')) - 1;\n        logger(`Need to load date range (${this.dataElements.currentFirstDate},${this.dataElements.currentLastDate}) starting with day ${this.dataElements.currentFirstDateDayNumber}`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n        const results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            const result = this.getEventForAppointmentTemplate(appointment);\n            if (result) results.push(result);\n        });\n\n        inst.setEvents(results);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Template Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case (STATE_NAMES.appointmentTemplates): {\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n                const results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    const result = this.getEventForAppointmentTemplate(appointment);\n                    if (result) results.push(result);\n                });\n\n                AppointmentTemplateView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment Template inserted by another user');\n            logger(appointment);\n\n            const result = this.getEventForAppointmentTemplate(appointment);\n            if (result) {\n                AppointmentTemplateView.getInstance().getCalender().removeEvent(result);\n                AppointmentTemplateView.getInstance().getCalender().addEvent(result);\n                this.refreshDisplay();\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointmentTemplates) {\n            logger('Appointment Template deleted by another user');\n            logger(appointment);\n\n            AppointmentTemplateView.getInstance().getCalender().removeEvent([appointment._id]);\n            this.refreshDisplay();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            const result = this.getEventForAppointmentTemplate(appointment);\n            if (result) {\n                AppointmentTemplateView.getInstance().getCalender().removeEvent(result);\n                AppointmentTemplateView.getInstance().getCalender().addEvent(result);\n                this.refreshDisplay();\n            }\n        }\n    }\n\n    refreshDisplay(): void {\n        AppointmentTemplateView.getInstance().getCalender().refresh();\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n\n}\n","import {STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {AppointmentController} from \"../appointments/AppointmentController\";\n\nconst logger = debug('appointment-template-detail-view');\n\ntype AppointmentTemplateDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    deleteButton: HTMLButtonElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n}\n\n\nexport class AppointmentTemplateDetailModal {\n\n    private static _instance: AppointmentTemplateDetailModal;\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n    private patients: any[];\n    private viewElements: AppointmentTemplateDetailViewElements = {\n        popup: null,\n        range: null,\n        deleteButton: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        providersDropdown: null\n    }\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    public static getInstance(): AppointmentTemplateDetailModal {\n        if (!(AppointmentTemplateDetailModal._instance)) {\n            AppointmentTemplateDetailModal._instance = new AppointmentTemplateDetailModal();\n        }\n        return AppointmentTemplateDetailModal._instance;\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete-template');\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById('event-appt-type-template');\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-template-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n\n        this.viewElements.range = datepicker('#event-date-template', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input-template',\n            endInput: '#end-input-template',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentTemplateDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                const date = args.value;\n                // update event's start date\n                AppointmentTemplateController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentTemplateController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointment templates');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#event-appt-type-template', {\n            data: appointmentTypes,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider-template', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentTemplateController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointmentTemplate(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    }\n                },\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        const date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        const mobiId = AppointmentTemplateController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        const appointmentId = v4();\n                        // get the colour for the event type\n                        const colour = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentController.getInstance().getModel().tempEvent.type);\n\n                        const createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        const updatedEvent = {\n                            id: appointmentId,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            editable: true,\n                            resource: AppointmentTemplateController.getInstance().getModel().tempEvent.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            type: AppointmentTemplateController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentTemplateController.getInstance().getModel().tempEvent.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n\n                        // navigate the calendar to the correct view\n                        AppointmentTemplateView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n        this.viewElements.range.setVal([AppointmentTemplateController.getInstance().getModel().tempEvent.start, AppointmentTemplateController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentTemplateController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointmentTemplate(args: any) {\n        const ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(AppointmentTemplateController.getInstance().getModel().oldEvent);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    }\n                },\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        const date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        const createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        const updatedEvent = {\n                            id: ev.id,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            editable: true,\n                            resource: ev.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n\n\n                        // @ts-ignore\n                        updatedEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentTemplate(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentTemplateView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(AppointmentTemplateController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentTemplateDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            const deletedEvent = AppointmentTemplateController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n    }\n\n}\n","import {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {Checkbox, enhance, Input, registerComponent} from \"@mobiscroll/javascript\";\n\nexport class AppointmentTemplateFilterView {\n    private static _instance: AppointmentTemplateFilterView;\n    private providersEl: HTMLDivElement | null;\n\n    public static getInstance(): AppointmentTemplateFilterView {\n        if (!(AppointmentTemplateFilterView._instance)) {\n            AppointmentTemplateFilterView._instance = new AppointmentTemplateFilterView();\n        }\n        return AppointmentTemplateFilterView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providerFilter');\n        registerComponent(Checkbox);\n        registerComponent(Input);\n    }\n\n    public populateProviders(providers: any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider: any) => {\n                const labelEl = document.createElement('label');\n                const inputEl = document.createElement('input');\n                inputEl.setAttribute('type', 'checkbox');\n                inputEl.setAttribute('value', provider.name);\n                inputEl.setAttribute(\"checked\", '');\n                inputEl.setAttribute(\"mbsc-checkbox\", '');\n                inputEl.setAttribute('data-label', provider.name);\n                inputEl.classList.add('template-provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            enhance(this.providersEl);\n\n\n            document.querySelectorAll('.template-provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    const checkboxList = document.querySelectorAll('.template-provider-checkbox');\n                    const selected: any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        const checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id: checkbox.value, name: checkbox.value});\n                        }\n                    }\n\n                    AppointmentTemplateView.getInstance().getCalender().setOptions({\n                        resources: selected\n                    });\n                });\n            });\n\n        }\n\n    }\n\n}","import {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport {eventcalendar, Eventcalendar, snackbar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-template-view');\n\ntype AppointmentTemplateViewElements = {\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentTemplateView {\n    private static _instance: AppointmentTemplateView;\n    private viewElements: AppointmentTemplateViewElements = {\n        calendar: null,\n    }\n\n    private constructor() {\n    }\n\n    public static getInstance(): AppointmentTemplateView {\n        if (!(AppointmentTemplateView._instance)) {\n            AppointmentTemplateView._instance = new AppointmentTemplateView();\n        }\n        return AppointmentTemplateView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n\n        AppointmentTemplateDetailModal.getInstance().onDocumentLoaded();\n\n\n        const options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n        options.view.schedule.type = 'week';\n\n\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentTemplateController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentTemplateDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentTemplateController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentTemplateDetailModal.getInstance().startCreateAppointmentTemplate(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentTemplateView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            AppointmentTemplateController.getInstance().getModel().oldEvent = Object.assign({}, args.event);\n            AppointmentTemplateController.getInstance().getModel().tempEvent = args.event;\n\n            if (!AppointmentTemplateDetailModal.getInstance().isVisible()) {\n                logger(args);\n                AppointmentTemplateDetailModal.getInstance().updateAppointmentTemplate(args);\n            }\n        }\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentTemplateRendering;\n        options.onEventUpdated = (args: any) => {\n\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(args.event),\n                false);\n        }\n\n        if (AppointmentControllerHelper.getInstance().haveProvidersLoaded()) {\n            const providers: any[] = [];\n\n            AppointmentControllerHelper.getInstance().getProviders().forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById('templateDetail'), options);\n    }\n\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n\n            clinicConfig.view.schedule.type = 'week';\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n        }\n        AppointmentTemplateDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n\n    public setupProviders(providersCollection: any[]) {\n        const providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentTemplateDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n\n}\n","import {AppointmentTypesSidebarContainers, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BootstrapTableConfigHelper,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    DataObjectDefinition,\n    DisplayOrder,\n    isSameMongo,\n    KeyType,\n    Modifier,\n    ObjectDefinitionRegistry,\n    StateManager,\n    TableUIConfig,\n    TabularViewRendererUsingContext,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('appointment-types-view');\n\nexport class AppointmentTypesCollectionView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: AppointmentTypesSidebarContainers.list,\n            dataSourceId: VIEW_NAME.appointmentTypes,\n        },\n        resultsElement: {\n            type: 'tr',\n            attributes: [{name: 'href', value: '#'}],\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'table-secondary',\n            active: 'table-success',\n            warning: 'table-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.icon) {\n                    return [item.icon];\n                }\n                return [];\n            },\n        },\n        sorter: AppointmentTypesCollectionView.sortAppointmentTypes\n    };\n\n    constructor(stateManager: StateManager) {\n        super(AppointmentTypesCollectionView.DOMConfig, stateManager, STATE_NAMES.appointmentTypes);\n\n        const apptTypeDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.appointmentTypes);\n        if (apptTypeDef) {\n            const displayOrders: DisplayOrder[] = [];\n            displayOrders.push({fieldId: 'name', displayOrder: 1});\n            displayOrders.push({fieldId: 'colour', displayOrder: 2});\n            displayOrders.push({fieldId: 'icon', displayOrder: 3});\n            displayOrders.push({fieldId: 'isStatus', displayOrder: 4});\n            const tableUIConfig: TableUIConfig = BootstrapTableConfigHelper.getInstance().generateTableConfig(apptTypeDef, displayOrders, 1, false, true);\n            // tableUIConfig.headerColumns[0].element.classes += ' text-center';\n            tableUIConfig.headerColumns[1].element.classes += ' text-center';\n            tableUIConfig.headerColumns[2].element.classes += ' text-center';\n            tableUIConfig.headerColumns[3].element.classes += ' text-center';\n\n            //this.renderer = new TabularItemViewRenderer(this, this, tableUIConfig, displayOrders, BootstrapTableRowConfigHelper.getInstance(), new DefaultFieldPermissionChecker());\n            this.renderer = new TabularViewRendererUsingContext(this, this, tableUIConfig);\n            //this.renderer = new ListViewRendererUsingContext(this,this);\n            this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n            this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n            this.getItemId = this.getItemId.bind(this);\n\n            ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.appointmentTypes, 'Appointment Types');\n\n        }\n    }\n\n    private static sortAppointmentTypes(item1: any, item2: any) {\n        let result = -1;\n        if (item1.name > item2.name) result = 1;\n        return result;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += `<strong style=\"text-colour:${item.colour}\">` + item.name + '</strong> ';\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        return false;\n    }\n\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.isStatus) {\n            return Modifier.inactive;\n        }\n        return Modifier.normal\n    }\n\n\n}\n\n","import Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {\n    BasicObjectDefinitionFactory,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DetailView,\n    DetailViewImplementation,\n    Field,\n    FormDetailViewRenderer,\n    LinkedCollectionDetailController,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer,\n    ViewFieldPermissionChecker\n} from \"ui-framework-jps\";\nimport {AppointmentTypesSidebarContainers, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport {AppointmentTypesCollectionView} from \"./AppointmentTypesCollectionView\";\nimport {BootstrapFormConfigHelper} from \"ui-framework-jps/dist/framework/ui/helper/BootstrapFormConfigHelper\";\n\n\nconst logger = debug('appointment-types-composite-view');\n\nexport class ApptTypePermissionChecker implements ViewFieldPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        let result = true;\n        if (dataObj.isStatus) {\n            if (field.getFieldDefinition().id === 'name') {\n                result = false; // cannot edit the names of the default status items\n            }\n        }\n        return result;\n    }\n}\n\nexport class AppointmentTypesCompositeView implements DataObjectListener {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const apptTypes = new AppointmentTypesCollectionView(Controller.getInstance().getStateManager());\n        this.sideBar.addView(apptTypes, {containerId: AppointmentTypesSidebarContainers.list});\n\n        const apptTypeDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.appointmentTypes);\n\n        if (apptTypeDefinition) {\n            const apptTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(AppointmentTypesSidebarContainers.detail, apptTypeDefinition, new ApptTypePermissionChecker(), BootstrapFormConfigHelper.getInstance(), false);\n\n            const apptTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: AppointmentTypesSidebarContainers.detail,\n                    dataSourceId: VIEW_NAME.appointmentTypeDetail\n                }, apptTypeDetailRenderer);\n            const viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.appointmentTypes, apptTypes);\n            viewLinker.addLinkedDetailView(apptTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n\n            const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(apptTypeDefinition);\n            apptTypeDetailView.initialise(startingDisplayOrder, false, true);\n\n            // setup the event handling for the create new exercise type button\n            const createApptType = <HTMLButtonElement>document.getElementById('addNewAppointmentType');\n            logger(`Setting up button for creating appointment types`);\n            logger(createApptType);\n            if (createApptType) {\n                createApptType.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling create new appointment type`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling delete appointment type - already managed by stateful collection view`);\n                logger(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling update appointment type`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n}\n","import {AppointmentController} from \"./AppointmentController\";\nimport {datepicker, Datepicker, eventcalendar, Eventcalendar, snackbar, toast} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES, VIEW_CONTAINER} from \"../AppTypes\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {PatientController} from \"../patients/PatientController\";\n\nconst logger = debug('appointment-view');\n\ntype AppointmentViewElements = {\n    datePicker: Datepicker | null,\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentBookView {\n    private static _instance: AppointmentBookView;\n    private viewElements: AppointmentViewElements = {\n        datePicker: null,\n        calendar: null,\n    }\n\n    private constructor() {\n    }\n\n    public static getInstance(): AppointmentBookView {\n        if (!(AppointmentBookView._instance)) {\n            AppointmentBookView._instance = new AppointmentBookView();\n        }\n        return AppointmentBookView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.setupDatePicker();\n        AppointmentDetailModal.getInstance().onDocumentLoaded();\n\n\n        const options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n\n\n        options.onSelectedDateChange = (event: any, inst: any) => {\n            AppointmentBookView.getInstance().viewElements.datePicker?.setVal(event.date);\n        };\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentDetailModal.getInstance().startCreateAppointment(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentBookView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (event: any,inst:any) => {\n            logger(event.event);\n            if (event.event.editable) {\n                if (event.domEvent.target.classList.contains('md-custom-event-title')) {\n                    if (event.event.patientId) PatientController.getInstance().openPatientRecordWithPatientId(event.event.patientId);\n                }\n                else {\n                    AppointmentController.getInstance().getModel().oldEvent = Object.assign({}, event.event);\n                    AppointmentController.getInstance().getModel().tempEvent = event.event;\n\n                    if (!AppointmentDetailModal.getInstance().isVisible()) {\n                        logger(event);\n                        AppointmentDetailModal.getInstance().updateAppointment(event);\n                    }\n                }\n            }\n        }\n        options.onEventDoubleClick = (args: any) => {\n            logger(args.event);\n            if (args.event.patientId) {\n                PatientController.getInstance().openPatientRecordWithPatientId(args.event.patientId);\n            }\n\n        }\n\n\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentRendering;\n        options.onEventUpdated = (args: any) => {\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(args.event),\n                false);\n\n        }\n\n        if (AppointmentControllerHelper.getInstance().haveProvidersLoaded()) {\n            const providers: any[] = [];\n\n            AppointmentControllerHelper.getInstance().getProviders().forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById(VIEW_CONTAINER.calendarDetail), options);\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                min: moment().subtract(clinicConfig.min, \"months\"),\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n\n\n        }\n        AppointmentDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n    public setupProviders(providersCollection: any[]) {\n        const providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n    protected setupDatePicker() {\n        // @ts-ignore\n        this.viewElements.datePicker = datepicker(document.getElementById(VIEW_CONTAINER.calendarControl), {\n            controls: ['calendar'],\n            display: \"inline\",\n            dateFormat: 'YYYYMMDD',\n            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            showWeekNumbers: true,\n            onChange: (event: any, inst: any) => {\n                AppointmentBookView.getInstance().viewElements.calendar?.navigate(event.value);\n            }\n        });\n    }\n\n\n}\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {AppointmentFilterView} from \"./AppointmentFilterView\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\nimport {v4} from \"uuid\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {ScheduleListener} from \"../helper/ScheduleListener\";\n\n\nconst logger = debug('appointment-controller');\n\n\ntype AppointmentDataElements = {\n    oldEvent: any | null,\n    tempEvent: any,\n    loadDate: number,\n    loadDateFinish: number,\n}\n\nexport class AppointmentController implements StateChangeListener, ScheduleListener {\n\n    private static _instance: AppointmentController;\n    private dataElements: AppointmentDataElements = {\n        oldEvent: null,\n        tempEvent: {},\n        loadDate: 0,\n        loadDateFinish: 0\n    };\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointments, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n    }\n\n    public static getInstance(): AppointmentController {\n        if (!(AppointmentController._instance)) {\n            AppointmentController._instance = new AppointmentController();\n        }\n        return AppointmentController._instance;\n    }\n\n    public getModel(): AppointmentDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentBookView.getInstance().onDocumentLoaded();\n        AppointmentFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        const today = parseInt(moment().format('YYYYMMDD'));\n        this.dataElements.loadDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        const loadDateDayNumber = parseInt(moment(event.firstDay).format('d'));\n        this.dataElements.loadDateFinish = parseInt(moment(event.lastDay).format('YYYYMMDD'));\n        logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        const results: any[] = [];\n        const appointmentsForTheDay: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                appointmentsForTheDay.push(appointment);\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                results.push(result);\n            }\n\n        });\n\n\n        inst.setEvents(results);\n\n        // add template appointments as events where an appointment doesn't already exist in the same time slot, they will need unique _ids\n        if (this.dataElements.loadDate >= today) this.addTemplateEvents(this.dataElements.loadDate, loadDateDayNumber, appointmentsForTheDay);\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n\n            case (STATE_NAMES.appointments): {\n\n                this.dataElements.loadDate = parseInt(moment().format('YYYYMMDD'));\n                this.dataElements.loadDateFinish = parseInt(moment().add(1, 'days').format('YYYYMMDD'));\n                logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n                const results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                        logger('Found appointment');\n                        logger(appointment);\n\n                        const result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n\n\n                        logger('Converted to event');\n                        logger(result);\n                        results.push(result);\n                    }\n\n                });\n\n                AppointmentBookView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment inserted by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                if (result) {\n                    AppointmentBookView.getInstance().getCalender().removeEvent(result);\n                    AppointmentBookView.getInstance().getCalender().addEvent(result);\n                    this.refreshDisplay();\n                }\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointments) {\n            logger('Appointment deleted by another user');\n            logger(appointment);\n\n            AppointmentBookView.getInstance().getCalender().removeEvent([appointment._id]);\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                if (result) {\n                    AppointmentBookView.getInstance().getCalender().removeEvent(result);\n                    AppointmentBookView.getInstance().getCalender().addEvent(result);\n                    this.refreshDisplay();\n                }\n            }\n        }\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {\n        AppointmentDetailModal.getInstance().setupAppointmentTypeDropDown(appointmentTypes);\n        const appointments = AppointmentBookView.getInstance().getCalender().getEvents();\n        appointments.forEach((appointment) => {\n            appointment.color = AppointmentControllerHelper.getInstance().getColourForAppointment(appointment);\n        });\n        AppointmentBookView.getInstance().getCalender().updateEvent(appointments);\n    }\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        AppointmentBookView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {\n        AppointmentDetailModal.getInstance().setupPatientSearchDropDown(patientSearch);\n    }\n\n    loadedProviders(providers: any[]): void {\n        AppointmentFilterView.getInstance().populateProviders(providers);\n        AppointmentBookView.getInstance().setupProviders(providers);\n    }\n\n    private addTemplateEvents(loadDate: number, day: number, currentAppointments: any[]) {\n        logger('Loading templated events for day ' + day);\n        const appointmentTemplates = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n        appointmentTemplates.forEach((template: any) => {\n            logger(template);\n            if (template.day === day) { // only template appointments for the day number\n                // is there already an appointment on display that matches the template?\n                const foundIndex = currentAppointments.findIndex((appt) => appt.time === template.time);\n                if (foundIndex < 0) {\n                    logger(`appointment for time ${template.time} not found, creating new appointment`)\n                    // don't already have an appointment for that time\n                    const templatedAppt = AppointmentControllerHelper.getInstance().getEventForAppointmentTemplateForDate(loadDate, day, template);\n                    templatedAppt.id = v4();\n                    templatedAppt.title = '';\n                    templatedAppt.description = '';\n                    templatedAppt.patientId = '';\n                    templatedAppt.isDNA = false;\n                    templatedAppt.isCancelled = false;\n                    templatedAppt.readyForBilling = false;\n                    templatedAppt.isBilled = false;\n                    templatedAppt.isDNA = false;\n                    templatedAppt.billingItems = '';\n                    templatedAppt.arrivalTime = '';\n                    templatedAppt.color = AppointmentControllerHelper.getInstance().getColourForAppointment(templatedAppt);\n\n                    logger(templatedAppt);\n\n                    // add the templated appointment to the persistence\n                    Controller.getInstance().getStateManager().addNewItemToState(\n                        STATE_NAMES.appointments,\n                        AppointmentControllerHelper.getInstance().getAppointmentFromEvent(templatedAppt),\n                        false);\n                    AppointmentBookView.getInstance().getCalender().addEvent(templatedAppt);\n                }\n            }\n        });\n    }\n\n    refreshDisplay(): void {\n\n        //AppointmentBookView.getInstance().getCalender().refresh();\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n\n}\n","import {SELECT, STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, getInst, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentController} from \"./AppointmentController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-detail-view');\n\ntype AppointmentDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    titleInput: HTMLInputElement | null,\n    descriptionTextarea: HTMLTextAreaElement | null,\n    deleteButton: HTMLButtonElement | null,\n    patientArrivedButton: HTMLButtonElement | null,\n    patientCancelledButton: HTMLButtonElement | null,\n    patientDNAButton: HTMLButtonElement | null,\n    readyForBillingButton: HTMLButtonElement | null,\n    billingCompleteButton: HTMLButtonElement | null,\n    patientSearchEl: HTMLSelectElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    patientSearchDropdown: any | null\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n    warningsEl: HTMLTextAreaElement | null\n}\n\n\nexport class AppointmentDetailModal {\n\n    private static _instance: AppointmentDetailModal;\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n    private patients: any[];\n    private viewElements: AppointmentDetailViewElements = {\n        popup: null,\n        range: null,\n        titleInput: null,\n        descriptionTextarea: null,\n        deleteButton: null,\n        patientArrivedButton: null,\n        patientCancelledButton: null,\n        patientDNAButton: null,\n        readyForBillingButton: null,\n        billingCompleteButton: null,\n        patientSearchEl: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        patientSearchDropdown: null,\n        providersDropdown: null,\n        warningsEl: null\n    }\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    public static getInstance(): AppointmentDetailModal {\n        if (!(AppointmentDetailModal._instance)) {\n            AppointmentDetailModal._instance = new AppointmentDetailModal();\n        }\n        return AppointmentDetailModal._instance;\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.titleInput = <HTMLInputElement>document.getElementById('event-title');\n        this.viewElements.descriptionTextarea = <HTMLTextAreaElement>document.getElementById('event-desc');\n        this.viewElements.patientArrivedButton = <HTMLButtonElement>document.getElementById('event-arrived');\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete');\n        this.viewElements.patientCancelledButton = <HTMLButtonElement>document.getElementById('event-cancelled');\n        this.viewElements.patientDNAButton = <HTMLButtonElement>document.getElementById('event-dna');\n        this.viewElements.readyForBillingButton = <HTMLButtonElement>document.getElementById('event-readyforbilling');\n        this.viewElements.billingCompleteButton = <HTMLButtonElement>document.getElementById('event-billingcompleted');\n\n        this.viewElements.patientSearchEl = <HTMLSelectElement>document.getElementById(SELECT.patientSearch);\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById(SELECT.appointmentType);\n\n        this.viewElements.warningsEl = <HTMLTextAreaElement>document.getElementById(\"patient-warning\");\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n        this.viewElements.titleInput.addEventListener('input', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.title = ev.target.value;\n        });\n\n        this.viewElements.descriptionTextarea.addEventListener('change', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.description = ev.target.value;\n        });\n\n        this.viewElements.range = datepicker('#event-date', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input',\n            endInput: '#end-input',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                const date = args.value;\n                // update event's start date\n                AppointmentController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointments');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#' + SELECT.appointmentType, {\n            data: appointmentTypes,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointment(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.patientCancelledButton.style.display = 'none';\n        this.viewElements.patientDNAButton.style.display = 'none';\n        this.viewElements.patientArrivedButton.style.display = 'none';\n        this.viewElements.readyForBillingButton.style.display = 'none';\n        this.viewElements.billingCompleteButton.style.display = 'none';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentBookView.getInstance().getCalender().removeEvent(AppointmentController.getInstance().getModel().tempEvent);\n                        AppointmentDetailModal.getInstance().close();\n                    }\n                },\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        const date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        const mobiId = AppointmentController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        const appointmentId = v4();\n                        // get the colour for the event type\n                        const colour = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentController.getInstance().getModel().tempEvent.type);\n\n                        const createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        const updatedEvent = {\n                            id: appointmentId,\n                            title: getInst<any>(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst<any>(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            patientId: AppointmentController.getInstance().getModel().tempEvent.patientId,\n                            editable: true,\n                            resource: AppointmentController.getInstance().getModel().tempEvent.resource,\n                            isDNA: false,\n                            isCancelled: false,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: AppointmentController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentController.getInstance().getModel().tempEvent.provider\n                        };\n\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentBookView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentBookView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n\n                        // navigate the calendar to the correct view\n                        AppointmentBookView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = AppointmentController.getInstance().getModel().tempEvent.title;\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = '';\n\n        this.viewElements.range.setVal([AppointmentController.getInstance().getModel().tempEvent.start, AppointmentController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentController.getInstance().getModel().tempEvent.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.patientSearchDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointment(args: any) {\n        const ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.patientArrivedButton.style.display = 'block';\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.patientCancelledButton.style.display = 'block';\n        this.viewElements.patientDNAButton.style.display = 'block';\n        this.viewElements.readyForBillingButton.style.display = 'block';\n        this.viewElements.billingCompleteButton.style.display = 'block';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentBookView.getInstance().getCalender().updateEvent(AppointmentController.getInstance().getModel().oldEvent);\n                        AppointmentDetailModal.getInstance().close();\n                    }\n                },\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        const date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        const createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        const updatedEvent = {\n                            id: ev.id,\n                            title: getInst<any>(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst<any>(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            patientId: ev.patientId,\n                            editable: true,\n                            resource: ev.resource,\n                            isDNA: ev.isDNA,\n                            isCancelled: ev.isCancelled,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n                        // @ts-ignore\n                        updatedEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentBookView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentBookView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = ev.title || '';\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = ev.description || '';\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.patientSearchDropdown.setVal(ev.patientId);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        const warningsText = this.getPatientWarnings(ev.patientId);\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    public setupPatientSearchDropDown(patientsCollection: any[]) {\n        this.patients = [];\n\n        patientsCollection.forEach((patient: any) => {\n            this.patients.push({text: `${patient.name.surname}, ${patient.name.firstname}`, value: patient._id});\n        });\n\n        // add the patient search values to the data of the select dropdown\n        //\n        this.viewElements.patientSearchDropdown = select('#' + SELECT.patientSearch, {\n            filter: true,\n            data: AppointmentDetailModal.getInstance().patients,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.titleInput).value = event.valueText;\n\n                const warningsText = this.getPatientWarnings(event.value);\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n                AppointmentController.getInstance().getModel().tempEvent.patientId = event.value;\n                AppointmentController.getInstance().getModel().tempEvent.warnings = warningsText;\n            }\n        });\n\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentBookView.getInstance().getCalender().removeEvent(AppointmentController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            const deletedEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentBookView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n        this.viewElements.patientCancelledButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            const originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            const originalType = originalEvent.type;\n            const originalNote = originalEvent.note;\n\n            originalEvent.isCancelled = true;\n            originalEvent.type = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.note = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isCancelled = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Cancelled'\n            });\n        });\n\n        this.viewElements.patientArrivedButton.addEventListener('click', function () {\n            // update the event to arrived\n            // save a local reference to the deleted event\n            const originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            originalEvent.arrivalTime = moment().format('HHmmss');\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.arrivalTime = '';\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Arrived'\n            });\n        });\n\n        this.viewElements.patientDNAButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            const originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n            const originalNote = originalEvent.note;\n            const originalType = originalEvent.type;\n\n            originalEvent.isDNA = true;\n            originalEvent.type = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.note = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isDNA = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient DNA'\n            });\n        });\n        this.viewElements.readyForBillingButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            const originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.readyForBilling = true;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.readyForBilling = false;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Ready For Billing'\n            });\n        });\n        this.viewElements.billingCompleteButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            const originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.isBilled = true;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isBilled = false;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Billing Complete'\n            });\n        });\n    }\n\n    private getPatientWarnings(patientId: string) {\n        const patientBasicDetails: any = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: patientId});\n        let warningsText = '';\n        if (patientBasicDetails && patientBasicDetails.flags) {\n            if (patientBasicDetails.flags.hasWarnings) {\n                patientBasicDetails.warnings.warnings.forEach((warning: any) => {\n                    warningsText += warning + '\\r\\n';\n                });\n                logger('Patient has warnings');\n                logger(patientBasicDetails);\n                logger(warningsText);\n            }\n\n        }\n        return warningsText;\n\n    }\n\n\n}\n","import {AppointmentBookView} from \"./AppointmentBookView\";\n\nexport class AppointmentFilterView {\n    private static _instance: AppointmentFilterView;\n    private providersEl: HTMLDivElement | null;\n    private calendarFilterEl: HTMLDivElement | null;\n\n    public static getInstance(): AppointmentFilterView {\n        if (!(AppointmentFilterView._instance)) {\n            AppointmentFilterView._instance = new AppointmentFilterView();\n        }\n        return AppointmentFilterView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providers');\n        this.calendarFilterEl = <HTMLDivElement>document.getElementById('calendarFilter');\n    }\n\n    public populateProviders(providers: any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider: any) => {\n                const labelEl = document.createElement('label');\n                const inputEl = document.createElement('input');\n                inputEl.setAttribute('type', 'checkbox');\n                inputEl.setAttribute('value', provider.name);\n                inputEl.setAttribute(\"checked\", '');\n                inputEl.setAttribute(\"mbsc-checkbox\", '');\n                inputEl.setAttribute('data-label', provider.name);\n                inputEl.classList.add('provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            // @ts-ignore\n            mobiscroll5.enhance(this.providersEl);\n            // @ts-ignore\n            mobiscroll5.enhance(this.calendarFilterEl);\n\n\n            document.querySelectorAll('.provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    const checkboxList = document.querySelectorAll('.provider-checkbox');\n                    const selected: any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        const checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id: checkbox.value, name: checkbox.value});\n                        }\n                    }\n\n\n                    AppointmentBookView.getInstance().getCalender().setOptions({\n                        resources: selected\n                    });\n                });\n            });\n\n            // document.querySelectorAll('.md-view-change').forEach(function (elm) {\n            //     elm.addEventListener('change', function (ev) {\n            //\n            //         let config = {...AppointmentTemplateController.getInstance().getModel().clinicConfig};\n            //          config.view.schedule.type = ev.target.value;\n            //\n            //         let options = {\n            //             //clickToCreate: config.clickToCreate,\n            //             //dragTimeStep: config.dragTimeStep,\n            //             //dragToCreate: config.dragToCreate,\n            //             //dragToMove: config.dragToMove,\n            //             //dragToResize: config.dragToResize,\n            //             //min: moment().subtract(config.min, \"months\"),\n            //             //controls: config.controls,\n            //             //showControls: config.showControls,\n            //             view: {\n            //                 schedule: {\n            //                     type: ev.target.value,\n            //                     startTime: config.view.schedule.startTime,\n            //                     endTime: config.view.schedule.endTime,\n            //                     timeCellStep:10,\n            //                     timeLabelStep:60\n            //                 }\n            //             },\n            //             //invalidateEvent: config.invalidateEvent,\n            //             //invalid: config.invalid,\n            //         }\n            //\n            //         console.log(options);\n            //\n            //         AppointmentTemplateView.getInstance().getCalender().setOptions(options);\n            //\n            //     });\n            // });\n\n\n        }\n\n    }\n\n}\n","import debug from 'debug';\nimport {\n    ChatEventListener,\n    ChatLog,\n    ChatManager,\n    CollectionView,\n    CollectionViewListener,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    Invitation,\n    Message,\n    Modifier,\n    NotificationController,\n    Priority,\n    STATE_NAMES,\n    StateChangeListener,\n    StateManager,\n    View,\n    VIEW_NAME,\n    ViewDOMConfig\n} from \"ui-framework-jps\";\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {SimpleAttachment} from \"ui-framework-jps/dist/framework/socket/Types\";\nimport moment from \"moment\";\n\nimport {DRAGGABLE as APP_DRAGGABLE, STATE_NAMES as APP_STATE_NAMES} from '../AppTypes'\nimport Controller from \"../Controller\";\nimport {AttachmentListener} from \"./AttachmentListener\";\n\n\nconst logger = debug('clinic-chat-detail-view');\n\nexport class ClinicChatDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static _instance: ClinicChatDetailView;\n    private static newFormId = \"newMessage\";\n    private static commentId = \"message\";\n    private static submitCommentId = \"submitMessage\";\n    private static chatLogId = 'chatLog';\n    private static chatLogRoomId = 'chatLogRoom';\n    private static priorityId = 'priority';\n    private static clinicChatFastPatientSearch = 'clinicChatFastPatientSearch';\n    // @ts-ignore\n    protected chatRoomDiv: HTMLDivElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLDivElement;\n    // @ts-ignore\n    protected chatForm: HTMLFormElement;\n    // @ts-ignore\n    protected priorityEl: HTMLSelectElement;\n    // @ts-ignore\n    protected commentEl: HTMLInputElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLButtonElement;\n    // @ts-ignore\n    protected fastPatientSearch: HTMLInputElement;\n    protected stateManager: StateManager;\n    protected selectedChatLog: ChatLog | null;\n    protected currentlySelectedPatient: any | null;\n    private listeners: AttachmentListener[] = [];\n\n    private constructor() {\n        this.stateManager = Controller.getInstance().getStateManager();\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handlePatientDrop = this.handlePatientDrop.bind(this);\n        this.handlePatientSelected = this.handlePatientSelected.bind(this);\n        this.handleAttachmentClicked = this.handleAttachmentClicked.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n        this.stateManager.addChangeListenerForName(APP_STATE_NAMES.patientSearch, this);\n    }\n\n    public static getInstance(): ClinicChatDetailView {\n        if (!(ClinicChatDetailView._instance)) {\n            ClinicChatDetailView._instance = new ClinicChatDetailView();\n        }\n        return ClinicChatDetailView._instance;\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ClinicChatDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ClinicChatDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ClinicChatDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ClinicChatDetailView.submitCommentId);\n        // @ts-ignore\n        this.priorityEl = document.getElementById(ClinicChatDetailView.priorityId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ClinicChatDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastPatientSearch = document.getElementById(ClinicChatDetailView.clinicChatFastPatientSearch);\n\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            logger('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handlePatientDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n\n        this.checkCanComment();\n\n        const fastSearchEl = $(this.fastPatientSearch);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.handlePatientSelected);\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            logger(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handlePatientDrop(event: Event) {\n        logger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            logger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === APP_DRAGGABLE.typePatientSummary) {\n                // send the patient as an attachment\n                const roomName = this.selectedChatLog.roomName;\n                const simpleAttachment: SimpleAttachment = {\n                    identifier: draggedObject._id,\n                    type: APP_DRAGGABLE.typePatientSummary,\n                    displayText: `${draggedObject.name.firstname} ${draggedObject.name.surname}`,\n                    iconClasses: 'fas fa-male'\n                }\n                const sentMessage: Message | null = ChatManager.getInstance().sendMessage(roomName, simpleAttachment.displayText, Priority.Normal, simpleAttachment, {});\n                if (sentMessage) {\n                    // add the message to our display\n                    const messageEl = this.addChatMessage(sentMessage);\n                    // scroll to bottom\n                    if (messageEl) browserUtil.scrollSmoothTo(messageEl);\n                }\n\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        logger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`Handling message event`);\n        if (this.selectedChatLog) {\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            const messageContent = this.commentEl.value.trim();\n            this.commentEl.value = '';\n\n            let priority = parseInt(this.priorityEl.value);\n            if (isNaN(priority)) priority = Priority.Normal;\n\n            const simpleAttachment: SimpleAttachment = {identifier: '', type: '', displayText: ''};\n            if (this.currentlySelectedPatient) {\n                simpleAttachment.identifier = this.currentlySelectedPatient._id;\n                simpleAttachment.type = APP_DRAGGABLE.typePatientSummary;\n                simpleAttachment.displayText = `${this.currentlySelectedPatient.name.firstname} ${this.currentlySelectedPatient.name.surname}`;\n                simpleAttachment.iconClasses = 'fas fa-male';\n            }\n\n            const sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, priority, simpleAttachment, {});\n            logger(sentMessage);\n            if (sentMessage) {\n                // add the message to our display\n                const messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                if (messageEl) browserUtil.scrollSmoothTo(messageEl);\n            }\n\n            this.currentlySelectedPatient = null;\n            this.fastPatientSearch.value = '';\n        }\n    }\n\n\n    addChatMessage(message: Message): HTMLElement | null {\n        let chatMessageEl: HTMLElement | null = null;\n\n        // ignore \"join\"/\"exit\" message?\n        if (message.from.trim().length !== 0) {\n            chatMessageEl = document.createElement('div');\n            browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, 'my-message');\n            }\n\n            // create and display a time stamp\n            const messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n            chatMessageEl.appendChild(messageSenderEl);\n            // message content\n            const contentEl = document.createElement('div');\n\n\n            // just a text message\n            let classesTextAppend = '';\n            switch (message.priority) {\n                case Priority.High: {\n                    classesTextAppend = '-high';\n                    break;\n                }\n                case Priority.Urgent: {\n                    classesTextAppend = '-urgent';\n                    break;\n                }\n            }\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, `my-message-content${classesTextAppend}`);\n            } else {\n                browserUtil.addRemoveClasses(contentEl, `message-content${classesTextAppend}`);\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n            this.chatLogDiv.appendChild(chatMessageEl);\n\n\n            // do we have a simple attachement?\n            if (message.simpleAttachment.identifier.trim().length > 0) {\n                chatMessageEl = document.createElement('div');\n                browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n                if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                    browserUtil.addRemoveClasses(chatMessageEl, 'my-message');\n                }\n\n                // message content\n                const contentEl = document.createElement('div');\n\n                const attachment = message.simpleAttachment;\n                // simple attachment - should be a patient summary\n                const attachmentLinkEl = document.createElement('a');\n                browserUtil.addAttributes(attachmentLinkEl, [{\n                    name: 'data-type',\n                    value: `${attachment.type}`\n                }, {name: 'data-id', value: `${attachment.identifier}`}]);\n                let buffer = '';\n                if (attachment.iconClasses) {\n                    buffer += `<i class=\"${attachment.iconClasses}\"></i>`;\n                }\n                buffer += `&nbsp;&nbsp;${attachment.displayText}`;\n                attachmentLinkEl.innerHTML = buffer;\n                if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                    browserUtil.addRemoveClasses(contentEl, `my-message-content-${attachment.type}`);\n                } else {\n                    browserUtil.addRemoveClasses(contentEl, `message-content-${attachment.type}`);\n                }\n                contentEl.appendChild(attachmentLinkEl);\n                attachmentLinkEl.addEventListener('click', this.handleAttachmentClicked);\n                chatMessageEl.appendChild(contentEl);\n                this.chatLogDiv.appendChild(chatMessageEl);\n            }\n\n        }\n\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        logger(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    stateChanged(managerName: string, name: string, newState: any): void {\n        if (name === APP_STATE_NAMES.patientSearch) {\n            logger(`Handling patient search results`);\n            logger(newState);\n            // load the search names into the search field\n            const fastSearchEl = $(this.fastPatientSearch);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: `${item.name.firstname} ${item.name.surname}`,\n                    value: item._id,\n                };\n                fastSearchValues.push(searchValue);\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {\n    }\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    handlePatientSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`Patient ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.value = ui.item.label;\n        this.currentlySelectedPatient = Controller.getInstance().getStateManager().findItemInState(APP_STATE_NAMES.patientSearch, {_id: ui.item.value});\n        logger(this.currentlySelectedPatient);\n    }\n\n    handleAttachmentClicked(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dataType = (<HTMLElement>event.target).getAttribute(\"data-type\");\n        const dataId = (<HTMLElement>event.target).getAttribute(\"data-id\");\n        logger(`Handling attachment clicked of type ${dataType} with identifier ${dataId}`);\n        this.listeners.forEach((listener) => {\n            listener.attachmentClicked(dataType, dataId);\n        });\n\n    }\n\n    public addAttachmentListener(listener: AttachmentListener) {\n        this.listeners.push(listener);\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.fastPatientSearch) this.fastPatientSearch.removeAttribute(\"disabled\");\n            if (this.priorityEl) this.priorityEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastPatientSearch) this.fastPatientSearch.setAttribute(\"disabled\", \"true\");\n            if (this.priorityEl) this.priorityEl.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n}\n\n\n","import debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    ChatEventListener,\n    ChatLog,\n    ChatManager,\n    ChatUserEventListener,\n    CollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ComparisonType,\n    FilterItem,\n    Invitation,\n    isSameRoom,\n    KeyType,\n    ListViewRenderer,\n    MemoryBufferStateManager,\n    Message,\n    Modifier,\n    NotificationController,\n    SecurityManager,\n    STATE_NAMES,\n    View,\n    VIEW_NAME\n} from \"ui-framework-jps\";\nimport Controller from \"../Controller\";\n\n\nconst logger = debug('clinic-chat-list-view');\nconst dLogger = debug('clinic-chat-list-view:detail');\n\nexport class ClinicChatListView extends AbstractStatefulCollectionView implements ChatEventListener, CollectionViewListener, ChatUserEventListener {\n    private static _instance: ClinicChatListView;\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action'\n        },\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-primary mr-1',\n            },\n            secondBadge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-warning mr-1',\n            },\n            thirdBadge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-danger mr-1',\n            },\n            icons: (name: string, item: any) => {\n                const results: string[] = [];\n                if (item.users.length == 2) {\n                    const filter: FilterItem = {\n                        attributeName: 'username',\n                        value: item.users[1],\n                        comparison: ComparisonType.equals,\n                    }\n                    // find the user in the state\n                    const users = Controller.getInstance().getStateManager().findItemsInState(STATE_NAMES.users, [filter]);\n                    dLogger(`Found users with filter`);\n                    dLogger(users);\n                    if (users && users.length > 0) {\n                        const user = users[0];\n                        dLogger(`Getting icons for user`);\n                        dLogger(user);\n                        if (user.isAdmin) {\n                            results.push(\"fas fa-user-cog\");\n                        }\n                        if (user.providerNo.trim().length > 0) {\n                            results.push(\"fas fa-user-md\");\n                        }\n                    }\n                }\n                return results;\n            }\n        },\n        sorter: ClinicChatListView.sort\n    };\n    protected selectedChatLog: ChatLog | null = null;\n    private doNotDisturbEl: HTMLInputElement | null = null;\n\n    private static sort(item1:any, item2:any):number {\n        let result = -1;\n        if (item1.name > item2.name) result = 1;\n        return result;\n    }\n\n    private constructor() {\n        super(ClinicChatListView.DOMConfig, new MemoryBufferStateManager(isSameRoom), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.stateChanged = this.stateChanged.bind(this);\n        this.toggleDoNotDisturb = this.toggleDoNotDisturb.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        NotificationController.getInstance().addUserListener(this);\n\n        // load all users into the list view\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    public static getInstance(): ClinicChatListView {\n        if (!(ClinicChatListView._instance)) {\n            ClinicChatListView._instance = new ClinicChatListView();\n        }\n        return ClinicChatListView._instance;\n    }\n\n    toggleDoNotDisturb(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.doNotDisturbEl) {\n            logger(`Toggling Do Not Disturb ${this.doNotDisturbEl.checked}`)\n            const doNotDisturb = !this.doNotDisturbEl.checked;\n\n            NotificationController.getInstance().setOptions({\n                showNormalPriorityMessageNotifications: doNotDisturb,\n                showHighPriorityMessageNotifications: doNotDisturb,\n                showUrgentPriorityMessageNotifications: true,\n                showNormalPriorityMessageNotificationsInOS: doNotDisturb,\n                showHighPriorityMessageNotificationsInOS: doNotDisturb,\n                showUrgentPriorityMessageNotificationsInOS: true,\n                showInvitationDeclinedNotifications: false,\n                showInvitedNotifications: false,\n                showOfflineMessageNotification: true,\n                showFavouriteUserLoggedInNotification: false,\n                showFavouriteUserLoggedOutNotification: false,\n                showUserJoinLeaveChatNotification: false\n\n            });\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameRoom(item1, item2);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        logger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.doNotDisturbEl = <HTMLInputElement>document.getElementById('doNotDisturb');\n        // if (this.doNotDisturbEl) {\n        //     // @ts-ignore\n        //     mobiscroll5.enhance(this.doNotDisturbEl);\n        // }\n        this.doNotDisturbEl.addEventListener('change', this.toggleDoNotDisturb)\n\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        const chatLog = <ChatLog>item;\n        if (chatLog.users.length > 1) {\n            containerEl.innerHTML = chatLog.users[1] + \"&nbsp;&nbsp;&nbsp;\";\n        } else {\n            containerEl.innerHTML = 'Chat closed by other user';\n        }\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        dLogger('Checking modifiers for item');\n        dLogger(item);\n        let result = Modifier.inactive;\n        if (item.users.length == 2) {\n            // if the user is currently logged out make the item inactive\n            dLogger(`user ${item.users[1]} is logged in? ${ChatManager.getInstance().isUserLoggedIn(item.users[1])}`);\n            if (ChatManager.getInstance().isUserLoggedIn(item.users[1])) {\n                result = Modifier.active;\n            }\n        }\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.normal;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n    selectChatRoom(roomName: string) {\n        const room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadMessages;\n    }\n\n    getSecondaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadHighMessages;\n    }\n\n    getTertiaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadUrgentMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n\n    showRequested(view: View): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any) {\n        logger(`Updating state for ${name}`);\n        logger(newValue);\n        if (name === STATE_NAMES.users) {\n            // load a chat room for each other user\n            newValue.forEach((user: any) => {\n                if (user.username !== SecurityManager.getInstance().getLoggedInUsername()) {\n                    ChatManager.getInstance().addUserToFavouriteList(user.username);\n                    ChatManager.getInstance().startChatWithUser(user.username);\n                }\n            })\n        }\n        if (name === STATE_NAMES.chatLogs) {\n            super.stateChanged(managerName, name, newValue);\n        }\n\n    }\n\n    private updateStateManager() {\n        logger(`Updating state with chat manager`);\n        const newState = ChatManager.getInstance().getChatLogs();\n        logger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs, newState, true);\n    }\n}\n\n","import {ClinicChatListView} from \"./ClinicChatListView\";\nimport {ClinicChatDetailView} from \"./ClinicChatDetailView\";\nimport {SidebarLocation, SidebarPrefs, SidebarViewContainer, StateManager} from \"ui-framework-jps\";\n\nexport class ClinicChatSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'chatSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.right\n    }\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n    private static _instance: ClinicChatSidebar;\n\n    private constructor() {\n        super(ClinicChatSidebar.SidebarPrefs);\n        const chatView = ClinicChatListView.getInstance();\n        this.addView(chatView, {containerId: ClinicChatSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = ClinicChatDetailView.getInstance();\n        this.addView(chatLogView, {containerId: ClinicChatSidebar.SidebarContainers.chatLog});\n        chatView.addEventListener(chatLogView);\n    }\n\n    public static getInstance(): ClinicChatSidebar {\n        if (!(ClinicChatSidebar._instance)) {\n            ClinicChatSidebar._instance = new ClinicChatSidebar();\n        }\n        return ClinicChatSidebar._instance;\n    }\n}\n\n\n","import Controller from \"../Controller\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport {StateChangeListener} from \"ui-framework-jps\";\nimport debug from 'debug';\nimport moment from \"moment\";\nimport {computeTimeStringFromStartTimeAndDurationInSeconds} from \"../DurationFunctions\";\nimport {ScheduleListener} from \"./ScheduleListener\";\n\n\nconst logger = debug('appointment-controller-helper');\n\nexport class AppointmentControllerHelper implements StateChangeListener {\n    public static APPOINTMENT_STATUS_ARRIVED = 'Patient Arrived';\n    public static APPOINTMENT_STATUS_READY_FOR_BILLING = 'Ready For Billing';\n    public static APPOINTMENT_STATUS_BILLING_COMPLETE = 'Billing Complete';\n    public static APPOINTMENT_TYPE_PATIENT_CANCELLED = 'Patient Cancelled';\n    public static APPOINTMENT_TYPE_PATIENT_DNA = 'Did Not Arrive';\n    private static _instance: AppointmentControllerHelper;\n    private appointmentTypes: any[] = [];\n    private clinicConfig: any | null = null;\n    private patientSearch: any[] = [];\n    private providers: any[] = [];\n    private listeners: ScheduleListener[] = [];\n\n    private constructor() {\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.providers, this)\n\n        this.handleAppointmentTemplateRendering = this.handleAppointmentTemplateRendering.bind(this);\n        this.handleAppointmentRendering = this.handleAppointmentRendering.bind(this);\n    }\n\n    public static getInstance(): AppointmentControllerHelper {\n        if (!(AppointmentControllerHelper._instance)) {\n            AppointmentControllerHelper._instance = new AppointmentControllerHelper();\n        }\n        return AppointmentControllerHelper._instance;\n    }\n\n    public addListener(listener: ScheduleListener) {\n        this.listeners.push(listener);\n    }\n\n    public haveAppointentTypesLoaded() {\n        return (this.appointmentTypes.length > 0);\n    }\n\n    public havePatientSearchesLoaded() {\n        return (this.patientSearch.length > 0);\n    }\n\n    public haveProvidersLoaded() {\n        return (this.providers.length > 0);\n    }\n\n    public hasClinicConfigLoaded() {\n        return (this.clinicConfig);\n\n    }\n\n    public getAppointmentTypes(): any[] {\n        return this.appointmentTypes;\n    }\n\n    public getPatientSearch(): any[] {\n        return this.patientSearch;\n    }\n\n    public getProviders(): any[] {\n        return this.providers;\n    }\n\n    public getClinicConfig(): any {\n        if (this.clinicConfig) {\n            const config = JSON.parse(JSON.stringify(this.clinicConfig));\n            return config;\n        } else {\n            const options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'week',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n            return options;\n        }\n    }\n\n\n    public getIconForAppointmentType(appointmentType: string) {\n        logger(`Getting icon for appoint type ${appointmentType}`);\n        let result = ``;\n        if (this.appointmentTypes) {\n            const foundIndex = this.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) {\n                if (this.appointmentTypes[foundIndex].icon) {\n                    result = `<i class=\"md-custom-event-icon ${this.appointmentTypes[foundIndex].icon}\"></i>`;\n                }\n\n            }\n        }\n        return result;\n    }\n\n\n    public getIconsForEvent(event: any): string {\n        let buffer = '';\n        if (event.arrivalTime) {\n            if (event.arrivalTime.trim().length > 0) {\n                buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (event.readyForBilling) {\n            buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n        }\n        if (event.isBilled) {\n            buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n        }\n        buffer += this.getIconForAppointmentType(event.type);\n\n        return buffer;\n    }\n\n    public getColourForAppointmentType(appointmentType: string) {\n        let result = `#333333`;\n        if (this.appointmentTypes) {\n            const foundIndex = this.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = this.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    public getColourForAppointmentTemplate(appointment: any) {\n        return this.getColourForAppointmentType(appointment.type);\n\n    }\n\n    public getColourForAppointment(appointment: any) {\n        let colour = this.getColourForAppointmentType(appointment.type);\n\n        if (appointment.arrivalTime) {\n            if (appointment.arrivalTime.trim().length > 0) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (appointment.readyForBilling || appointment.isBilled || appointment.isCancelled || appointment.isDNA) {\n            if (appointment.readyForBilling) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n            }\n            if (appointment.isBilled) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n            }\n            if (appointment.isCancelled) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n            }\n            if (appointment.isDNA) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA);\n            }\n        }\n        return colour;\n    }\n\n    public getEventForAppointment(loadDate: number, appointment: any): any {\n        const today = parseInt(moment().format('YYYYMMDD'));\n\n        const canEdit = ((loadDate >= today) && (!appointment.isDNA && !appointment.isCancelled) && (!appointment.isBilled));\n        const timeString = computeTimeStringFromStartTimeAndDurationInSeconds(appointment.time, appointment.duration);\n\n        const result = {\n            id: appointment._id,\n            start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n            title: appointment.name,\n            description: appointment.note,\n            allDay: false,\n            editable: canEdit,\n            resource: appointment.provider,\n            patientId: appointment._patient,\n            isDNA: appointment.isDNA,\n            isCancelled: appointment.isCancelled,\n            createdBy: appointment.createdBy,\n            created: appointment.created,\n            modified: appointment.modified,\n            arrivalTime: appointment.arrivalTime,\n            type: appointment.type,\n            provider: appointment.provider,\n            readyForBilling: appointment.readyForBilling,\n            billingItems: appointment.billingItems,\n            isBilled: appointment.isBilled\n        }\n        // @ts-ignore\n        result.color = this.getColourForAppointment(appointment);\n\n\n        return result;\n    }\n\n    public getAppointmentFromEvent(event: any): any {\n        const start = parseInt(moment(event.start).format('YYYYMMDD'));\n        const time = moment(event.start).format('HHmmss');\n        const duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        const appointment = {\n            _id: event.id,\n            name: event.title,\n            note: event.description,\n            start: start,\n            time: time,\n            duration: duration,\n            _patient: event.patientId,\n            isDNA: event.isDNA,\n            isCancelled: event.isCancelled,\n            createdBy: Controller.getInstance().getLoggedInUsername(),\n            created: event.created,\n            modified: event.modified,\n            arrivalTime: event.arrivalTime,\n            type: event.type,\n            provider: event.resource,\n            readyForBilling: event.readyForBilling,\n            isBilled: event.isBilled,\n            billingItems: event.billingItems\n        };\n        return appointment;\n    }\n\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Controller Helper\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                this.clinicConfig = newValue[0];\n                this.listeners.forEach((listener) => {\n                    const config = JSON.parse(JSON.stringify(this.clinicConfig));\n                    listener.loadedClinicAppointmentBookConfig(config);\n                });\n                break;\n            }\n            case (STATE_NAMES.patientSearch): {\n                this.patientSearch = newValue;\n                this.listeners.forEach((listener) => listener.loadedPatientSearch(this.patientSearch));\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                this.appointmentTypes = newValue;\n\n                let nonStatusAppointmentTypes:any[] = [];\n                this.appointmentTypes.forEach((type: any) => {\n                    if (!(type.isStatus)) nonStatusAppointmentTypes.push(type.name);\n                });\n                this.listeners.forEach((listener) => listener.loadedAppointmentTypes(nonStatusAppointmentTypes));\n                break;\n\n            }\n            case (STATE_NAMES.providers): {\n                this.providers = newValue;\n                this.listeners.forEach((listener) => listener.loadedProviders(this.providers));\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        switch (name) {\n            case (STATE_NAMES.appointmentTypes): {\n                this.appointmentTypes = Controller.getInstance().getStateManager().getStateByName(name);\n                let nonStatusAppointmentTypes:any[] = [];\n                this.appointmentTypes.forEach((type: any) => {\n                    if (!(type.isStatus)) nonStatusAppointmentTypes.push(type.name);\n                });\n                this.listeners.forEach((listener) => listener.loadedAppointmentTypes(nonStatusAppointmentTypes));\n                this.listeners.forEach((listener) => listener.refreshDisplay());\n                break;\n\n            }\n        }\n    }\n\n    public getEventForAppointmentTemplateForDate(startDate: number, dayNumber: number, template: any): any {\n        logger(`Creating event for appointment template on date ${startDate} with ${dayNumber}`);\n        logger(template);\n        if (template.day < dayNumber) return null;\n        const loadDate = startDate + (template.day - dayNumber);\n\n        const timeString = computeTimeStringFromStartTimeAndDurationInSeconds(template.time, template.duration);\n\n\n        const result = {\n            id: template._id,\n            start: moment(`${startDate}${template.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${startDate}${timeString}`, 'YYYYMMDDHHmm'),\n            color: this.getColourForAppointmentTemplate(template),\n            allDay: false,\n            editable: true,\n            resource: template.provider,\n            createdBy: template.createdBy,\n            created: template.created,\n            modified: template.modified,\n            type: template.type,\n            provider: template.provider\n        }\n        logger('Converted to event');\n        logger(result);\n\n        return result;\n\n    }\n\n\n    public getAppointmentTemplateFromEvent(event: any): any {\n        const day = parseInt(moment(event.start).format('d'));\n        const time = moment(event.start).format('HHmmss');\n        const duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        const appointment = {\n            _id: event.id,\n            day: day,\n            time: time,\n            duration: duration,\n            createdBy: event.createdBy,\n            created: event.created,\n            modified: event.modified,\n            type: event.type,\n            provider: event.resource\n        };\n        return appointment;\n    }\n\n    handleAppointmentTemplateRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentControllerHelper.getInstance().getIconForAppointmentType(data.original.type);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row\">' +\n            `      <div style=\"background:${data.color}\" class=\"col-12 md-custom-event-template-type\">${data.original.type}</div>` +\n            '    </div>' +\n            '    <div class=\"row\">' +\n            '      <div class=\"col-12 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n            `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n            '      </div>';\n        }\n            buffer += '' +\n            '  </div>' +\n            '</div>'\n\n        return buffer;\n    }\n\n    handleAppointmentRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentControllerHelper.getInstance().getIconsForEvent(data.original);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row \">' +\n            `       <div style=\"background:${data.color}\" class=\"col-12 md-custom-event-type\">${data.original.type}</div>` +\n            '    </div>'+\n            '    <div class=\"row \"> '+\n            `       <div class=\"col-sm-4 col-md-6 col-lg-12 md-custom-event-title\">${data.title}</div>` +\n            '       <div class=\"col-sm-6 col-md-4 col-lg-12 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n            `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n            '      </div>' +\n            '    </div>';\n        }\n        //if (data.original.patientId) buffer += '</div><div class=\"row\"><div class=\"col-12\"><button mbsc-button class=\"md-custom-event-btn\" data-color=\"dark\" data-variant=\"outline\">Patient</button></div></div>';\n            buffer += '</div>' +\n            '  </div>' +\n            '</div>';\n\n        return buffer;\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n\n}\n","import {\n    BasicObjectDefinitionFactory,\n    DataObjectDefinition,\n    FieldType,\n    ObjectDefinitionRegistry,\n    SimpleValueDataSource\n} from \"ui-framework-jps\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst logger = debug('patient-defs');\n\nexport class PatientObjectDefinitions {\n\n\n    public static loadPatientDefinitions() {\n        // Patient name details\n        const nameDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.name, 'Name', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(nameDef, \"title\", \"Title\", FieldType.choice, false, \"Name\", new SimpleValueDataSource([\n            {name: '', value: ''},\n            {name: 'Master', value: 'Master'},\n            {name: 'Miss', value: 'Miss'},\n            {name: 'Ms', value: 'Ms'},\n            {name: 'Mr', value: 'Mr'},\n            {name: 'Mrs', value: 'Mrs'}\n        ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(nameDef, \"firstname\", \"First Name\", FieldType.text, true, \"First name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(nameDef, \"middlename\", \"Middle Name\", FieldType.text, false, \"Middle name(s)\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(nameDef, \"surname\", \"Surname\", FieldType.text, true, \"Surname\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(nameDef, \"aka\", \"AKA\", FieldType.text, false, \"Also known as\");\n\n        logger(`Name type data object definition`);\n        logger(nameDef);\n\n        // Patient contact details\n        const contactDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.contact, 'Contact', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"line1\", \"Line 1\", FieldType.text, true, \"Address line 1\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"line2\", \"Line 2\", FieldType.text, false, \"Address line 2\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"suburb\", \"Suburb\", FieldType.text, true, \"Suburb\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"postcode\", \"Post Code\", FieldType.integer, true, \"Post code\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"state\", \"State\", FieldType.choice, true, \"State\", new SimpleValueDataSource(\n            [\n                {name: 'Australia Capital Territory', value: 'ACT'},\n                {name: 'Queensland', value: 'QLD'},\n                {name: 'South Australia', value: 'SA'},\n                {name: 'Tasmania', value: 'TAS'},\n                {name: 'Victoria', value: 'VIC'},\n                {name: 'Western Australia', value: 'WA'},\n            ]\n        ));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"country\", \"Country\", FieldType.text, true, \"Country\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"home\", \"Home Phone\", FieldType.text, true, \"Home phone\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"work\", \"Work Phone\", FieldType.text, false, \"Work phone\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"mobile\", \"Mobile Phone\", FieldType.text, true, \"Mobile phone\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"nokname\", \"NOK Name\", FieldType.text, false, \"Next of kin name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(contactDef, \"nokphone\", \"NOK Phone\", FieldType.text, false, \"Next of kin phone\");\n\n        logger(`Contact type data object definition`);\n        logger(contactDef);\n\n        // Patient identifiers details\n        const identifiersDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.identifiers, 'Contact', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"medicare\", \"Medicare\", FieldType.text, false, \"Medicare number\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"medicareRef\", \"Medicare Ref\", FieldType.text, false, \"Medicare reference number\");\n        let fieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"legacyId\", \"Legacy Id\", FieldType.id, false, \"Legacy Id\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"dva\", \"DVA\", FieldType.text, false, \"DVA number\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"dvaColour\", \"DVA Colour\", FieldType.choice, false, \"DVA colour\", new SimpleValueDataSource(\n            [\n                {name: '', value: ''},\n                {name: 'White', value: 'white'},\n                {name: 'Gold', value: 'gold'},\n            ]\n        ));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"hcc\", \"HCC\", FieldType.text, false, \"Health Care Card\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(identifiersDef, \"ihi\", \"IHI\", FieldType.integer, false, \"Individual health identifier\");\n\n        logger(`Identifiers type data object definition`);\n        logger(identifiersDef);\n\n        // Patient identifiers details\n        const basicsDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.basics, 'Basics', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"dob\", \"DOB\", FieldType.date, true, \"Date of birth\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"dod\", \"DOD\", FieldType.date, false, \"Date of death\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"gender\", \"Gender\", FieldType.choice, true, \"Gender\", new SimpleValueDataSource(\n            [\n                {name: 'Female', value: 'F'},\n                {name: 'Male', value: 'M'},\n                {name: 'Non-binary', value: 'N'},\n                {name: 'Not stated', value: 'S'},\n            ]\n        ));\n        fieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"lastSeen\", \"Last Seen\", FieldType.date, false, \"Last seen\");\n        fieldDef.displayOnly = true;\n        fieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"lastSeenBy\", \"Last Seen By\", FieldType.text, false, \"Last seen by\");\n        fieldDef.displayOnly = true;\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"ethnicity\", \"Ethnicity\", FieldType.text, false, \"Ethnicity\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(basicsDef, \"countryofbirth\", \"Birth Country\", FieldType.text, false, \"Country of birth\");\n\n        logger(`Basics type data object definition`);\n        logger(basicsDef);\n\n    }\n}","import debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    isSameMongo,\n    KeyType,\n    ListViewRendererUsingContext,\n    Modifier\n} from \"ui-framework-jps\";\nimport {Decorator, DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport {PatientController} from \"./PatientController\";\n\n\nconst vLogger = debug('open-patients');\nconst vLoggerDetail = debug('open-patients-details');\n\nexport class OpenPatientsView extends AbstractStatefulCollectionView {\n    static ACTION_CLOSE = 'Close Record';\n    static ACTION_SAVE = 'Save';\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'openPatientRecords',\n            dataSourceId: VIEW_NAME.openPatients,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromPatientSearch],\n                acceptTypes: [DRAGGABLE.typePatientSummary]\n            }\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-light',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                classes: 'mb-1',\n                type: 'span',\n            },\n            select: true,\n        },\n        extraActions: [\n            {\n                name: OpenPatientsView.ACTION_SAVE,\n                button: {\n                    classes: 'btn bg-primary text-white btn-circle btn-sm mr-1',\n                    iconClasses: 'fas fa-save'\n                },\n                confirm: false\n            },\n            {\n                name: OpenPatientsView.ACTION_CLOSE,\n                button: {\n                    classes: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                    iconClasses: 'fas fa-door-closed'\n                },\n                confirm: true\n            },\n\n        ],\n        sorter: OpenPatientsView.sortPatients\n\n    };\n    private static _instance: OpenPatientsView;\n\n    constructor() {\n        super(OpenPatientsView.DOMConfig, PatientController.getInstance().getStateManager(), STATE_NAMES.openPatients);\n        OpenPatientsView._instance = this;\n\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemInNamedCollection = this.getItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        this.getModifierForItemInNamedCollection = this.getModifierForItemInNamedCollection.bind(this);\n\n        ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.openPatients, 'Open Patient Records');\n\n    }\n\n    public static getInstance(): OpenPatientsView {\n        if (!(OpenPatientsView._instance)) {\n            OpenPatientsView._instance = new OpenPatientsView();\n        }\n        return OpenPatientsView._instance;\n    }\n\n    private static sortPatients(item1: any, item2: any) {\n        let result = -1;\n        if (item1.name.firstname > item2.name.firstname) result = 1;\n        return result;\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        let result = this.stateManager.findItemInState(name, compareWith);\n        return result;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = `${item.name.firstname} ${item.name.surname}`;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        if (item.decorator === Decorator.Modified) result = Modifier.warning;\n        return result;\n    }\n\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n\n}\n\n","import {\n    AlertEvent,\n    AlertListener,\n    AlertManager,\n    AlertType,\n    CollectionView,\n    CollectionViewListener,\n    copyObject,\n    isSameMongo,\n    MemoryBufferStateManager,\n    StateChangeListener,\n    StateManager,\n    View\n} from \"ui-framework-jps\";\nimport {Decorator, DRAGGABLE, STATE_NAMES} from \"../AppTypes\";\nimport debug from 'debug';\nimport Controller from \"../Controller\";\nimport {OpenPatientsView} from \"./OpenPatientsView\";\nimport {PatientRecordTabularView} from \"./PatientRecordTabularView\";\nimport {PatientListener} from \"./PatientListener\";\nimport App from \"../App\";\nimport {AttachmentListener} from \"../clinic-chat/AttachmentListener\";\nimport {ClinicChatDetailView} from \"../clinic-chat/ClinicChatDetailView\";\nimport moment from \"moment\";\n\nconst logger = debug('patient-controller');\n\nexport class PatientController implements StateChangeListener, CollectionViewListener, AttachmentListener,AlertListener{\n    private static _instance: PatientController;\n    private stateManager: StateManager;\n    private listeners: PatientListener[] = [];\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager(isSameMongo);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patients, this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.openPatients, this);\n    }\n\n    public static getInstance(): PatientController {\n        if (!(PatientController._instance)) {\n            PatientController._instance = new PatientController();\n        }\n        return PatientController._instance;\n    }\n\n    public addListener(listener: PatientListener) {\n        this.listeners.push(listener);\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public openPatientRecordWithPatientId(patientId: string): void {\n        logger(`Handling opening patient record ${patientId}`);\n\n        let patient = this.stateManager.findItemInState(STATE_NAMES.openPatients, {_id: patientId});\n        if (!(patient._id)) { // not found\n            patient = copyObject(Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: patientId}));\n            patient.decorator = Decorator.Incomplete;\n        }\n        this.openPatientRecord(patient);\n\n    }\n\n    public openPatientRecord(patient: any): void {\n        logger(`Handling opening patient record`);\n        logger(patient);\n        // previously opened\n        if (patient.decorator === Decorator.Incomplete) {\n            Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patients, patient);\n        } else {\n            // make a copy\n            patient = copyObject(patient);\n            patient.decorator = Decorator.Complete;\n        }\n        App.getInstance().handleShowPatientRecord(null);\n        this.listeners.forEach((listener) => listener.patientSelected(patient));\n    }\n\n    private _closeRecord(patient:any):void {\n        logger(`patient ${patient.firstname} with id ${patient.id} closing - closing`);\n        PatientController.getInstance().getStateManager().removeItemFromState(STATE_NAMES.openPatients, patient, true);\n        this.listeners.forEach((listener) => listener.patientClosed(patient));\n    }\n\n    public closePatientRecord(patient: any): void {\n        // has the patient changed?\n        if (patient.decorator) {\n            if (patient.decorator === Decorator.Modified) {\n                logger(`Patient marked as modified`);\n                AlertManager.getInstance().startAlert(this,'Patient Records', `Patient ${patient.name.firstname} ${patient.name.surname} has changes.  Do you want to discard those changes?`,{patient:patient});\n            }\n            else {\n                this._closeRecord(patient);\n            }\n        }\n        else {\n            this._closeRecord(patient);\n        }\n\n    }\n\n    public savePatientRecord(patient: any): void {\n        logger(`saving patient ${patient.name.firstname} with id ${patient._id}`);\n\n\n        let patientRecord = copyObject(patient);\n        delete patientRecord.decorator;\n        delete patient.oldContact;\n        patientRecord.modified = parseInt(moment().format('YYYYMMDDHHmmss'));\n        patientRecord.modifiedBy = Controller.getInstance().getLoggedInUsername();\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.patients, patientRecord, false);\n\n\n        patientRecord.decorator = Decorator.Complete;\n        PatientController.getInstance().getStateManager().updateItemInState(STATE_NAMES.openPatients, patientRecord, true);\n        logger(patientRecord);\n\n    }\n\n    public onDocumentLoaded(): void {\n\n        OpenPatientsView.getInstance().addEventCollectionListener(this);\n        ClinicChatDetailView.getInstance().addAttachmentListener(this);\n\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any) {\n    }\n\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n        foundItem.decorator = Decorator.Complete;\n        logger(`patient loaded - adding to open patients`);\n        logger(foundItem);\n        // found new patient to add to buffer\n        if (this.isPatientInOpenList(foundItem._id)) {\n            this.stateManager.updateItemInState(STATE_NAMES.openPatients, foundItem, true);\n        } else {\n            this.stateManager.addNewItemToState(STATE_NAMES.openPatients, foundItem, true);\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any) {\n        switch (name) {\n            case STATE_NAMES.openPatients: {\n                // found new patient in buffer, let listeners know\n                logger(`patient loaded - added to open patients - informing listeners`);\n                logger(itemAdded);\n                this.listeners.forEach((listener) => listener.patientLoaded(itemAdded));\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any) {\n        switch (name) {\n            case STATE_NAMES.openPatients: {\n                // found new patient in buffer, let listeners know\n                if (itemNewValue.decorator !== Decorator.Modified) {\n                    logger(`patient loaded`);\n                    logger(itemNewValue);\n                    this.listeners.forEach((listener) => listener.patientLoaded(itemNewValue));\n                }\n                else {\n                    this.listeners.forEach((listener) => listener.patientChanged(itemNewValue));\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any) {\n    }\n\n\n\n    getListenerName(): string {\n        return 'Patient Controller';\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any) {\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    showRequested(view: View): void {}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDeselected(view: CollectionView, selectedItem: any): void {}\n    itemDragStarted(view: CollectionView, selectedItem: any): void {}\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling action ${actionName} selected item`);\n        logger(selectedItem);\n        if (actionName === OpenPatientsView.ACTION_CLOSE) {\n            this.closePatientRecord(selectedItem);\n        }\n        if (actionName === OpenPatientsView.ACTION_SAVE) {\n            this.savePatientRecord(selectedItem);\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        logger(`Handling drop of item`);\n        logger(droppedItem);\n        this.openPatientRecordWithPatientId(droppedItem._id);\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        logger(`Handling selected item`);\n        logger(selectedItem);\n        PatientRecordTabularView.getInstance().selectTab(PatientRecordTabularView.TAB_DEMOGRAPHICS);\n        this.openPatientRecord(selectedItem);\n    }\n\n    protected isPatientInOpenList(patientId: string): boolean {\n        let patient = this.stateManager.findItemInState(STATE_NAMES.openPatients, {_id: patientId});\n        return (patient._id);\n    }\n\n    attachmentClicked(dataType: string, dataIdentifier: string): void {\n        if (dataType === DRAGGABLE.typePatientSummary) {\n            this.openPatientRecordWithPatientId(dataIdentifier);\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this._closeRecord(event.context.patient);\n        }\n    }\n\n\n\n}\n","import {TabularViewContainer, TabularViewDOMConfig} from \"ui-framework-jps\";\n\nexport class PatientRecordTabularView extends TabularViewContainer {\n    public static TAB_DEMOGRAPHICS = 'demographics';\n    public static TAB_CONSULTS = 'consults';\n    public static TAB_SCRIPTS = 'scripts';\n    public static TAB_RESULTS = 'results';\n    public static TAB_DOCUMENTS = 'documents';\n    public static TAB_VACCINATIONS = 'vaccinations';\n    public static TAB_WORKCOVER = 'workcover';\n    public static TAB_TASKS = 'tasks';\n    public static TAB_ARCHIVE = 'archive';\n    protected static config: TabularViewDOMConfig = {\n        containedById: 'patientRecord',\n        containerId: 'patientRecordTabularView',\n        tabViewContainer: {\n            type: 'div',\n            classes: 'row'\n        },\n        tabBarContainer: {\n            type: 'div',\n            classes: 'col-12'\n        },\n        tabBarElement: {\n            type: 'ul',\n            classes: 'nav nav-pills nav-fill'\n        },\n        tabularViewContainer: {\n            type: 'div',\n            classes: 'col-12'\n        },\n        tabs: [\n            {\n                id: PatientRecordTabularView.TAB_DEMOGRAPHICS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Demographics'\n                },\n                isDefaultActive: true\n            },\n            {\n                id: PatientRecordTabularView.TAB_CONSULTS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'History and Consults'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_SCRIPTS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Allergies and Scripts'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_RESULTS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Results'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_DOCUMENTS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Documents and Letters'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_VACCINATIONS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Vaccinations'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_WORKCOVER,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Workcover'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_TASKS,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Tasks'\n                },\n                isDefaultActive: false\n            },\n            {\n                id: PatientRecordTabularView.TAB_ARCHIVE,\n                element: {\n                    type: 'li',\n                    classes: 'nav-item'\n                },\n                subElement: {\n                    type: 'a',\n                    classes: 'nav-link',\n                    attributes: [{name: 'href', value: '#'}],\n                    innerHTML: 'Script Archive'\n                },\n                isDefaultActive: false\n            },\n        ],\n    }\n    private static _instance: PatientRecordTabularView;\n\n    private constructor() {\n        super(PatientRecordTabularView.config);\n    }\n\n    public static getInstance(): PatientRecordTabularView {\n        if (!(PatientRecordTabularView._instance)) {\n            PatientRecordTabularView._instance = new PatientRecordTabularView();\n        }\n        return PatientRecordTabularView._instance;\n    }\n\n\n}\n","import {PatientSearchSidebarContainers, PatientSearchSidebarPrefs} from \"../AppTypes\";\nimport {SidebarViewContainer} from \"ui-framework-jps\";\nimport {PatientSearchView} from \"./PatientSearchView\";\nimport {OpenPatientsView} from \"./OpenPatientsView\";\n\nexport class PatientSearchSidebar extends SidebarViewContainer {\n\n    private static _instance: PatientSearchSidebar;\n\n    private constructor() {\n        super(PatientSearchSidebarPrefs);\n        const recentSearches = new PatientSearchView();\n        this.addView(recentSearches, {containerId: PatientSearchSidebarContainers.container});\n        const openPatients = new OpenPatientsView();\n        this.addView(openPatients, {containerId: PatientSearchSidebarContainers.openRecords});\n    }\n\n    public static getInstance(): PatientSearchSidebar {\n        if (!(PatientSearchSidebar._instance)) {\n            PatientSearchSidebar._instance = new PatientSearchSidebar();\n        }\n        return PatientSearchSidebar._instance;\n    }\n}\n\n\n","import debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BrowserStorageStateManager,\n    CollectionViewDOMConfig,\n    isSameMongo,\n    KeyType,\n    ListViewRenderer,\n    Modifier,\n    StateManager,\n    View\n} from \"ui-framework-jps\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {PatientController} from \"./PatientController\";\n\n\nconst vLogger = debug('patient-search');\nconst vLoggerDetail = debug('patient-search-detail');\n\nexport class PatientSearchView extends AbstractStatefulCollectionView {\n    static fastSearchInputId = 'fastPatientSearch';\n    static dataLimit = 20;\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentPatientSearches',\n            dataSourceId: VIEW_NAME.patientSearch,\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                classes: 'mb-1',\n                type: 'span',\n            },\n            select: true,\n            quickDelete: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typePatientSummary,\n                from: DRAGGABLE.fromPatientSearch\n            },\n        },\n        extraActions: [\n            {\n                name:'Open Record',\n                button: {\n                    classes: 'btn bg-primary text-white btn-circle btn-sm',\n                    iconClasses: 'fas fa-clipboard-list'\n                },\n                confirm:false\n            }\n        ]\n    };\n    protected localisedSM: StateManager;\n\n    constructor() {\n        super(PatientSearchView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.patientSearch);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventPatientSelected = this.eventPatientSelected.bind(this);\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true, true, isSameMongo);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentPatientSearches, this);\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        const fastSearchEl = $(`#${PatientSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventPatientSelected);\n\n        super.updateViewForNamedCollection(STATE_NAMES.patientSearch, this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches));\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = `${item.name.firstname} ${item.name.surname}`;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        if (item.flags.isInactive) result = Modifier.inactive;\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.normal;\n        if (item.flags.hasWarnings) result = Modifier.warning;\n        return result;\n\n    }\n\n\n    eventPatientSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`patient ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.value = ui.item.label;\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentPatientSearches, {_id: ui.item.value})) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentPatientSearches}`);\n        if (recentUserSearches.length >= PatientSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentPatientSearches, item, true);\n        }\n\n        const patient = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: ui.item.value});\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentPatientSearches, patient, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentPatientSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.patientSearch) {\n            vLogger(`Handling patient search results`);\n            vLogger(newState);\n            // load the search names into the search field\n            const fastSearchEl = $(`#${PatientSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: `${item.name.firstname} ${item.name.surname}`,\n                    value: item._id,\n                };\n                fastSearchValues.push(searchValue);\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search patient ${selectedItem.firstname} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentPatientSearches, selectedItem, true);\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        vLogger(`Handling open patient record`);\n        PatientController.getInstance().openPatientRecordWithPatientId(selectedItem._id);\n    }\n\n\n}\n\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {StateChangeListener} from \"ui-framework-jps\";\nimport {ScheduleListener} from \"../helper/ScheduleListener\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {TodayView} from \"./TodayView\";\nimport {TodaysPatientsView} from \"./TodaysPatientsView\";\n\nconst logger = debug('today-controller');\n\nexport class TodayController implements StateChangeListener, ScheduleListener {\n    private static _instance: TodayController;\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n\n        if (!Controller.getInstance().isProvider()) return;\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointments, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n    }\n\n    public static getInstance(): TodayController {\n        if (!(TodayController._instance)) {\n            TodayController._instance = new TodayController();\n        }\n        return TodayController._instance;\n    }\n\n\n    public onDocumentLoaded() {\n        TodayView.getInstance().onDocumentLoaded();\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        if (!Controller.getInstance().isProvider()) return;\n        const today = parseInt(moment().format('YYYYMMDD'));\n        logger(`Need to load today (${today})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        const results: any[] = [];\n        const appointmentsForTheDay: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start === today) && (appointment.provider === Controller.getInstance().getProviderNo())) {\n                appointmentsForTheDay.push(appointment);\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                results.push(result);\n            }\n\n        });\n\n\n        inst.setEvents(appointmentsForTheDay);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Today\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (!Controller.getInstance().isProvider()) return;\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n\n            case (STATE_NAMES.appointments): {\n                const today = parseInt(moment().format('YYYYMMDD'));\n                const currentProvider = Controller.getInstance().getLoggedInUsername();\n                logger(`Provider no is ${currentProvider}`);\n\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n                const results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    if (appointment.start === today) {\n                        logger(appointment);\n\n                        if (appointment.provider === currentProvider) {\n                            logger(`Found appointment for today and provider ${currentProvider}`);\n\n                            // add the patient in the appointment to the dashboard\n                            if (appointment._patient) TodaysPatientsView.getInstance().addPatientSummaryById(appointment._patient);\n\n                            const result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                            logger('Converted to event');\n                            logger(result);\n                            results.push(result);\n                        }\n                    }\n\n                });\n\n                TodayView.getInstance().getCalender().setEvents(results);\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if (!Controller.getInstance().isProvider()) return;\n        if ((name === STATE_NAMES.appointments) && (appointment.provider === Controller.getInstance().getLoggedInUsername())) {\n            logger('New Appointment inserted by another user');\n            logger(appointment);\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                // add the patient in the appointment to the dashboard\n                if (appointment._patient) TodaysPatientsView.getInstance().addPatientSummaryById(appointment._patient);\n\n                TodayView.getInstance().getCalender().addEvent(result);\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (!Controller.getInstance().isProvider()) return;\n        if ((name === STATE_NAMES.appointments) && (appointment.provider === Controller.getInstance().getLoggedInUsername())) {\n            logger('Appointment deleted by another user');\n            logger(appointment);\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n                TodayView.getInstance().getCalender().removeEvent([appointment._id]);\n                // remove the patient in the appointment to the dashboard\n                if (appointment._patient) TodaysPatientsView.getInstance().removePatient({_id: appointment._patient});\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if (!Controller.getInstance().isProvider()) return;\n        if ((name === STATE_NAMES.appointments) && (appointment.provider === Controller.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n\n                const result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                TodayView.getInstance().getCalender().updateEvent(result);\n            }\n        }\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {\n    }\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        TodayView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {\n    }\n\n    loadedProviders(providers: any[]): void {\n    }\n\n    refreshDisplay(): void {\n        TodayView.getInstance().getCalender().refresh();\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n}\n","import {TodayController} from \"./TodayController\";\nimport {eventcalendar, Eventcalendar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\n\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\nimport {PatientController} from \"../patients/PatientController\";\n\nconst logger = debug('today-view');\n\nexport class TodayView {\n    private static _instance: TodayView;\n    private calendar: Eventcalendar | null = null;\n    private currentProviderNo = '';\n\n    private constructor() {\n    }\n\n    public static getInstance(): TodayView {\n        if (!(TodayView._instance)) {\n            TodayView._instance = new TodayView();\n        }\n        return TodayView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n        if (!Controller.getInstance().isProvider()) return;\n\n        this.currentProviderNo = Controller.getInstance().getLoggedInUsername();\n\n        const options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n        const day = parseInt(moment().format('d'));\n        options.view.startDay = day;\n        options.view.endDay = day;\n        options.clickToCreate = false;\n        options.dragToCreate = false;\n        options.dragToMove = false;\n        options.dragToResize = false;\n        options.min = new Date();\n        options.showControls = false;\n        //options.resources = [this.currentProviderNo];\n        //options.groupBy = 'date';\n\n        options.onPageLoading = (event: any, inst: any) => {\n            TodayController.getInstance().onPageLoading(event, inst);\n        };\n\n        options.renderHeader = function () {\n            return `<div class=\"my-custom-title\"><strong>${moment().format('ddd DD')}</strong></div>`;\n        }\n\n\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            if (args.event.patientId) {\n                PatientController.getInstance().openPatientRecordWithPatientId(args.event.patientId);\n            }\n        }\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentRendering;\n\n        // @ts-ignore\n        this.calendar = eventcalendar(document.getElementById(\"todayDetail\"), options);\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.calendar) {\n            this.currentProviderNo = Controller.getInstance().getLoggedInUsername();\n            logger('State changed, using clinic config options');\n            const day = parseInt(moment().format('d'));\n            clinicConfig.view.startDay = day;\n            clinicConfig.view.endDay = day;\n            clinicConfig.clickToCreate = false;\n            clinicConfig.dragToCreate = false;\n            clinicConfig.dragToMove = false;\n            clinicConfig.dragToResize = false;\n            clinicConfig.min = new Date();\n            clinicConfig.showControls = false;\n            //clinicConfig.resources = [this.currentProviderNo];\n            //clinicConfig.groupBy = 'date';\n\n            this.calendar.setOptions(clinicConfig);\n        }\n    }\n}\n","import {\n    ComparisonType,\n    ConditionResponse,\n    FieldDefinition,\n    Form,\n    ValidationManager,\n    ValidationRule,\n    ViewFieldValidator,\n    ViewMode\n} from \"ui-framework-jps\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport debug from 'debug';\nimport {RuleCheck} from \"ui-framework-jps/dist/framework/ui/validation/ValidationManager\";\n\nconst logger = debug('user-validation-helper');\n\nexport class UserValidationHelper implements ViewFieldValidator {\n    private static _instance: UserValidationHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): UserValidationHelper {\n        if (!(UserValidationHelper._instance)) {\n            UserValidationHelper._instance = new UserValidationHelper();\n        }\n        return UserValidationHelper._instance;\n    }\n\n    public setupValidationForDetailsForm(form: Form) {\n        /*\n        *\n        * Create user rules\n        *\n         */\n\n\n        let rule: ValidationRule = {\n            viewMode: ViewMode.create,\n            targetDataFieldId: 'resetPassword',\n            response: ConditionResponse.hide,\n            conditions: []\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'isProvider',\n            response: ConditionResponse.hide,\n            conditions: []\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n\n        rule = {\n            viewMode: ViewMode.create,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.invalid,\n            conditions: [\n                {\n                    comparison: ComparisonType.isNotNull\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        rule = {\n            viewMode: ViewMode.update,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    comparison: ComparisonType.hasValue,\n                    sourceDataFieldId: 'resetPassword',\n                    values: 'false'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.update,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    comparison: ComparisonType.hasValue,\n                    sourceDataFieldId: 'resetPassword',\n                    values: 'true'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        ValidationManager.getInstance().addViewValidator(this);\n    }\n\n    applyRulesToTargetField(form: Form, viewMode: ViewMode, fieldDef: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        const result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // are we dealing with the form for users?\n        if (form.getDataObjectDefinition().id === STATE_NAMES.users) {\n            // we are only checking for invalid state\n            if (((onlyRulesOfType) && (onlyRulesOfType === ConditionResponse.invalid)) || (!(onlyRulesOfType))) {\n                // are we dealing with the reset password field?\n                if (fieldDef.id === 'password') {\n                    logger('User form, password field, invalid check');\n                    // what is the value of the field reset password\n                    const resetField = form.getFieldFromDataFieldId('resetPassword');\n                    if (resetField) {\n                        const resetValue = resetField.getValue();\n                        logger(`User form, password field, invalid check - reset is ${resetValue}`);\n                        if (resetValue && (resetValue === 'true')) {\n                            // check the password value\n                            const passwordField = form.getFieldFromDataFieldId(fieldDef.id);\n                            if (passwordField) {\n                                const passwordValue = passwordField.getValue();\n                                logger(`User form, password field, invalid check - reset is ${resetValue}, password is \"${passwordValue}\"`);\n                                if (passwordValue) {\n                                    if (passwordValue.trim().length === 0) {\n                                        logger(`User form, password field, invalid check - FAILED`);\n                                        result.ruleFailed = true;\n                                        result.message = 'Password must be supplied.';\n                                    }\n                                } else {\n                                    logger(`User form, password field, invalid check - FAILED`);\n                                    result.ruleFailed = true;\n                                    result.message = 'Password must be supplied.';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        logger(result);\n\n        return result;\n    }\n\n}\n","import {STATE_NAMES, UsersSidebarContainers, VIEW_NAME} from \"../AppTypes\";\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BootstrapTableConfigHelper,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    DataObjectDefinition,\n    DisplayOrder,\n    isSameMongo,\n    KeyType,\n    Modifier,\n    ObjectDefinitionRegistry,\n    StateManager,\n    TableUIConfig,\n    TabularViewRendererUsingContext,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('users-view');\n\nexport class UsersCollectionView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: UsersSidebarContainers.list,\n            dataSourceId: VIEW_NAME.users,\n        },\n        resultsElement: {\n            type: 'tr',\n            attributes: [{name: 'href', value: '#'}],\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'table-secondary',\n            active: 'table-success',\n            warning: 'table-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                const results: string[] = [];\n\n                if (item.isAdmin) {\n                    results.push(\"fas fa-user-cog\");\n                }\n                if (item.isProvider) {\n                    results.push(\"fas fa-user-md\");\n                }\n\n\n                return results;\n            },\n        },\n        sorter: UsersCollectionView.sortUsers\n    };\n\n    constructor(stateManager: StateManager) {\n        super(UsersCollectionView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        const userDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.users);\n        if (userDef) {\n            const displayOrders: DisplayOrder[] = [];\n            displayOrders.push({fieldId: 'username', displayOrder: 1});\n            displayOrders.push({fieldId: 'isCurrent', displayOrder: 2});\n            displayOrders.push({fieldId: 'isAdmin', displayOrder: 3});\n            displayOrders.push({fieldId: 'isProvider', displayOrder: 4});\n            displayOrders.push({fieldId: 'providerNo', displayOrder: 5});\n\n            const tableUIConfig: TableUIConfig = BootstrapTableConfigHelper.getInstance().generateTableConfig(userDef, displayOrders, 1, false, true);\n\n            tableUIConfig.headerColumns[1].element.classes += ' text-center';\n            tableUIConfig.headerColumns[2].element.classes += ' text-center';\n            tableUIConfig.headerColumns[3].element.classes += ' text-center';\n            tableUIConfig.headerColumns[4].element.classes += ' text-center';\n\n            this.renderer = new TabularViewRendererUsingContext(this, this, tableUIConfig);\n            this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n            this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n            this.getItemId = this.getItemId.bind(this);\n\n            ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.users, 'Users');\n\n        }\n    }\n\n    private static sortUsers(item1: any, item2: any) {\n        let result = -1;\n        if (item1.username > item2.username) result = 1;\n        return result;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += `<strong style=\"text-colour:${item.colour}\">` + item.username + '</strong> ';\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        return false;\n    }\n\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.isCurrent) {\n            return Modifier.normal;\n        }\n        return Modifier.inactive\n    }\n\n\n}\n\n","import Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {\n    BasicObjectDefinitionFactory,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DefaultFieldPermissionChecker,\n    DetailView,\n    DetailViewImplementation,\n    Form,\n    FormDetailViewRenderer,\n    LinkedCollectionDetailController,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer\n} from \"ui-framework-jps\";\nimport {STATE_NAMES, UsersSidebarContainers, VIEW_NAME} from \"../AppTypes\";\n\nimport {BootstrapFormConfigHelper} from \"ui-framework-jps/dist/framework/ui/helper/BootstrapFormConfigHelper\";\nimport {UsersCollectionView} from \"./UsersCollectionView\";\nimport {UserValidationHelper} from \"./UserValidationHelper\";\n\n\nconst logger = debug('users-composite-view');\n\n\nexport class UsersCompositeView implements DataObjectListener {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const apptTypes = new UsersCollectionView(Controller.getInstance().getStateManager());\n        this.sideBar.addView(apptTypes, {containerId: UsersSidebarContainers.list});\n\n        const userDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.users);\n\n        if (userDef) {\n            const detailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(UsersSidebarContainers.detail, userDef, new DefaultFieldPermissionChecker(), BootstrapFormConfigHelper.getInstance(), false);\n\n            const usersDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: UsersSidebarContainers.detail,\n                    dataSourceId: VIEW_NAME.userDetail\n                }, detailRenderer);\n            const viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.users, apptTypes);\n            viewLinker.addLinkedDetailView(usersDetailView);\n            this.sideBar.onDocumentLoaded();\n\n            const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(userDef);\n            usersDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm: Form | null = detailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                UserValidationHelper.getInstance().setupValidationForDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            const createUser = <HTMLButtonElement>document.getElementById('addNewUser');\n            logger(`Setting up button for creating users`);\n            logger(createUser);\n            if (createUser) {\n                createUser.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Handling create`);\n        switch (typeName) {\n            case STATE_NAMES.users: {\n                logger(`Handling create new user`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        return;\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Handling update`);\n        switch (typeName) {\n            case STATE_NAMES.users: {\n                logger(`Handling update user`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n}\n","import debug from 'debug';\nimport Controller from './Controller';\n\nimport {API_Config, AppointmentTypesSidebarPrefs, NAVIGATION, UsersSidebarPrefs,} from \"./AppTypes\";\nimport React, {ReactNode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AppointmentController} from \"./appointments/AppointmentController\";\nimport {\n    ContextualInformationHelper,\n    NotificationController,\n    SecurityManager,\n    SidebarViewContainer,\n    UnreadMessageCountListener\n} from \"ui-framework-jps\";\nimport {setOptions} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./appointment-templates/AppointmentTemplateController\";\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {PatientSearchSidebar} from \"./patients/PatientSearchSidebar\";\nimport {AppointmentTypesCompositeView} from \"./appointment-types/AppointmentTypesCompositeView\";\nimport {ClinicChatSidebar} from \"./clinic-chat/ClinicChatSidebar\";\nimport {ClinicChatListView} from \"./clinic-chat/ClinicChatListView\";\nimport {TodayController} from \"./today/TodayController\";\nimport {PatientRecordTabularView} from \"./patients/PatientRecordTabularView\";\nimport {PatientDemographicsCompositeView} from \"./patients/PatientDemographicsCompositeView\";\nimport {TodaysPatientsView} from \"./today/TodaysPatientsView\";\nimport {PatientController} from \"./patients/PatientController\";\nimport {UsersCompositeView} from \"./users/UsersCompositeView\";\nimport {AppointmentBookReact} from \"./appointments/AppointmentBookReact\";\nimport {AppointmentTemplatesReact} from \"./appointment-templates/AppointmentTemplatesReact\";\nimport {PatientRecordReact} from \"./patients/PatientRecordReact\";\n\n\nconst logger = debug('app');\n\nexport default class App extends React.Component implements UnreadMessageCountListener {\n    private static _instance:App;\n\n    public static getInstance(): App {\n        return App._instance;\n    }\n\n    private thisEl: HTMLDivElement | null = null;\n    private chatNavigationItem: HTMLAnchorElement | null = null;\n    private apptTypeSidebar: SidebarViewContainer | null = null;\n    private usersSidebar: SidebarViewContainer | null = null;\n\n\n    public constructor() {\n        // @ts-ignore\n        super();\n        App._instance = this;\n\n        let todaysPatients: any[] = [];\n\n        this.state = {\n            todaysPatients: todaysPatients\n        };\n\n\n        // event handlers\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowAppointmentBook = this.handleShowAppointmentBook.bind(this);\n        this.handleShowAppointmentTemplates = this.handleShowAppointmentTemplates.bind(this);\n        this.handleShowPatientRecord = this.handleShowPatientRecord.bind(this);\n        this.handleShowPatientSearch = this.handleShowPatientSearch.bind(this);\n        this.handleShowAppointmentTypes = this.handleShowAppointmentTypes.bind(this);\n        this.handleShowUsers = this.handleShowUsers.bind(this);\n        this.handleShowToday = this.handleShowToday.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    render(): ReactNode {\n        logger(\"Rendering App\");\n        return (\n            <React.Fragment>\n                <div id=\"today\" className=\"container-fluid d-none\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-md-3\">\n                            <div id=\"todayDetail\">\n                            </div>\n                        </div>\n                        <div className=\"col-sm-12 col-md-9\">\n                            <div className=\"container-fluid\">\n                                <div className=\"row\" id=\"todays-patients\">\n                                    <TodaysPatientsView/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <AppointmentBookReact/>\n                <AppointmentTemplatesReact/>\n                <PatientRecordReact/>\n            </React.Fragment>\n        )\n    }\n\n\n    componentDidMount(): void {\n        logger('component Did Mount');\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n\n        this.apptTypeSidebar = new SidebarViewContainer(AppointmentTypesSidebarPrefs);\n        new AppointmentTypesCompositeView(this.apptTypeSidebar).onDocumentLoaded();\n\n        this.usersSidebar = new SidebarViewContainer(UsersSidebarPrefs);\n        new UsersCompositeView(this.usersSidebar).onDocumentLoaded();\n\n        PatientSearchSidebar.getInstance().onDocumentLoaded();\n        ClinicChatSidebar.getInstance().onDocumentLoaded();\n\n        TodaysPatientsView.getInstance().onDocumentLoaded(this);\n\n\n        this.setupNavigationItemHandling();\n\n        // AppointmentTemplateController.getInstance().onDocumentLoaded();\n        TodayController.getInstance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        NotificationController.getInstance().setOptions({\n            showNormalPriorityMessageNotifications: true,\n            showHighPriorityMessageNotifications: true,\n            showUrgentPriorityMessageNotifications: true,\n            showNormalPriorityMessageNotificationsInOS: true,\n            showHighPriorityMessageNotificationsInOS: true,\n            showUrgentPriorityMessageNotificationsInOS: true,\n            showInvitationDeclinedNotifications: false,\n            showInvitedNotifications: false,\n            showOfflineMessageNotification: true,\n            showFavouriteUserLoggedInNotification: false,\n            showFavouriteUserLoggedOutNotification: false,\n            showUserJoinLeaveChatNotification: false\n        });\n        NotificationController.getInstance().onDocumentLoaded();\n        PatientController.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n        if (Controller.getInstance().isProvider()) {\n            this.handleShowToday(null);\n        } else {\n            this.handleShowAppointmentBook(null);\n        }\n\n\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    hideAllSideBars() {\n        ClinicChatSidebar.getInstance().eventHide(null);\n        PatientSearchSidebar.getInstance().eventHide(null);\n        this.usersSidebar.eventHide(null);\n        this.apptTypeSidebar.eventHide(null);\n    }\n\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        ClinicChatSidebar.getInstance().eventShow(null);\n        if (roomName) {\n            ClinicChatListView.getInstance().selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(unreadNormalMessages: number, unreadHighMessages: number, unreadUrgentMessages: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (unreadNormalMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${unreadNormalMessages}&nbsp;</span>`;\n        }\n        if (unreadHighMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-warning\">&nbsp;${unreadHighMessages}&nbsp;</span>`;\n        }\n        if (unreadUrgentMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-danger\">&nbsp;${unreadUrgentMessages}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    protected handleShowAppointmentBook(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing appointment book`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n    }\n\n    protected handleShowAppointmentTemplates(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing appointment templates`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n\n    }\n\n    protected handleShowToday(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing today`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n\n    }\n\n    public handleShowPatientRecord(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing patient record`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', false);\n    }\n\n    protected handleShowPatientSearch(event: Event): void {\n        logger(`Showing patient search`);\n        PatientSearchSidebar.getInstance().eventShow(null);\n\n    }\n\n    protected handleShowAppointmentTypes(event: Event): void {\n        logger(`Showing appointment types`);\n        if (this.apptTypeSidebar) this.apptTypeSidebar.eventShow(null);\n\n    }\n\n    protected handleShowUsers(event: Event): void {\n        logger(`Showing users`);\n        if (this.usersSidebar) this.usersSidebar.eventShow(null);\n\n    }\n\n\n    private setupNavigationItemHandling() {\n        document.getElementById(NAVIGATION.appointmentBook).addEventListener('click', this.handleShowAppointmentBook);\n        const templateEl = document.getElementById(NAVIGATION.appointmentTemplates);\n        if (templateEl) {\n            templateEl.addEventListener('click', this.handleShowAppointmentTemplates);\n        }\n        const apptTypesEl = document.getElementById(NAVIGATION.appointmentTypes);\n        if (apptTypesEl) {\n            apptTypesEl.addEventListener('click', this.handleShowAppointmentTypes);\n        }\n        document.getElementById(NAVIGATION.patientRecord).addEventListener('click', this.handleShowPatientRecord);\n        document.getElementById(NAVIGATION.patientSearch).addEventListener('click', this.handleShowPatientSearch);\n        const usersEl = document.getElementById(NAVIGATION.users);\n        if (usersEl) {\n            usersEl.addEventListener('click', this.handleShowUsers);\n        }\n        const todayEl = document.getElementById(NAVIGATION.today);\n        if (todayEl) {\n            todayEl.addEventListener('click', this.handleShowToday);\n        }\n\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.clinicChat);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n\n}\n\nlocalStorage.debug = 'app api-ts-results patient-controller';\n//localStorage.debug = 'socket-listener';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n$(function () {\n\n    setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    mobiscroll5.setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    const element = <App className=\"container-fluid justify-content-around\"/>;\n    ReactDOM.render(element, document.getElementById('root'));\n\n});\n","import React from \"react\";\nimport {AppointmentTemplateController} from \"./AppointmentTemplateController\";\n\n\nexport class AppointmentTemplatesReact extends React.Component {\n    constructor(props:any) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"appointmentTemplates\" className=\"container-fluid d-none\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12 col-md-9\">\n                        <div className=\"col-12\">\n                            <div id=\"templateDetail\"></div>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-12 col-md-3\">\n                        <div id=\"providerFilter\">\n                            <div className=\"mbsc-form-group-title\">Providers</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        AppointmentTemplateController.getInstance().onDocumentLoaded();\n    }\n}","import React from \"react\";\nimport {AppointmentController} from \"./AppointmentController\";\n\nexport class AppointmentBookReact extends React.Component {\n    constructor(props:any) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"appointmentBook\" className=\"container-fluid d-none\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12 col-md-5\">\n                        <div id=\"calendarControl\"></div>\n                    </div>\n                    <div className=\"col-sm-12 col-md-7\">\n                        <div id=\"providers\">\n                            <div className=\"mbsc-form-group-title\">Providers</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 scroll-calendar-detail\">\n                        <div id=\"calendarDetail\"></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        AppointmentController.getInstance().onDocumentLoaded();\n    }\n}","/** @jsx jsxCreateElement */\n/*** @jsxFrag jsxCreateFragment */\nimport {\n    AbstractView,\n    BasicObjectDefinitionFactory,\n    copyObject,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DetailViewImplementation,\n    Field, Form,\n    FormDetailViewRenderer,\n    isSameMongo, ItemEvent, ItemViewListener,\n    jsxCreateElement,\n    jsxCreateFragment,\n    ObjectDefinitionRegistry,\n    StateChangeListener,\n    ViewFieldPermissionChecker\n} from \"ui-framework-jps\";\nimport {PatientListener} from \"./PatientListener\";\nimport {Decorator, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../AppTypes\";\n\nimport debug from 'debug';\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {PatientController} from \"./PatientController\";\nimport {BootstrapFormConfigHelper} from \"ui-framework-jps/dist/framework/ui/helper/BootstrapFormConfigHelper\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('patient-demographic-view');\n\nexport class NamePermissionChecker implements ViewFieldPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        let result = true;\n        if (dataObj.isStatus) {\n            if (field.getFieldDefinition().id === 'name') {\n                result = false; // cannot edit the names of the default status items\n            }\n        }\n        return result;\n    }\n}\n\nexport class PatientDemographicsCompositeView extends AbstractView implements DataObjectListener, PatientListener,StateChangeListener,ItemViewListener{\n\n    private static ICON_Linked = '<i class=\"fas fa-link\"></i>';\n    private static ICON_Unlinked = '<i class=\"fas fa-unlink\"></i>';\n\n    private currentPatient: any | null = null;\n    private initialised: boolean = false;\n    private nameView: DetailViewImplementation;\n    private contactView: DetailViewImplementation;\n    private basicsView: DetailViewImplementation;\n    private identifiersView: DetailViewImplementation;\n    private suburbElementId: string;\n    private postCodeElementId: string;\n    private contactForm: Form;\n    private fastPatientSearchEl: HTMLElement;\n    private btnLinkUnlinkEl: HTMLElement;\n    private linkToPatientId:string = '';\n    private isLinked: boolean;\n    private nameForm: Form;\n    private basicsForm: Form;\n    private identifiersForm: Form;\n\n    constructor() {\n        super({resultsContainerId: '', dataSourceId: 'patientDemographics'});\n        this.handlePostCodeSearch = this.handlePostCodeSearch.bind(this);\n        this.eventLinkUnlink = this.eventLinkUnlink.bind(this);\n        this.handlePatientSearch = this.handlePatientSearch.bind(this);\n    }\n\n    hidden(): void {\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.render();\n\n        PatientController.getInstance().addListener(this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.postCodes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch,this);\n    }\n\n    render(): void {\n        logger('render');\n\n        browserUtil.removeAllChildren(this.containerEl);\n\n        const demographicsView =\n            <div id={\"demographics-view\"} className={\"container-fluid mt-4\"}>\n                <div className={\"row\"}>\n                    <div id={\"patient-name\"} className={\"col-12-sm col-md-6 mb-2\"}>\n                        <div className=\"shadow card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Name Details</h5>\n                                <div className=\"card-text\" id={VIEW_CONTAINER.patientName}></div>\n                            </div>\n                        </div>\n                        <div className=\"shadow card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Contact Link</h5>\n                                <div className=\"card-text\">\n                                    <input type={'text'} id={'patient-demographics-fast-patient-search'}></input>\n                                    <button id={\"contact-link-unlink\"} className={\"ml-2 btn btn-primary\"}><i className=\"fas fa-link\"></i></button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div id={\"patient-basics\"} className={\"col-12-sm col-md-6 mb-2\"}>\n                        <div className=\"shadow card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Patient Basics</h5>\n                                <div className=\"card-text\" id={VIEW_CONTAINER.patientBasics}></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div id={\"patient-contact\"} className={\"col-12-sm col-md-6 mb-2\"}>\n                        <div className=\"shadow card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Contact Details</h5>\n                                <div className=\"card-text\" id={VIEW_CONTAINER.patientContact}></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div id={\"patient-identifiers\"} className={\"col-12-sm col-md-6 mb-2\"}>\n                        <div className=\"shadow card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Identifiers</h5>\n                                <div className=\"card-text\" id={VIEW_CONTAINER.patientIdentifiers}></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>;\n\n        // @ts-ignore\n        this.containerEl.append(demographicsView);\n        \n        this.fastPatientSearchEl = document.getElementById(\"patient-demographics-fast-patient-search\");\n        this.btnLinkUnlinkEl = document.getElementById(\"contact-link-unlink\");\n        this.btnLinkUnlinkEl.addEventListener('click', this.eventLinkUnlink);\n    }\n\n\n    show(): void {\n        if (!this.initialised) {\n\n            this.initialised = true;\n            // construct all the detail views\n            const nameDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.name);\n            const contactDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.contact);\n            const identifiersDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.identifiers);\n            const basicsDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.basics);\n\n\n\n\n            if (nameDef) {\n                const renderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.patientName, nameDef, new NamePermissionChecker(), BootstrapFormConfigHelper.getInstance(), true);\n\n                this.nameView = new DetailViewImplementation(\n                    {\n                        resultsContainerId: VIEW_CONTAINER.patientName,\n                        dataSourceId: VIEW_NAME.patientName\n                    }, renderer);\n\n                const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(nameDef);\n                this.nameView.onDocumentLoaded();\n                this.nameView.initialise(startingDisplayOrder, false, true);\n                this.nameView.show();\n\n                this.nameForm = renderer.getForm();\n                if (this.nameForm) {\n                    this.nameForm.addListener(this);\n                }\n            }\n\n            if (contactDef) {\n                const renderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.patientContact, contactDef, new NamePermissionChecker(), BootstrapFormConfigHelper.getInstance(), true);\n\n                this.contactView = new DetailViewImplementation(\n                    {\n                        resultsContainerId: VIEW_CONTAINER.patientContact,\n                        dataSourceId: VIEW_NAME.patientContact\n                    }, renderer);\n\n                const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(contactDef);\n                this.contactView.onDocumentLoaded();\n                this.contactView.initialise(startingDisplayOrder, false, true);\n                this.contactView.show();\n\n                this.contactForm = renderer.getForm();\n                logger(`Setting up fast search for post codes/suburbs`);\n                logger(this.contactForm);\n                this.contactForm.addListener(this);\n            }\n            if (basicsDef) {\n                const renderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.patientBasics, basicsDef, new NamePermissionChecker(), BootstrapFormConfigHelper.getInstance(), true);\n\n                this.basicsView = new DetailViewImplementation(\n                    {\n                        resultsContainerId: VIEW_CONTAINER.patientBasics,\n                        dataSourceId: VIEW_NAME.patientBasics\n                    }, renderer);\n\n                const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(basicsDef);\n                this.basicsView.onDocumentLoaded();\n                this.basicsView.initialise(startingDisplayOrder, false, true);\n                this.basicsView.show();\n\n                this.basicsForm = renderer.getForm();\n                if (this.basicsForm) {\n                    this.basicsForm.addListener(this);\n                }\n\n            }\n            if (identifiersDef) {\n                const renderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.patientIdentifiers, identifiersDef, new NamePermissionChecker(), BootstrapFormConfigHelper.getInstance(), true);\n\n                this.identifiersView = new DetailViewImplementation(\n                    {\n                        resultsContainerId: VIEW_CONTAINER.patientIdentifiers,\n                        dataSourceId: VIEW_NAME.patientIdentifiers\n                    }, renderer);\n\n                const startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(identifiersDef);\n                this.identifiersView.onDocumentLoaded();\n                this.identifiersView.initialise(startingDisplayOrder, false, true);\n                this.identifiersView.show();\n\n                this.identifiersForm = renderer.getForm();\n                if (this.identifiersForm) {\n                    this.identifiersForm.addListener(this);\n                }\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {}\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {}\n\n\n    handlePostCodeSearch(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        const postCode = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.postCodes, {_id: ui.item.value});\n        if (postCode && this.contactForm) {\n            this.contactForm.setFieldValue('suburb',postCode.suburb);\n            this.contactForm.setFieldValue('postcode',postCode.postcode);\n            this.contactForm.setFieldValue('state',postCode.state);\n            this.markPatientChanged();\n        }\n    }\n\n    handlePatientSearch(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.value = ui.item.label;\n        this.linkToPatientId = ui.item.value;\n    }\n\n    patientClosed(patient: any): void {\n        this.viewHasChanged = false;\n        logger(`handling patient closed`);\n        if (this.currentPatient && patient) {\n            if (isSameMongo(this.currentPatient, patient)) {\n                logger(`handling patient closed - is the current patient`);\n                this.currentPatient = null;\n                this.basicsView.clearDisplay();\n                this.contactView.clearDisplay();\n                this.identifiersView.clearDisplay();\n                this.nameView.clearDisplay();\n            }\n        }\n    }\n\n    patientLoaded(patient: any): void {\n        this.viewHasChanged = false;\n        logger(`handling patient loaded`);\n        if (this.currentPatient && patient) {\n            if (isSameMongo(this.currentPatient, patient)) {\n                logger(`handling patient loaded - is the current patient - updating full details`);\n                this.currentPatient = patient;\n                this.basicsView.displayItem(patient);\n                this.contactView.displayItem(patient.contact);\n                this.identifiersView.displayItem(patient.identifiers);\n                this.nameView.displayItem(patient.name);\n                if (this.isLinked) {\n                    this.setLinked(true,false);\n                }\n                logger(this.currentPatient);\n            }\n        }\n    }\n\n    patientSaved(patient: any): void {\n        logger(`handling patient saved`);\n        if (this.currentPatient && patient) {\n            if (isSameMongo(this.currentPatient, patient)) {\n                logger(`handling patient saved - is the current patient`);\n                this.patientSelected(patient);\n            }\n        }\n\n    }\n\n    eventLinkUnlink(event:MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        // reverse any link\n        if (this.isLinked) {\n            this.setLinked(false);\n        }\n        else {\n            if (this.linkToPatientId.trim().length > 0) {\n                this.setLinked(true);\n            }\n        }\n    }\n\n    private setLinked(isLinked:boolean,isChange:boolean = true):void {\n        if (isLinked) {\n            this.isLinked = true;\n\n            const linkedToPatient = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch,{_id:this.linkToPatientId});\n            if (linkedToPatient) { // show the patient linked to\n                // @ts-ignore\n                this.fastPatientSearchEl.value = `${linkedToPatient.name.firstname} ${linkedToPatient.name.surname}`;\n\n                if (this.currentPatient.contact) {\n\n                    this.currentPatient.oldContact = copyObject(this.currentPatient.contact);\n\n                    this.currentPatient.contact.line1 = linkedToPatient.contact.line1;\n                    this.currentPatient.contact.line2 = linkedToPatient.contact.line2;\n                    this.currentPatient.contact.suburb = linkedToPatient.contact.suburb;\n                    this.currentPatient.contact.postcode = linkedToPatient.contact.postcode;\n                    this.currentPatient.contact.country = linkedToPatient.contact.country;\n                    this.currentPatient.contact.home = linkedToPatient.contact.home;\n                    this.currentPatient.contact.mobile = linkedToPatient.contact.mobile;\n                    this.currentPatient.contact.owner = linkedToPatient._id;\n                    this.currentPatient.contact._id = linkedToPatient.contact._id;\n                }\n                else {\n                    this.currentPatient.contact = copyObject(linkedToPatient.contact);\n                }\n                this.contactView.displayItem(this.currentPatient.contact);\n                // set the contact elements to readonly\n                this.contactForm.setFieldReadOnly('line1');\n                this.contactForm.setFieldReadOnly('line2');\n                this.contactForm.setFieldReadOnly('suburb');\n                this.contactForm.setFieldReadOnly('postcode');\n                this.contactForm.setFieldReadOnly('country');\n                this.contactForm.setFieldReadOnly('home');\n                this.contactForm.setFieldReadOnly('mobile');\n            }\n            this.btnLinkUnlinkEl.innerHTML = PatientDemographicsCompositeView.ICON_Unlinked;\n        }\n        else {\n            this.isLinked = false;\n\n            if (this.currentPatient.oldContact) {\n                this.currentPatient.contact = this.currentPatient.oldContact;\n                delete this.currentPatient.oldContact;\n            }\n            else {\n                this.currentPatient.contact._id = v4();\n                this.currentPatient.contact.owner = this.currentPatient._id;\n            }\n            this.contactView.displayItem(this.currentPatient.contact);\n\n            // enable the contact elements\n            this.contactForm.clearFieldReadOnly('line1');\n            this.contactForm.clearFieldReadOnly('line2');\n            this.contactForm.clearFieldReadOnly('suburb');\n            this.contactForm.clearFieldReadOnly('postcode');\n            this.contactForm.clearFieldReadOnly('country');\n            this.contactForm.clearFieldReadOnly('home');\n            this.contactForm.clearFieldReadOnly('mobile');\n            // @ts-ignore\n            this.fastPatientSearchEl.value = '';\n            this.linkToPatientId = '';\n            this.btnLinkUnlinkEl.innerHTML = PatientDemographicsCompositeView.ICON_Linked;\n        }\n\n        if (isChange) {\n            this.contactForm.setChanged();\n            this.markPatientChanged();\n        }\n    }\n\n    private resetLink():void {\n        this.isLinked = false;\n\n        this.contactForm.clearFieldReadOnly('line1');\n        this.contactForm.clearFieldReadOnly('line2');\n        this.contactForm.clearFieldReadOnly('suburb');\n        this.contactForm.clearFieldReadOnly('postcode');\n        this.contactForm.clearFieldReadOnly('country');\n        this.contactForm.clearFieldReadOnly('home');\n        this.contactForm.clearFieldReadOnly('mobile');\n        // @ts-ignore\n        this.fastPatientSearchEl.value = '';\n        this.linkToPatientId = '';\n        this.btnLinkUnlinkEl.innerHTML = PatientDemographicsCompositeView.ICON_Linked;\n    }\n\n\n    patientSelected(patient: any): void {\n        this.viewHasChanged = false;\n        logger(`handling patient selected`);\n        logger(patient);\n        this.currentPatient = patient;\n        this.basicsView.displayItem(patient);\n        this.contactView.displayItem(patient.contact);\n        this.identifiersView.displayItem(patient.identifiers);\n        this.nameView.displayItem(patient.name);\n\n        let dob = \"\";\n        if (patient.dob) dob = moment(patient.dob,'YYYYMMDD').format('DD/MM/YYYY');\n\n        let linkIcon = '<i class=\"fas fa-link\"></i>';\n        this.resetLink();\n\n        if (patient.contact) {\n            if (patient.contact.owner) {\n                if (patient.contact.owner !== patient._id) {\n                    linkIcon = '<i class=\"fas fa-unlink\"></i>';\n                    this.linkToPatientId = patient.contact.owner;\n                    this.setLinked(true,false);\n                }\n            }\n        }\n        this.btnLinkUnlinkEl.innerHTML = linkIcon;\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {}\n\n    getListenerName(): string {\n        return \"\";\n    }\n\n    stateChanged(managerName: string, name: string, newState: any): void {\n        if (name === STATE_NAMES.postCodes) {\n            if (this.contactForm) {\n                logger(`Handling post codes`);\n                const fastSearchValues: any = [];\n                newState.forEach((item: any) => {\n                    const searchValue = {\n                        label: `${item.suburb} ${item.postcode} ${item.state}`,\n                        value: item._id,\n                    };\n                    fastSearchValues.push(searchValue);\n                });\n                logger (`Number of post codes ${fastSearchValues.length}`);\n\n                this.suburbElementId = this.contactForm.getElementIdForField('suburb');\n                let el = document.getElementById(this.suburbElementId);\n                logger(el);\n                logger(`Setting up fast search for suburbs ${this.suburbElementId}`);\n                const postCodeSearchElBySuburb = $(el);\n                logger(postCodeSearchElBySuburb);\n                // @ts-ignore\n                postCodeSearchElBySuburb.on('autocompleteselect',this.handlePostCodeSearch);\n                postCodeSearchElBySuburb.autocomplete({source: fastSearchValues});\n                postCodeSearchElBySuburb.autocomplete('option', {disabled: false, minLength: 2});\n\n                this.postCodeElementId = this.contactForm.getElementIdForField('postcode');\n                el = document.getElementById(this.postCodeElementId);\n                logger(`Setting up fast search for suburbs ${this.postCodeElementId}`);\n                const postCodeSearchElByPostCode = $(el);\n                logger(postCodeSearchElByPostCode);\n                // @ts-ignore\n                postCodeSearchElByPostCode.on('autocompleteselect',this.handlePatientSearch);\n                postCodeSearchElByPostCode.autocomplete({source: fastSearchValues});\n                postCodeSearchElByPostCode.autocomplete('option', {disabled: false, minLength: 2});\n\n            }\n        }\n        if (name === STATE_NAMES.patientSearch) {\n                logger(`Handling patient search`);\n                const fastSearchValues: any = [];\n                newState.forEach((item: any) => {\n                    const searchValue = {\n                        label: `${item.name.firstname} ${item.name.surname}`,\n                        value: item._id,\n                    };\n                    fastSearchValues.push(searchValue);\n                });\n\n                logger(`Setting up fast search for suburbs ${this.fastPatientSearchEl}`);\n                const autocompletePatientSearch = $(this.fastPatientSearchEl);\n                logger(autocompletePatientSearch);\n                // @ts-ignore\n                autocompletePatientSearch.on('autocompleteselect',this.handlePatientSearch);\n                autocompletePatientSearch.autocomplete({source: fastSearchValues});\n                autocompletePatientSearch.autocomplete('option', {disabled: false, minLength: 2});\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    valuesChanged(name: string, event: ItemEvent, rowValues?: any): boolean {\n        return false;\n    }\n\n    viewHasChanges(name: string): void {\n        if (name === VIEW_NAME.patientIdentifiers) {\n            this.currentPatient.modifiedDates.identifiers = parseInt(moment().format('YYYYMMDDHHmmss'));\n        }\n\n        this.markPatientChanged();\n    }\n\n    markPatientChanged():void {\n        this.viewHasChanged = true;\n        this.currentPatient.decorator = Decorator.Modified;\n        this.currentPatient.modified = parseInt(moment().format('YYYYMMDDHHmmss'));\n        this.currentPatient.modifiedBy = Controller.getInstance().getLoggedInUsername();\n        PatientController.getInstance().getStateManager().updateItemInState(STATE_NAMES.openPatients,this.getCurrentPatient(),false);\n    }\n\n    getCurrentPatient():any {\n        let result = this.currentPatient;\n\n        result.contact = this.contactForm.getFormattedDataObject();\n        result.name = this.nameForm.getFormattedDataObject();\n        result.identifiers = this.identifiersForm.getFormattedDataObject();\n        let basics = this.basicsForm.getFormattedDataObject();\n        result.dob = basics.dob;\n        result.dod = basics.dod;\n        result.gender = basics.gender;\n        result.ethnicity = basics.ethnicity;\n        result.countryofbirth = basics.countryofbirth;\n\n        return result;\n    }\n\n    patientChanged(patient: any): void {\n        logger(`Patient changed`);\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n}\n","import React from \"react\";\nimport {PatientRecordTabularView} from \"./PatientRecordTabularView\";\nimport {PatientDemographicsCompositeView} from \"./PatientDemographicsCompositeView\";\n\n\nexport class PatientRecordReact extends React.Component {\n    constructor(props:any) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"patientRecord\" className=\"container-fluid d-none\"></div>\n        )\n    }\n\n    componentDidMount() {\n        const patientView = PatientRecordTabularView.getInstance();\n        patientView.addViewToTab('demographics', new PatientDemographicsCompositeView());\n        patientView.onDocumentLoaded();\n    }\n}","import debug from \"debug\";\nimport Controller from \"../Controller\";\nimport {Decorator, STATE_NAMES} from \"../AppTypes\";\nimport {isSameMongo, StateChangeListener} from \"ui-framework-jps\";\nimport moment from \"moment\";\nimport {PatientController} from \"../patients/PatientController\";\nimport React, {ReactNode} from \"react\";\n\nconst logger = debug('todays-patients-view');\n\nexport class TodaysPatientsView extends React.Component implements StateChangeListener {\n    private static _instance: TodaysPatientsView;\n    private currentProviderNo = '';\n    private containerEl: HTMLElement;\n    private patients: any[] = [];\n    private patientIdsNotYetLoaded: string[] = [];\n    private patientsNotYetLoaded: string[] = [];\n    private applicationView: any | null = null;\n\n    constructor(props: any) {\n        super(props);\n        TodaysPatientsView._instance = this;\n        this.handleOpenPatient = this.handleOpenPatient.bind(this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patients, this);\n    }\n\n    public static getInstance(): TodaysPatientsView {\n        if (!(TodaysPatientsView._instance)) {\n            TodaysPatientsView._instance = new TodaysPatientsView({});\n        }\n        return TodaysPatientsView._instance;\n    }\n\n    public addPatientSummary(patientSummary: any): void {\n        logger(`Adding patient summary`);\n        logger(patientSummary);\n        // make sure we don't add duplicates\n        const foundIndex = this.patients.findIndex((patient) => patient._id === patientSummary._id);\n        logger(`Adding patient summary ${foundIndex}`);\n        if (foundIndex < 0) {\n            logger(`Adding NON-DUPLICATE patient summary`);\n            patientSummary.decorator = Decorator.Incomplete;\n            this.patients.push(patientSummary);\n            // this.render();\n            this._render();\n\n            // ask the controller to find the full patient record\n            this.patientsNotYetLoaded.push(patientSummary._id);\n            Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patients, patientSummary);\n        }\n    }\n\n    public addPatientSummaryById(patientId: string): void {\n        logger(`Adding patient summary by Id ${patientId}`);\n\n        const patientSummary: any = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: patientId});\n        logger(patientSummary);\n        if (patientSummary && patientSummary._id) {\n            this.addPatientSummary(patientSummary)\n        } else {\n            this.patientIdsNotYetLoaded.push(patientId);\n        }\n\n    }\n\n    public replacePatientSummaryWithPatient(patient: any): void {\n        logger(`Replacing patient summary with patient ${patient._id}`);\n        // replace the current patient\n        const foundIndex = this.patients.findIndex((patientObj) => isSameMongo(patientObj, patient));\n        if (foundIndex >= 0) {\n            patient.decorator = Decorator.Complete;\n            this.patients.splice(foundIndex, 1, patient);\n        } else {\n            this.patients.push(patient);\n        }\n        // this.render();\n        this._render();\n    }\n\n    public removePatient(patient: any): void {\n        logger(`Removing patient with id ${patient._id}`);\n        const foundIndex = this.patients.findIndex((patientObj) => isSameMongo(patientObj, patient));\n        if (foundIndex >= 0) {\n            this.patients.splice(foundIndex, 1);\n            // this.render();\n            this._render();\n        }\n    }\n\n    public onDocumentLoaded(applicationView: any): void {\n        logger(`on document loaded`);\n        this.applicationView = applicationView;\n        this.currentProviderNo = Controller.getInstance().getLoggedInUsername();\n        this.containerEl = document.getElementById('todays-patients');\n    }\n\n    public render(): ReactNode {\n        logger(`render`);\n\n        //browserUtil.removeAllChildren(this.containerEl);\n\n        const address = (patient: any) => {\n            let buffer = '';\n            if (patient.contact) {\n                buffer = patient.contact.line1;\n                if (patient.contact.line2.trim().length > 0) {\n                    buffer += ', ' + patient.contact.line2;\n                }\n                buffer += ', ' + patient.contact.suburb;\n                buffer += ', ' + patient.contact.state;\n                buffer += ' ' + patient.contact.postcode;\n\n            }\n            return buffer;\n        }\n\n        const incompletePatientCard = (patient: any) => {\n            return (\n                <div className=\"shadow card col-sm-12 col-md-4 mr-1 mt-2\">\n                    <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\"><a href={\"#\"} data-id={patient._id}\n                                                      onClick={this.handleOpenPatient}>{patient.name.firstname} {patient.name.surname}</a>\n                        </h5>\n                        <h6 className=\"card-subtitle mb-2 text-muted\">DOB: {moment(patient.dob).format('DD/MM/YYYY')}</h6>\n                        <p className=\"card-text\">{address(patient)}</p>\n                    </div>\n                </div>\n            );\n        };\n\n\n        const patientCard = (patient: any) => {\n            return (\n                <div className=\"shadow card col-sm-12 col-md-4 mr-1 mt-2 w-100\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\"><a href={\"#\"} data-id={patient._id}\n                                                      onClick={this.handleOpenPatient}>{patient.name.firstname} {patient.name.surname}</a>\n                        </h5>\n                        <h6 className=\"card-subtitle mb-2 text-muted\">DOB: {moment(patient.dob).format('DD/MM/YYYY')}</h6>\n                        <p className=\"card-text\">{address(patient)}</p>\n                    </div>\n                </div>);\n        };\n\n        // this.patients.forEach((patient) => {\n        //     if (patient.decorator === Decorator.Incomplete) {\n        //         // @ts-ignore\n        //         this.containerEl.appendChild(incompletePatientCard(patient));\n        //     }\n        //     else {\n        //         // @ts-ignore\n        //         this.containerEl.appendChild(patientCard(patient));\n        //     }\n        //\n        // });\n        const patientMap = this.patients.map((patient) => {\n            return (\n                <React.Fragment>\n                    {(patient.decorator === Decorator.Incomplete) ? incompletePatientCard(patient) : patientCard(patient)}\n                </React.Fragment>\n            );\n        });\n\n        return (\n            <React.Fragment>\n                {patientMap}\n            </React.Fragment>\n        );\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Todays Patients View\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.patientSearch) {\n            logger(`loading patient ids from fast patient search that we couldn't find yet`);\n            // load the patients we couldn't find yet\n            this.patientIdsNotYetLoaded.forEach((patientId) => {\n                this.addPatientSummaryById(patientId);\n            });\n            this.patientIdsNotYetLoaded = [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    // @ts-ignore\n    protected handleOpenPatient(event: MouseEvent<HTMLAnchorElement>) {\n        console.log('blah');\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const patientId = event.target.getAttribute('data-id');\n        logger(`Handling open patient with patient id ${patientId}`)\n        if (patientId) {\n            const foundIndex = this.patients.findIndex((patient) => isSameMongo(patient, {_id: patientId}));\n            if (foundIndex >= 0) {\n                PatientController.getInstance().openPatientRecord(this.patients[foundIndex]);\n            }\n        }\n    }\n\n    private _render() {\n        if (this.applicationView) this.applicationView.setState({todaysPatients: this.patients});\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n        console.log(foundItem);\n        if (name === STATE_NAMES.patients) {\n            logger(`Patient added to state with id ${foundItem._id}`);\n            // was this a patient we asked for?\n            const foundIndex = this.patientsNotYetLoaded.findIndex((patientId) => patientId === foundItem._id);\n            if (foundIndex >= 0) {\n                // remove from our internal queue\n                this.patientsNotYetLoaded.splice(foundIndex, 1);\n                this.replacePatientSummaryWithPatient(foundItem);\n            }\n        }\n    }\n\n\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkpatient_booking_system\"] = self[\"webpackChunkpatient_booking_system\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","patientSearch","recentPatientSearches","openPatients","appointments","appointmentTypes","clinicConfig","providers","appointmentTemplates","patients","basics","name","contact","identifiers","flags","warnings","allergies","consults","history","results","scripts","scriptHistory","scriptArchive","recalls","tasks","documents","letters","vaccinations","wcc","modifiedDates","loadedPatients","postCodes","API_Config","login","graphQL","patientDemographics","NAVIGATION","appointmentBook","clinicChat","patientRecord","logout","today","DRAGGABLE","typeUser","fromUserSearch","typePatientSummary","fromPatientSearch","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","appointmentTypeDetail","userDetail","patientName","patientBasics","patientContact","patientIdentifiers","VIEW_CONTAINER","calendarControl","calendarDetail","PatientSearchSidebarPrefs","id","expandedSize","location","SidebarLocation","left","PatientSearchSidebarContainers","container","openRecords","AppointmentTypesSidebarPrefs","AppointmentTypesSidebarContainers","list","detail","colourPicker","UsersSidebarPrefs","right","UsersSidebarContainers","SELECT","appointmentType","cLogger","debug","cLoggerDetail","generate","result","field","patientQuery","constructor","getInstance","Controller","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","find","findAll","create","update","destroy","idField","qlSM","GraphQLApiStateManager","apiURL","apis","data","aggregateSM","memorySM","asyncREST","asyncQL","PatientObjectDefinitions","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","loggedInUser","getLoggedInUsername","getProviderNo","isProvider","handleMessage","getCurrentUser","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","handleShowChat","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","v4","addWorkoutExercisesToCurrentWorkout","workout","exercise","filterResults","setupDataObjectDefinitions","apptTypeDef","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","statusFieldDef","userDef","isCurrentFieldDef","isProviderFieldDef","resetPasswordFieldDef","passwordFieldDef","generator","onCreation","onModify","getServerAPIURL","window","foundResult","getValue","dataObj","durationRegexp","duration1Valid","duration2Valid","duration1Components","duration1","duration2Components","duration2","carry","duration1Seconds","parseInt","duration2Seconds","sumSeconds","duration1Minutes","duration2Minutes","sumMinutes","duration1Hours","duration2Hours","sumHours","time","startTimeHours","Math","startTimeMinutes","appointmentDuration","duration","endTimeHours","endTimeMinutes","timeString","slLogger","handleDataChangedByAnotherUser","message","type","user","stateObj","SecurityManager","DataChangeType","logger","dataElements","oldEvent","tempEvent","currentFirstDate","currentLastDate","currentFirstDateDayNumber","AppointmentControllerHelper","AppointmentTemplateController","loadedPatientSearch","loadedProviders","AppointmentTemplateFilterView","AppointmentTemplateView","loadedClinicAppointmentBookConfig","loadedAppointmentTypes","AppointmentTemplateDetailModal","getModel","getEventForAppointmentTemplate","template","loadDate","onPageLoading","moment","event","appointment","inst","refreshDisplay","datePickerResponsive","medium","controls","touchUi","datetimePickerResponsive","viewElements","popup","range","deleteButton","appointmentTypeEl","appointmentTypeDropdown","providersDropdown","close","isVisible","applyClinicConfig","stepMinute","dragTimeStep","document","display","contentPadding","fullScreen","responsive","width","datepicker","select","startInput","endInput","showRangeLabels","maxTime","onChange","date","args","setupAppointmentTypeDropDown","setupProviderDropdown","startCreateAppointmentTemplate","headerText","buttons","text","keyCode","handler","mobiId","appointmentId","colour","AppointmentController","createdOn","updatedEvent","allDay","start","end","free","color","editable","resource","createdBy","created","modified","provider","cssClass","anchor","elm","updateAppointmentTemplate","ev","currentTarget","setupActionButtons","deletedEvent","snackbar","button","action","registerComponent","populateProviders","labelEl","inputEl","enhance","checkboxList","selected","i","checkbox","value","resources","calendar","getCalender","options","Object","groupBy","eventcalendar","clickToCreate","dragToCreate","dragToMove","dragToResize","showControls","view","invalidateEvent","invalid","setupProviders","providersCollection","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElement","attributes","classes","keyId","keyType","KeyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElement","item","sorter","AppointmentTypesCollectionView","sortAppointmentTypes","displayOrders","fieldId","displayOrder","tableUIConfig","BootstrapTableConfigHelper","ContextualInformationHelper","item1","item2","getItemDescription","buffer","canDeleteItem","selectedItem","compareItemsForEquality","isSameMongo","getIdForItemInNamedCollection","renderDisplayForItemInNamedCollection","containerEl","hasPermissionToDeleteItemInNamedCollection","getModifierForItemInNamedCollection","Modifier","hasPermissionToUpdateItem","hasPermissionToDeleteItem","hasPermissionToEditField","apptTypes","containerId","apptTypeDefinition","apptTypeDetailRenderer","BootstrapFormConfigHelper","apptTypeDetailView","viewLinker","startingDisplayOrder","createApptType","datePicker","AppointmentBookView","AppointmentDetailModal","PatientController","min","setupDatePicker","dateFormat","dayNamesMin","showWeekNumbers","loadDateFinish","AppointmentFilterView","loadDateDayNumber","appointmentsForTheDay","addTemplateEvents","foundIndex","currentAppointments","appt","templatedAppt","titleInput","descriptionTextarea","patientArrivedButton","patientCancelledButton","patientDNAButton","readyForBillingButton","billingCompleteButton","patientSearchEl","patientSearchDropdown","warningsEl","getInst","startCreateAppointment","title","description","patientId","isDNA","isCancelled","arrivalTime","mobiscroll5","updateAppointment","warningsText","setupPatientSearchDropDown","patientsCollection","patient","surname","firstname","_id","filter","originalEvent","originalType","originalNote","getPatientWarnings","patientBasicDetails","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","priorityId","clinicChatFastPatientSearch","listeners","APP_STATE_NAMES","ClinicChatDetailView","fastSearchEl","$","hasActionPermission","canSelectItem","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","getSecondaryModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","itemDeselected","roomName","itemSelected","itemDeleted","hideRequested","handlePatientDrop","draggedObjectJSON","draggedObject","JSON","APP_DRAGGABLE","simpleAttachment","identifier","displayText","iconClasses","sentMessage","Priority","messageEl","browserUtil","handleChatLogUpdated","handleAddMessage","messageContent","priority","isNaN","addChatMessage","chatMessageEl","messageSenderEl","contentEl","classesTextAppend","attachment","attachmentLinkEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","fastSearchValues","newState","searchValue","label","source","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","itemDragStarted","itemAction","documentLoaded","showRequested","itemDropped","getName","hidden","getDataSourceKeyId","getUIConfig","render","show","getItemId","handlePatientSelected","ui","handleAttachmentClicked","dataType","dataId","listener","addAttachmentListener","checkCanComment","clearChatLog","dLogger","badge","secondBadge","thirdBadge","attributeName","comparison","ComparisonType","equals","ClinicChatListView","sort","selectedChatLog","doNotDisturbEl","toggleDoNotDisturb","checked","doNotDisturb","showNormalPriorityMessageNotifications","showHighPriorityMessageNotifications","showUrgentPriorityMessageNotifications","showNormalPriorityMessageNotificationsInOS","showHighPriorityMessageNotificationsInOS","showUrgentPriorityMessageNotificationsInOS","showInvitationDeclinedNotifications","showInvitedNotifications","showOfflineMessageNotification","showFavouriteUserLoggedInNotification","showFavouriteUserLoggedOutNotification","showUserJoinLeaveChatNotification","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","isSameRoom","selectChatRoom","room","getSecondaryBadgeValueForItemInNamedCollection","getTertiaryBadgeValueForItemInNamedCollection","newValue","updateStateManager","SidebarPrefs","SidebarContainers","ClinicChatSidebar","chatView","chatLogView","APPOINTMENT_STATUS_ARRIVED","APPOINTMENT_STATUS_READY_FOR_BILLING","APPOINTMENT_STATUS_BILLING_COMPLETE","APPOINTMENT_TYPE_PATIENT_CANCELLED","APPOINTMENT_TYPE_PATIENT_DNA","addListener","haveAppointentTypesLoaded","havePatientSearchesLoaded","haveProvidersLoaded","hasClinicConfigLoaded","getAppointmentTypes","getPatientSearch","getProviders","getClinicConfig","config","schedule","startDay","endDay","startTime","endTime","timeCellStep","timeLabelStep","recurring","repeat","weekDays","getIconForAppointmentType","icon","getIconsForEvent","getColourForAppointmentType","getColourForAppointmentTemplate","getColourForAppointment","getEventForAppointment","canEdit","computeTimeStringFromStartTimeAndDurationInSeconds","readyForBilling","billingItems","isBilled","getAppointmentFromEvent","note","_patient","nonStatusAppointmentTypes","getEventForAppointmentTemplateForDate","startDate","dayNumber","getAppointmentTemplateFromEvent","day","handleAppointmentTemplateRendering","handleAppointmentRendering","loadPatientDefinitions","nameDef","contactDef","identifiersDef","fieldDef","basicsDef","vLogger","vLoggerDetail","ACTION_CLOSE","ACTION_SAVE","drop","acceptFrom","acceptTypes","extraActions","OpenPatientsView","confirm","sortPatients","getItemInNamedCollection","openPatientRecordWithPatientId","copyObject","openPatientRecord","App","_closeRecord","closePatientRecord","AlertManager","savePatientRecord","foundItem","itemNewValue","actionName","droppedItem","PatientRecordTabularView","isPatientInOpenList","attachmentClicked","completed","AlertType","TAB_DEMOGRAPHICS","TAB_CONSULTS","TAB_SCRIPTS","TAB_RESULTS","TAB_DOCUMENTS","TAB_VACCINATIONS","TAB_WORKCOVER","TAB_TASKS","TAB_ARCHIVE","containedById","tabViewContainer","tabBarContainer","tabBarElement","tabularViewContainer","tabs","element","subElement","innerHTML","isDefaultActive","recentSearches","PatientSearchSidebar","fastSearchInputId","dataLimit","quickDelete","drag","from","PatientSearchView","eventPatientSelected","TodayController","TodayView","currentProvider","TodaysPatientsView","currentProviderNo","UserValidationHelper","setupValidationForDetailsForm","rule","viewMode","ViewMode","targetDataFieldId","response","ConditionResponse","conditions","ValidationManager","isNotNull","sourceDataFieldId","values","applyRulesToTargetField","ruleFailed","form","onlyRulesOfType","resetField","resetValue","passwordField","passwordValue","UsersCollectionView","sortUsers","detailRenderer","usersDetailView","detailForm","createUser","React","ReactDOM","SidebarViewContainer","setOptions","AppointmentTypesCompositeView","UsersCompositeView","AppointmentBookReact","AppointmentTemplatesReact","PatientRecordReact","Component","_instance","thisEl","chatNavigationItem","apptTypeSidebar","usersSidebar","todaysPatients","state","bind","handleShowAppointmentBook","handleShowAppointmentTemplates","handleShowPatientRecord","handleShowPatientSearch","handleShowAppointmentTypes","handleShowUsers","handleShowToday","localStorage","componentDidMount","getElementById","setupNavigationItemHandling","hideAllSideBars","eventHide","href","eventShow","countChanged","unreadNormalMessages","unreadHighMessages","unreadUrgentMessages","preventDefault","stopPropagation","addRemoveClasses","templateEl","apptTypesEl","usersEl","todayEl","plugin","log","console","info","theme","themeVariant","props","AbstractView","DetailViewImplementation","FormDetailViewRenderer","jsxCreateElement","jsxCreateFragment","NamePermissionChecker","isStatus","getFieldDefinition","PatientDemographicsCompositeView","ICON_Linked","ICON_Unlinked","currentPatient","initialised","linkToPatientId","handlePostCodeSearch","eventLinkUnlink","handlePatientSearch","addChangeListenerForName","removeAllChildren","demographicsView","append","fastPatientSearchEl","btnLinkUnlinkEl","findDefinition","renderer","nameView","generateStartingDisplayOrder","initialise","nameForm","getForm","contactView","contactForm","basicsView","basicsForm","identifiersView","identifiersForm","controller","typeName","target","innerText","postCode","findItemInState","setFieldValue","suburb","postcode","markPatientChanged","patientClosed","viewHasChanged","clearDisplay","patientLoaded","displayItem","isLinked","setLinked","patientSaved","patientSelected","trim","length","isChange","linkedToPatient","oldContact","line1","line2","country","home","mobile","owner","setFieldReadOnly","clearFieldReadOnly","setChanged","resetLink","dob","format","linkIcon","managerName","forEach","push","suburbElementId","getElementIdForField","el","postCodeSearchElBySuburb","on","autocomplete","postCodeElementId","postCodeSearchElByPostCode","autocompletePatientSearch","itemAdded","itemRemoved","itemUpdated","valuesChanged","rowValues","viewHasChanges","decorator","Modified","modifiedBy","updateItemInState","getCurrentPatient","getFormattedDataObject","dod","gender","ethnicity","countryofbirth","patientChanged","patientView","addViewToTab","patientIdsNotYetLoaded","patientsNotYetLoaded","applicationView","handleOpenPatient","addPatientSummary","patientSummary","findIndex","Incomplete","_render","addPatientSummaryById","replacePatientSummaryWithPatient","patientObj","Complete","splice","removePatient","address","incompletePatientCard","patientCard","patientMap","map","getAttribute","setState"],"sourceRoot":""}