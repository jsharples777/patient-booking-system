{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://patient-booking-system/./src/AppTypes.ts","webpack://patient-booking-system/./src/Controller.ts","webpack://patient-booking-system/./src/DurationFunctions.ts","webpack://patient-booking-system/./src/SocketListenerDelegate.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateController.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateDetailModal.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateFilterView.ts","webpack://patient-booking-system/./src/appointment-templates/AppointmentTemplateView.ts","webpack://patient-booking-system/./src/appointment-types/AppointmentTypesCollectionView.ts","webpack://patient-booking-system/./src/appointment-types/AppointmentTypesCompositeView.ts","webpack://patient-booking-system/./src/appointments/AppointmentBookView.ts","webpack://patient-booking-system/./src/appointments/AppointmentController.ts","webpack://patient-booking-system/./src/appointments/AppointmentDetailModal.ts","webpack://patient-booking-system/./src/appointments/AppointmentFilterView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatDetailView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatListView.ts","webpack://patient-booking-system/./src/clinic-chat/ClinicChatSidebar.ts","webpack://patient-booking-system/./src/helper/AppointmentControllerHelper.ts","webpack://patient-booking-system/./src/patients/PatientRecordTabularView.ts","webpack://patient-booking-system/./src/patients/PatientSearchSidebar.ts","webpack://patient-booking-system/./src/patients/PatientSearchView.ts","webpack://patient-booking-system/./src/renderer/TabularItemViewRenderer.ts","webpack://patient-booking-system/./src/today/TodayController.ts","webpack://patient-booking-system/./src/today/TodayView.ts","webpack://patient-booking-system/./src/users/UserValidationHelper.ts","webpack://patient-booking-system/./src/users/UsersCollectionView.ts","webpack://patient-booking-system/./src/users/UsersCompositeView.ts","webpack://patient-booking-system/./src/App.tsx","webpack://patient-booking-system//Users/jimsharples/Development/patient-booking-system/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://patient-booking-system/webpack/bootstrap","webpack://patient-booking-system/webpack/runtime/chunk loaded","webpack://patient-booking-system/webpack/runtime/compat get default export","webpack://patient-booking-system/webpack/runtime/define property getters","webpack://patient-booking-system/webpack/runtime/hasOwnProperty shorthand","webpack://patient-booking-system/webpack/runtime/make namespace object","webpack://patient-booking-system/webpack/runtime/node module decorator","webpack://patient-booking-system/webpack/runtime/jsonp chunk loading","webpack://patient-booking-system/webpack/before-startup","webpack://patient-booking-system/webpack/startup","webpack://patient-booking-system/webpack/after-startup"],"sourcesContent":["import {SidebarLocation, SidebarPrefs} from \"ui-framework-jps\";\n\n\nexport enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch',\n    patientSearch: 'fastSearchNames',\n    recentPatientSearches: 'recentPatientSearches',\n    appointments: 'appointment',\n    appointmentTypes: 'appointmentType',\n    clinicConfig: 'clinicConfig',\n    providers: 'provider',\n    appointmentTemplates: 'appointmentTemplate',\n    patients: 'patient'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphQL',\n    users: '/api/users',\n    clinicConfig: '/api/clinic-config',\n    patients: '/api/patients',\n    patientDemographics: '/api/demographics'\n};\n\nexport const NAVIGATION = {\n    appointmentBook: 'navigationItemAppointmentBook',\n    patientSearch: 'navigationItemPatientSearch',\n    appointmentTemplates: 'navigationItemAppointmentTemplating',\n    clinicChat: 'navigationItemChat',\n    patientRecord: 'navigationItemPatientRecord',\n    logout: 'navigationItemLogout',\n    appointmentTypes: 'navigationItemAppointmentTypes',\n    users: 'navigationItemUsers',\n    today: 'navigationItemToday'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    typePatientSummary: 'patientSummary',\n    fromPatientSearch: 'patientSearch'\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    userSearch: 'userSearch',\n    patientSearch: 'patientSearch',\n    appointmentTypes: 'appointmentTypes',\n    appointmentTypeDetail: 'appointmentTypeDetail',\n    users: 'usersList',\n    userDetail:'userDetail'\n}\n\nexport const VIEW_CONTAINER = {\n    calendarControl: 'calendarControl',\n    calendarDetail: 'calendarDetail'\n}\n\n\nexport const PatientSearchSidebarPrefs: SidebarPrefs = {\n    id: 'patientSearchSideBar',\n    expandedSize: '40%',\n    location: SidebarLocation.left\n}\n\nexport const PatientSearchSidebarContainers = {\n    container: 'recentPatientSearches',\n}\n\nexport const AppointmentTypesSidebarPrefs: SidebarPrefs = {\n    id: 'appointmentTypesSideBar',\n    expandedSize: '50%',\n    location: SidebarLocation.left\n}\n\nexport const AppointmentTypesSidebarContainers = {\n    list: 'appointmentTypes',\n    detail: 'appointmentTypeDetail',\n    colourPicker: 'appointmentTypeColour'\n}\n\nexport const UsersSidebarPrefs: SidebarPrefs = {\n    id: 'usersSideBar',\n    expandedSize: '40%',\n    location: SidebarLocation.right\n}\n\nexport const UsersSidebarContainers = {\n    list: 'usersList',\n    detail: 'userDetail'\n}\n\nexport const SELECT = {\n    appointmentType: 'event-appt-type',\n    patientSearch: 'event-patient'\n}\n\n","import debug from 'debug';\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport {\n    AggregateStateManager,\n    AsyncStateManagerWrapper,\n    BasicObjectDefinitionFactory,\n    ChatManager,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener, DerivedField,\n    DownloadManager, FieldDefinition,\n    FieldType, FieldValueGenerator,\n    GraphQLApiStateManager,\n    isSameMongo,\n    KeyType,\n    MemoryBufferStateManager,\n    NotificationController,\n    ObjectDefinitionRegistry,\n    RESTApiStateManager,\n    SocketManager,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass DefaultUserValueGenerator implements FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        if (isCreate) {\n            switch (field.id) {\n                case 'isCurrent': {\n                    result = 'true';\n                    break;\n                }\n                case 'resetPassword': {\n                    result = 'true';\n                    break;\n                }\n                case 'password': {\n                    result = 'password';\n                    break;\n                }\n            }\n\n        }\n\n        return result;\n    }\n\n}\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n\n\n    private static patientQuery: string = 'query getPatient($identifier: String!){\\n' +\n        '  getPatient(id: $identifier) {\\n' +\n        '    _id,\\n' +\n        '    lastSeen,\\n' +\n        '    lastSeenBy,\\n' +\n        '    dob,\\n' +\n        '    dod,\\n' +\n        '    gender,\\n' +\n        '    ethnicity,\\n' +\n        '    countryofbirth,\\n' +\n        '    created,\\n' +\n        '    modified,\\n' +\n        '    name{\\n' +\n        '      _id,\\n' +\n        '    \\ttitle,\\n' +\n        '    \\tfirstname,\\n' +\n        '    \\tmiddlename,\\n' +\n        '    \\tsurname,\\n' +\n        '    \\taka\\n' +\n        '  \\t},\\n' +\n        '    contact{\\n' +\n        '    \\t_id,\\n' +\n        '    \\tline1,\\n' +\n        '    \\tline2,\\n' +\n        '    \\tsuburb,\\n' +\n        '    \\tpostcode,\\n' +\n        '    \\tstate,\\n' +\n        '    \\tcountry,\\n' +\n        '    \\thome,\\n' +\n        '    \\twork,\\n' +\n        '    \\tmobile,\\n' +\n        '    \\tnokname,\\n' +\n        '    \\tnokphone\\n' +\n        '    },\\n' +\n        '    identifiers {\\n' +\n        '      _id,\\n' +\n        '    \\tmedicare,\\n' +\n        '    \\tmedicareRef,\\n' +\n        '    \\tlegacyId,\\n' +\n        '   \\t \\tdva,\\n' +\n        '   \\t \\tdvaColour,\\n' +\n        '    \\thcc,\\n' +\n        '    \\tihi\\n' +\n        '    },\\n' +\n        '    flags {\\n' +\n        '      _id,\\n' +\n        '    \\tisAcountHolder,\\n' +\n        '    \\tlegacyAccountHolderId,\\n' +\n        '    \\tisDeceased,\\n' +\n        '    \\tisInactive,\\n' +\n        '    \\tshouldSMS,\\n' +\n        '    \\tisMarried,\\n' +\n        '    \\tisCTGRegistered,\\n' +\n        '    \\thasWarnings\\n' +\n        '    },\\n' +\n        '    warnings {\\n' +\n        '      _id, warnings\\n' +\n        '    },\\n' +\n        '    allergies {\\n' +\n        '      _id,\\n' +\n        '    \\tname,\\n' +\n        '    \\treaction,\\n' +\n        '    \\tcreated,\\n' +\n        '    \\tmodified\\n' +\n        '    },\\n' +\n        '    consults {\\n' +\n        '      _id, date, time, doctor, history, diagnosis, plan, findings, created, modified\\n' +\n        '    },\\n' +\n        '    history {\\n' +\n        '      _id, diagnosis, note, isConfidential, date, created, modified\\n' +\n        '    },\\n' +\n        '    results {\\n' +\n        '      _id, lab, labref, test, orderedBy, copies, requested, collected, reported, collectedTime, imported, received, result, isLinked, reviewedBy, isNormal, isLast\\n' +\n        '    },\\n' +\n        '    scripts {\\n' +\n        '      _id, by, name, on, dose, frequency, instructions, repeats, quantity, drugCode, lastPrinted, created, modified\\n' +\n        '    },\\n' +\n        '    scriptHistory {\\n' +\n        '      _id, changed, dose, change, reason, drugCode, name\\n' +\n        '    },\\n' +\n        '    scriptArchive {\\n' +\n        '      _id, medication, dose, scriptNumber, repeats, quantity, approvalCode, drugCode, note, created, modified\\n' +\n        '    },\\n' +\n        '    recalls{\\n' +\n        '      _id, reason, interval, isRecurring, due, isCompleted, created, modified\\n' +\n        '    },\\n' +\n        '    tasks {\\n' +\n        '      _id, by, isUrgent, isCompleted, isRead, title, details, completed, for, created, modified\\n' +\n        '    },\\n' +\n        '    documents {\\n' +\n        '      _id, title, type, from, reviewed, reviewedBy, data, created, modified\\n' +\n        '    },\\n' +\n        '    letters {\\n' +\n        '      _id, creator, isPrinted, isReviewd, from, type, data, to, created, modified\\n' +\n        '    },\\n' +\n        '    vaccinations {\\n' +\n        '      _id, vaccine, on, by, providerNum, batch, expiry, site, shouldSendtoAIR, airCode, created\\n' +\n        '    },\\n' +\n        '    forms {\\n' +\n        '      _id, title, from, category, data, created, modified\\n' +\n        '    },\\n' +\n        '    wcc {\\n' +\n        '      _id,\\n' +\n        '      employer {\\n' +\n        '        name, \\n' +\n        '        contact {\\n' +\n        '          line1, line2, suburb, state, postCode\\n' +\n        '        },\\n' +\n        '        insurer\\n' +\n        '      },\\n' +\n        '      claim {\\n' +\n        '        number, injury, injuryTime, injuryDate, claimDate, mechanism\\n' +\n        '      },\\n' +\n        '      date,time,reviewed, type, diagnosis, comment, treatment, isReturnToNormalDuties, returnToNormalDuties, isRestrictedDuties, restrictedDutiesFrom, restrictedDutiesTo, isNoCapacity, noCapacityFrom, noCapacityTo\\n' +\n        '    },\\n' +\n        '    modifiedDates {\\n' +\n        '      identifiers, warnings, allergies, consults, history, results, scripts, recalls, documents,letters,vaccinations\\n' +\n        '    }\\n' +\n        '  }\\n' +\n        '}'\n\n\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.clinicConfig,\n                serverURL: '',\n                api: API_Config.clinicConfig,\n                isActive: true,\n                find:false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName: STATE_NAMES.patients,\n                serverURL: '',\n                api: API_Config.patients,\n                isActive: true,\n                idField: '_id',\n                find:true,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n        ]);\n        let qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([\n            {\n                stateName: STATE_NAMES.patientSearch,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPatientSearchDetails {_id,identifiers { legacyId},flags {isInactive,hasWarnings},name {firstname,surname}, warnings {_id, warnings}}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPatientSearchDetails',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointments,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointments {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    create: 'mutation createAppointment($data: AppointmentInput!){addAppointment(appt: $data) {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name,created,modified,arrivalTime,readyForBilling,isBilled,billingItems}}',\n                    destroy: 'mutation deleteAppointment($identifier: String!){deleteAppointment(id: $identifier)}',\n                    update: 'mutation updateAppointment($data: AppointmentInput!){updateAppointment(appt: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointments',\n                    create: 'addAppointment',\n                    destroy: 'deleteAppointment',\n                    update: 'updateAppointment',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTypes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTypes {_id,name,colour,icon,isStatus}}',\n                    create: 'mutation createAppointmentType($data: AppointmentTypeInput!){addAppointmentType(apptType: $data) {_id,name,colour,icon,isStatus}}',\n                    destroy: 'mutation deleteAppointmentType($identifier: String!){deleteAppointmentType(id: $identifier)}',\n                    update: 'mutation updateAppointmentType($data: AppointmentTypeInput!){updateAppointmentType(apptType: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTypes',\n                    create: 'addAppointmentType',\n                    destroy: 'deleteAppointmentType',\n                    update: 'updateAppointmentType',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.providers,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getProviders {_id,name,providerNo,isCurrent}}',\n                    create: 'mutation addProvider($data: ProviderInput!){addProvider(provider: $data) {_id,name,providerNo,isCurrent}}',\n                    destroy: 'mutation deleteProvider($identifier: String!){deleteProvider(id: $identifier)}',\n                    update: 'mutation updateProvider($data: ProviderInput!){updateProvider(provider: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getProviders',\n                    create: 'addProvider',\n                    destroy: 'deleteProvider',\n                    update: 'updateProvider',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getUsers {_id,username,providerNo,isCurrent,isAdmin,isProvider,resetPassword,password}}',\n                    create: 'mutation addUser($data: UserInput!){addUser(user: $data) {_id,username,providerNo,isCurrent,isAdmin,isProvider,resetPassword,password}}',\n                    destroy: '',\n                    update: 'mutation updateUser($data: UserInput!){updateUser(user: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getUsers',\n                    create: 'addUser',\n                    destroy: '',\n                    update: 'updateUser',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTemplates,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTemplates {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    create: 'mutation addAppointmentTemplate($data: AppointmentTemplateInput!){addAppointmentTemplate(template: $data) {_id,day, time, duration,createdBy,provider,type,created,modified}}',\n                    destroy: 'mutation deleteAppointmentTemplate($identifier: String!){deleteAppointmentTemplate(id: $identifier)}',\n                    update: 'mutation updateAppointmentTemplate($data: AppointmentTemplateInput!){updateAppointmentTemplate(template: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTemplates',\n                    create: 'addAppointmentTemplate',\n                    destroy: 'deleteAppointmentTemplate',\n                    update: 'updateAppointmentTemplate',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.patients,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: Controller.patientQuery,\n                },\n                data: {\n                    findAll: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n        ])\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo);\n        let memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        let asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n        let asyncQL = new AsyncStateManagerWrapper(aggregateSM, qlSM, isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        //aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.appointments,STATE_NAMES.patientSearch,STATE_NAMES.recentPatientSearches,STATE_NAMES.appointmentTypes, STATE_NAMES.providers,STATE_NAMES.appointmentTemplates,STATE_NAMES.patients], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.users, STATE_NAMES.appointments, STATE_NAMES.patientSearch, STATE_NAMES.recentPatientSearches, STATE_NAMES.appointmentTypes, STATE_NAMES.providers, STATE_NAMES.appointmentTemplates], false);\n        //aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.users,STATE_NAMES.clinicConfig], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.clinicConfig, STATE_NAMES.patients], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.providers);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n            this.getStateManager().getStateByName(STATE_NAMES.clinicConfig);\n            this.getStateManager().getStateByName(STATE_NAMES.patientSearch);\n            this.getStateManager().getStateByName(STATE_NAMES.appointments);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public isProvider(): boolean {\n        let result = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.isProvider;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is a provider? ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private setupDataObjectDefinitions() {\n        let apptTypeDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.appointmentTypes, 'Appointment Type', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"name\", \"Name\", FieldType.text, true, \"Name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"colour\", \"Colour\", FieldType.colour, true, \"Choose color from below\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"icon\", \"Icon\", FieldType.text, false, \"Font Awesome icon classes\");\n        let statusFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(apptTypeDef, \"isStatus\", \"Patient flow status\", FieldType.boolean, false, \"Used by the application to track patient state\");\n        statusFieldDef.displayOnly = true;\n\n        cLogger(`Appointment type data object definition`);\n        cLogger(apptTypeDef);\n\n\n        let userDef: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.users, 'Users', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"username\", \"Username\", FieldType.text, true, \"Username\");\n        let isCurrentFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isCurrent\", \"Active?\", FieldType.boolean, false, \"Is this a current user?\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isAdmin\", \"Admin?\", FieldType.boolean, false, \"Does the user have admin privilege?\");\n        let isProviderFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"isProvider\", \"Is Provider\", FieldType.boolean, false, \"Is the user a provider\");\n        isProviderFieldDef.displayOnly = true;\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"providerNo\", \"Provider Number\", FieldType.text, false, \"Provider Number\");\n        let resetPasswordFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"resetPassword\", \"Reset Password?\", FieldType.boolean, false, \"Reset the users password \");\n        let passwordFieldDef = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(userDef, \"password\", \"New Password\", FieldType.text, false, \"New password\");\n        cLogger(`Users type data object definition`);\n        cLogger(userDef);\n\n        const generator = new DefaultUserValueGenerator();\n        // setup default values for new user\n        isCurrentFieldDef.generator = {\n            onCreation:true,\n            onModify:false,\n            generator: generator\n        };\n        resetPasswordFieldDef.generator = {\n            onCreation:true,\n            onModify:false,\n            generator: generator\n        };\n        passwordFieldDef.generator = {\n            onCreation:true,\n            onModify:false,\n            generator: generator\n        };\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n}\n\nclass IsProviderDerivedField implements DerivedField {\n    getValue(dataObj: any, field: FieldDefinition, isCreate: boolean): string {\n        let result = 'false';\n        if (dataObj.providerNo) {\n            if (dataObj.providerNo.trim().length > 0) {\n                result = 'true';\n            }\n        }\n        return result;\n    }\n\n}\n\n\n","export function addDurations(duration1: string, duration2: string): string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid: boolean = durationRegexp.test(duration1);\n    const duration2Valid: boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components: string[] = duration1.split(':');\n        const duration2Components: string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0) ? sumHours + ':' : ''}${(sumMinutes < 10) ? '0' + sumMinutes : sumMinutes}:${(sumSeconds < 10) ? '0' + sumSeconds : sumSeconds}`\n    } else {\n        return '00:00';\n    }\n}\n\nexport function computeTimeStringFromStartTimeAndDurationInSeconds(appointmentTime: string, duration: number): string {\n    const time = parseInt(appointmentTime); // HHMMSS as a time\n\n\n    const startTimeHours = Math.floor(time / 10000);\n    const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n    const appointmentDuration = Math.floor(duration / 60);\n\n    let endTimeHours = startTimeHours;\n    let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n    if (endTimeMinutes >= 60) {\n        endTimeMinutes -= 60;\n        endTimeHours += 1; // 24 hour time\n    }\n\n    let timeString = `${endTimeHours}`;\n    if (endTimeHours < 10) timeString = '0' + timeString;\n    if (endTimeMinutes < 10) timeString += '0';\n    timeString += `${endTimeMinutes}`;\n    return timeString;\n}","import debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {DataChangeType, NotificationManager, NotificationType, SecurityManager, SocketListener} from \"ui-framework-jps\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        let stateObj = message.data;\n        slLogger(stateObj);\n\n        // are we the same user that made the changes?\n        if (message.user === SecurityManager.getInstance().getLoggedInUsername()) {\n            slLogger(`changes made by the current user, no need to do anything`);\n        }\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case DataChangeType.create: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.update: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case DataChangeType.delete: {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {AppointmentTemplateFilterView} from \"./AppointmentTemplateFilterView\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\nimport {computeTimeStringFromStartTimeAndDurationInSeconds} from \"../DurationFunctions\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {ScheduleLoadedListener} from \"../helper/ScheduleLoadedListener\";\n\n\nconst logger = debug('appointment-template-controller');\n\n\ntype AppointmentTemplateDataElements = {\n    oldEvent: any | null,\n    tempEvent: any,\n    currentFirstDate: number,\n    currentFirstDateDayNumber: number,\n    currentLastDate: number\n}\n\nexport class AppointmentTemplateController implements StateChangeListener,ScheduleLoadedListener {\n    private static _instance: AppointmentTemplateController;\n    private dataElements: AppointmentTemplateDataElements = {\n        oldEvent: null,\n        tempEvent: {},\n        currentFirstDate: 0,\n        currentLastDate: 0,\n        currentFirstDateDayNumber: 1\n    };\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTemplates, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {}\n\n    loadedProviders(providers: any[]): void {\n        AppointmentTemplateFilterView.getInstance().populateProviders(providers);\n        AppointmentTemplateView.getInstance().setupProviders(providers);\n    }\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        AppointmentTemplateView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {\n        AppointmentTemplateDetailModal.getInstance().setupAppointmentTypeDropDown(appointmentTypes);\n    }\n\n    public static getInstance(): AppointmentTemplateController {\n        if (!(AppointmentTemplateController._instance)) {\n            AppointmentTemplateController._instance = new AppointmentTemplateController();\n        }\n        return AppointmentTemplateController._instance;\n    }\n\n    public getModel(): AppointmentTemplateDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentTemplateView.getInstance().onDocumentLoaded();\n        AppointmentTemplateFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    public getEventForAppointmentTemplate(template: any): any {\n        logger(`Creating event for appointment template with first day number of ${this.dataElements.currentFirstDateDayNumber}`);\n        logger(template);\n        if (template.day < this.dataElements.currentFirstDateDayNumber) return null;\n        const loadDate = this.dataElements.currentFirstDate + (template.day - this.dataElements.currentFirstDateDayNumber);\n\n\n        let result = AppointmentControllerHelper.getInstance().getEventForAppointmentTemplateForDate(loadDate, template.day, template);\n        logger('Converted to template event');\n        logger(result);\n\n        return result;\n\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        this.dataElements.currentFirstDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        this.dataElements.currentFirstDateDayNumber = parseInt(moment(event.firstDay).format('d'));\n        this.dataElements.currentLastDate = parseInt(moment(event.lastDay).format('YYYYMMDD')) - 1;\n        logger(`Need to load date range (${this.dataElements.currentFirstDate},${this.dataElements.currentLastDate}) starting with day ${this.dataElements.currentFirstDateDayNumber}`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n        let results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) results.push(result);\n        });\n\n        inst.setEvents(results);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Template Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case (STATE_NAMES.appointmentTemplates): {\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n                let results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    let result = this.getEventForAppointmentTemplate(appointment);\n                    if (result) results.push(result);\n                });\n\n                AppointmentTemplateView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment Template inserted by another user');\n            logger(appointment);\n\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) AppointmentTemplateView.getInstance().getCalender().addEvent(result);\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointmentTemplates) {\n            logger('Appointment Template deleted by another user');\n            logger(appointment);\n\n            AppointmentTemplateView.getInstance().getCalender().removeEvent([appointment._id]);\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointmentTemplates) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            let result = this.getEventForAppointmentTemplate(appointment);\n            if (result) AppointmentTemplateView.getInstance().getCalender().updateEvent(result);\n        }\n    }\n\n\n\n}\n","import {STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-template-detail-view');\n\ntype AppointmentTemplateDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    deleteButton: HTMLButtonElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n}\n\n\nexport class AppointmentTemplateDetailModal {\n\n    private static _instance: AppointmentTemplateDetailModal;\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n    private patients: any[];\n    private viewElements: AppointmentTemplateDetailViewElements = {\n        popup: null,\n        range: null,\n        deleteButton: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        providersDropdown: null\n    }\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    public static getInstance(): AppointmentTemplateDetailModal {\n        if (!(AppointmentTemplateDetailModal._instance)) {\n            AppointmentTemplateDetailModal._instance = new AppointmentTemplateDetailModal();\n        }\n        return AppointmentTemplateDetailModal._instance;\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete-template');\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById('event-appt-type-template');\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-template-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n\n        this.viewElements.range = datepicker('#event-date-template', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input-template',\n            endInput: '#end-input-template',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentTemplateDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                let date = args.value;\n                // update event's start date\n                AppointmentTemplateController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentTemplateController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointment templates');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        let types: any[] = [];\n\n        appointmentTypes.forEach((type: any) => {\n            if (!(type.isStatus)) types.push(type.name);\n        });\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#event-appt-type-template', {\n            data: types,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider-template', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentTemplateController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentTemplateController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointmentTemplate(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n                    }\n                },\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentTemplateController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        let colour = AppointmentControllerHelper.getInstance().getColourForAppointmentType('Consulting');\n\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        let updatedEvent = {\n                            id: appointmentId,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            editable: true,\n                            resource: AppointmentTemplateController.getInstance().getModel().tempEvent.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            type: AppointmentTemplateController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentTemplateController.getInstance().getModel().tempEvent.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n\n                        // navigate the calendar to the correct view\n                        AppointmentTemplateView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n        this.viewElements.range.setVal([AppointmentTemplateController.getInstance().getModel().tempEvent.start, AppointmentTemplateController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentTemplateController.getInstance().getModel().tempEvent.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentTemplateController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointmentTemplate(args: any) {\n        let ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(AppointmentTemplateController.getInstance().getModel().oldEvent);\n                    }\n                },\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentTemplateDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        let updatedEvent = {\n                            id: ev.id,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            editable: true,\n                            resource: ev.resource,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n\n\n                        // @ts-ignore\n                        updatedEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentTemplate(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentTemplateView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentTemplateDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentTemplateDetailModal.datePickerResponsive : AppointmentTemplateDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(AppointmentTemplateController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentTemplateDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentTemplateController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentTemplateView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n    }\n\n}\n","import {AppointmentTemplateView} from \"./AppointmentTemplateView\";\nimport {Checkbox, enhance, Input, registerComponent} from \"@mobiscroll/javascript\";\n\nexport class AppointmentTemplateFilterView {\n    private static _instance: AppointmentTemplateFilterView;\n    private providersEl: HTMLDivElement | null;\n\n    public static getInstance(): AppointmentTemplateFilterView {\n        if (!(AppointmentTemplateFilterView._instance)) {\n            AppointmentTemplateFilterView._instance = new AppointmentTemplateFilterView();\n        }\n        return AppointmentTemplateFilterView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providerFilter');\n        registerComponent(Checkbox);\n        registerComponent(Input);\n    }\n\n    public populateProviders(providers: any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider: any) => {\n                let labelEl = document.createElement('label');\n                let inputEl = document.createElement('input');\n                inputEl.setAttribute('type', 'checkbox');\n                inputEl.setAttribute('value', provider.name);\n                inputEl.setAttribute(\"checked\", '');\n                inputEl.setAttribute(\"mbsc-checkbox\", '');\n                inputEl.setAttribute('data-label', provider.name);\n                inputEl.classList.add('template-provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            enhance(this.providersEl);\n\n\n            document.querySelectorAll('.template-provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    let checkboxList = document.querySelectorAll('.template-provider-checkbox');\n                    let selected: any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        let checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id: checkbox.value, name: checkbox.value});\n                        }\n                    }\n\n                    AppointmentTemplateView.getInstance().getCalender().setOptions({\n                        resources: selected\n                    });\n                });\n            });\n\n        }\n\n    }\n\n}","import {AppointmentTemplateController} from \"./AppointmentTemplateController\";\nimport {eventcalendar, Eventcalendar, snackbar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {AppointmentTemplateDetailModal} from \"./AppointmentTemplateDetailModal\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-template-view');\n\ntype AppointmentTemplateViewElements = {\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentTemplateView {\n    private static _instance: AppointmentTemplateView;\n    private viewElements: AppointmentTemplateViewElements = {\n        calendar: null,\n    }\n\n    private constructor() {\n    }\n\n    public static getInstance(): AppointmentTemplateView {\n        if (!(AppointmentTemplateView._instance)) {\n            AppointmentTemplateView._instance = new AppointmentTemplateView();\n        }\n        return AppointmentTemplateView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n\n        AppointmentTemplateDetailModal.getInstance().onDocumentLoaded();\n\n\n        let options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n        options.view.schedule.type = 'week';\n\n\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentTemplateController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentTemplateDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentTemplateController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentTemplateDetailModal.getInstance().startCreateAppointmentTemplate(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentTemplateView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointmentTemplates,\n                            AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            AppointmentTemplateController.getInstance().getModel().oldEvent = Object.assign({}, args.event);\n            AppointmentTemplateController.getInstance().getModel().tempEvent = args.event;\n\n            if (!AppointmentTemplateDetailModal.getInstance().isVisible()) {\n                logger(args);\n                AppointmentTemplateDetailModal.getInstance().updateAppointmentTemplate(args);\n            }\n        }\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentTemplateRendering;\n        options.onEventUpdated = (args: any) => {\n\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointmentTemplates,\n                AppointmentControllerHelper.getInstance().getAppointmentTemplateFromEvent(args.event),\n                false);\n        }\n\n        if (AppointmentControllerHelper.getInstance().haveProvidersLoaded()) {\n            let providers: any[] = [];\n\n            AppointmentControllerHelper.getInstance().getProviders().forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById('templateDetail'), options);\n    }\n\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n\n            clinicConfig.view.schedule.type = 'week';\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n        }\n        AppointmentTemplateDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n\n    public setupProviders(providersCollection: any[]) {\n        let providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentTemplateDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n\n}\n","import {AppointmentTypesSidebarContainers, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BootstrapTableConfigHelper, BootstrapTableRowConfigHelper,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    DataObjectDefinition, DefaultFieldPermissionChecker,\n    DisplayOrder,\n    isSameMongo,\n    KeyType,\n    Modifier,\n    ObjectDefinitionRegistry,\n    StateManager,\n    TableUIConfig,\n    TabularViewRendererUsingContext,\n    View\n} from \"ui-framework-jps\";\nimport {TabularItemViewRenderer} from \"../renderer/TabularItemViewRenderer\";\n\n\nconst logger = debug('appointment-types-view');\n\nexport class AppointmentTypesCollectionView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: AppointmentTypesSidebarContainers.list,\n            dataSourceId: VIEW_NAME.appointmentTypes,\n        },\n        resultsElement: {\n            type: 'tr',\n            attributes: [{name: 'href', value: '#'}],\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'table-secondary',\n            active: 'table-success',\n            warning: 'table-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.icon) {\n                    return [item.icon];\n                }\n                return [];\n            },\n        },\n        sorter: AppointmentTypesCollectionView.sortAppointmentTypes\n    };\n\n    constructor(stateManager: StateManager) {\n        super(AppointmentTypesCollectionView.DOMConfig, stateManager, STATE_NAMES.appointmentTypes);\n\n        let apptTypeDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.appointmentTypes);\n        if (apptTypeDef) {\n            let displayOrders: DisplayOrder[] = [];\n            displayOrders.push({fieldId: 'name', displayOrder: 1});\n            displayOrders.push({fieldId: 'colour', displayOrder: 2});\n            displayOrders.push({fieldId: 'icon', displayOrder: 3});\n            displayOrders.push({ fieldId:'isStatus',displayOrder:4});\n            let tableUIConfig: TableUIConfig = BootstrapTableConfigHelper.getInstance().generateTableConfig(apptTypeDef, displayOrders, 1, false, true);\n            // tableUIConfig.headerColumns[0].element.classes += ' text-center';\n            tableUIConfig.headerColumns[1].element.classes += ' text-center';\n            tableUIConfig.headerColumns[2].element.classes += ' text-center';\n            tableUIConfig.headerColumns[3].element.classes += ' text-center';\n\n            this.renderer = new TabularItemViewRenderer(this, this, tableUIConfig,displayOrders,BootstrapTableRowConfigHelper.getInstance(),new DefaultFieldPermissionChecker() );\n            //this.renderer = new TabularViewRendererUsingContext(this, this, tableUIConfig);\n            //this.renderer = new ListViewRendererUsingContext(this,this);\n            this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n            this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n            this.getItemId = this.getItemId.bind(this);\n\n            ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.appointmentTypes, 'Appointment Types');\n\n        }\n    }\n\n    private static sortAppointmentTypes(item1: any, item2: any) {\n        let result = -1;\n        if (item1.name > item2.name) result = 1;\n        return result;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += `<strong style=\"text-colour:${item.colour}\">` + item.name + '</strong> ';\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        return false;\n    }\n\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.isStatus) {\n            return Modifier.inactive;\n        }\n        return Modifier.normal\n    }\n\n\n}\n\n","import Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {\n    BasicObjectDefinitionFactory,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DetailView,\n    DetailViewImplementation,\n    Field,\n    FormDetailViewRenderer,\n    LinkedCollectionDetailController,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer, ViewFieldPermissionChecker\n} from \"ui-framework-jps\";\nimport {AppointmentTypesSidebarContainers, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport {AppointmentTypesCollectionView} from \"./AppointmentTypesCollectionView\";\nimport {BootstrapFormConfigHelper} from \"ui-framework-jps/dist/framework/ui/helper/BootstrapFormConfigHelper\";\n\n\nconst logger = debug('appointment-types-composite-view');\n\nexport class ApptTypePermissionChecker implements ViewFieldPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        let result = true;\n        if (dataObj.isStatus) {\n            if (field.getFieldDefinition().id === 'name') {\n                result = false; // cannot edit the names of the default status items\n            }\n        }\n        return result;\n    }\n}\n\nexport class AppointmentTypesCompositeView implements DataObjectListener {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const apptTypes = new AppointmentTypesCollectionView(Controller.getInstance().getStateManager());\n        this.sideBar.addView(apptTypes, {containerId: AppointmentTypesSidebarContainers.list});\n\n        const apptTypeDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.appointmentTypes);\n\n        if (apptTypeDefinition) {\n            let apptTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(AppointmentTypesSidebarContainers.detail, apptTypeDefinition, new ApptTypePermissionChecker(), BootstrapFormConfigHelper.getInstance(), false);\n\n            let apptTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: AppointmentTypesSidebarContainers.detail,\n                    dataSourceId: VIEW_NAME.appointmentTypeDetail\n                }, apptTypeDetailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.appointmentTypes, apptTypes);\n            viewLinker.addLinkedDetailView(apptTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(apptTypeDefinition);\n            apptTypeDetailView.initialise(startingDisplayOrder, false, true);\n\n            // setup the event handling for the create new exercise type button\n            let createApptType = <HTMLButtonElement>document.getElementById('addNewAppointmentType');\n            logger(`Setting up button for creating appointment types`);\n            logger(createApptType);\n            if (createApptType) {\n                createApptType.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling create new appointment type`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling delete appointment type - already managed by stateful collection view`);\n                logger(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.appointmentTypes: {\n                logger(`Handling update appointment type`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n}","import {AppointmentController} from \"./AppointmentController\";\nimport {datepicker, Datepicker, eventcalendar, Eventcalendar, snackbar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\nimport {STATE_NAMES, VIEW_CONTAINER} from \"../AppTypes\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-view');\n\ntype AppointmentViewElements = {\n    datePicker: Datepicker | null,\n    calendar: Eventcalendar | null,\n}\n\nexport class AppointmentBookView {\n    private static _instance: AppointmentBookView;\n    private viewElements: AppointmentViewElements = {\n        datePicker: null,\n        calendar: null,\n    }\n\n    private constructor() {}\n\n    public static getInstance(): AppointmentBookView {\n        if (!(AppointmentBookView._instance)) {\n            AppointmentBookView._instance = new AppointmentBookView();\n        }\n        return AppointmentBookView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.viewElements.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.setupDatePicker();\n        AppointmentDetailModal.getInstance().onDocumentLoaded();\n\n\n        let options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n\n\n\n        options.onSelectedDateChange = (event: any, inst: any) => {\n            AppointmentBookView.getInstance().viewElements.datePicker?.setVal(event.date);\n        };\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentDetailModal.getInstance().close();\n            // store temporary event\n            AppointmentController.getInstance().getModel().tempEvent = event.event;\n            logger('Creating event');\n            logger(event);\n\n            AppointmentDetailModal.getInstance().startCreateAppointment(event.target);\n        };\n\n        options.onEventDeleted = (event: any, inst: any) => {\n            snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentBookView.getInstance().viewElements.calendar.addEvent(event.event);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(event.event),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n            if (args.event.editable) {\n                AppointmentController.getInstance().getModel().oldEvent = Object.assign({}, args.event);\n                AppointmentController.getInstance().getModel().tempEvent = args.event;\n\n                if (!AppointmentDetailModal.getInstance().isVisible()) {\n                    logger(args);\n                    AppointmentDetailModal.getInstance().updateAppointment(args);\n                }\n            }\n        }\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentRendering;\n        options.onEventUpdated = (args: any) => {\n            // user has dragged event - update the appointment\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(args.event),\n                false);\n\n        }\n\n        if (AppointmentControllerHelper.getInstance().haveProvidersLoaded()) {\n            let providers: any[] = [];\n\n            AppointmentControllerHelper.getInstance().getProviders().forEach((provider: any) => {\n                if (provider.isCurrent) providers.push({\n                    text: provider.name,\n                    value: provider.name,\n                    id: provider.name,\n                    name: provider.name\n                });\n            });\n\n            if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n                {\n                    resources: providers,\n                    groupBy: 'date'\n                }\n            );\n\n        }\n\n        // @ts-ignore\n        this.viewElements.calendar = eventcalendar(document.getElementById(VIEW_CONTAINER.calendarDetail), options);\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.viewElements.calendar) {\n            logger('State changed, using clinic config options');\n\n            this.viewElements.calendar.setOptions({\n                clickToCreate: clinicConfig.clickToCreate,\n                dragTimeStep: clinicConfig.dragTimeStep,\n                dragToCreate: clinicConfig.dragToCreate,\n                dragToMove: clinicConfig.dragToMove,\n                dragToResize: clinicConfig.dragToResize,\n                min: moment().subtract(clinicConfig.min, \"months\"),\n                showControls: clinicConfig.showControls,\n                view: clinicConfig.view,\n                invalidateEvent: clinicConfig.invalidateEvent,\n                invalid: clinicConfig.invalid,\n            });\n\n\n        }\n        AppointmentDetailModal.getInstance().applyClinicConfig(clinicConfig);\n\n    }\n\n    public setupProviders(providersCollection: any[]) {\n        let providers: any[] = [];\n\n        providersCollection.forEach((provider: any) => {\n            if (provider.isCurrent) providers.push({\n                text: provider.name,\n                value: provider.name,\n                id: provider.name,\n                name: provider.name\n            });\n        });\n\n\n        if (this.viewElements.calendar) this.viewElements.calendar.setOptions(\n            {\n                resources: providers,\n                groupBy: 'date'\n            }\n        );\n\n        AppointmentDetailModal.getInstance().setupProviderDropdown(providers);\n    }\n\n    protected setupDatePicker() {\n        // @ts-ignore\n        this.viewElements.datePicker = datepicker(document.getElementById(VIEW_CONTAINER.calendarControl), {\n            controls: ['calendar'],\n            display: \"inline\",\n            dateFormat: 'YYYYMMDD',\n            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            showWeekNumbers: true,\n            onChange: (event: any, inst: any) => {\n                AppointmentBookView.getInstance().viewElements.calendar?.navigate(event.value);\n            }\n        });\n    }\n\n\n}","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\n\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {AppointmentFilterView} from \"./AppointmentFilterView\";\nimport {AppointmentDetailModal} from \"./AppointmentDetailModal\";\nimport {v4} from \"uuid\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {ScheduleLoadedListener} from \"../helper/ScheduleLoadedListener\";\n\n\nconst logger = debug('appointment-controller');\n\n\ntype AppointmentDataElements = {\n    oldEvent: any | null,\n    tempEvent: any,\n    loadDate: number,\n    loadDateFinish: number,\n}\n\nexport class AppointmentController implements StateChangeListener, ScheduleLoadedListener {\n\n    private static _instance: AppointmentController;\n    private dataElements: AppointmentDataElements = {\n        oldEvent: null,\n        tempEvent: {},\n        loadDate: 0,\n        loadDateFinish: 0\n    };\n\n    private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointments, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n    }\n\n    public static getInstance(): AppointmentController {\n        if (!(AppointmentController._instance)) {\n            AppointmentController._instance = new AppointmentController();\n        }\n        return AppointmentController._instance;\n    }\n\n    public getModel(): AppointmentDataElements {\n        return this.dataElements;\n    }\n\n    public onDocumentLoaded() {\n        AppointmentBookView.getInstance().onDocumentLoaded();\n        AppointmentFilterView.getInstance().onDocumentLoaded();\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        const today = parseInt(moment().format('YYYYMMDD'));\n        this.dataElements.loadDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        const loadDateDayNumber = parseInt(moment(event.firstDay).format('d'));\n        this.dataElements.loadDateFinish = parseInt(moment(event.lastDay).format('YYYYMMDD'));\n        logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        let results: any[] = [];\n        let appointmentsForTheDay: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                appointmentsForTheDay.push(appointment);\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                results.push(result);\n            }\n\n        });\n\n\n        inst.setEvents(results);\n\n        // add template appointments as events where an appointment doesn't already exist in the same time slot, they will need unique _ids\n        if (this.dataElements.loadDate >= today) this.addTemplateEvents(this.dataElements.loadDate, loadDateDayNumber, appointmentsForTheDay);\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Appointment Manager\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n\n            case (STATE_NAMES.appointments): {\n\n                this.dataElements.loadDate = parseInt(moment().format('YYYYMMDD'));\n                this.dataElements.loadDateFinish = parseInt(moment().add(1, 'days').format('YYYYMMDD'));\n                logger(`Need to load date range (${this.dataElements.loadDate},${this.dataElements.loadDateFinish})`);\n\n\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n                let results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n                        logger('Found appointment');\n                        logger(appointment);\n\n                        let result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n\n\n                        logger('Converted to event');\n                        logger(result);\n                        results.push(result);\n                    }\n\n                });\n\n                AppointmentBookView.getInstance().getCalender().setEvents(results);\n\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment inserted by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                AppointmentBookView.getInstance().getCalender().addEvent(result);\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointments) {\n            logger('Appointment deleted by another user');\n            logger(appointment);\n\n            AppointmentBookView.getInstance().getCalender().removeEvent([appointment._id]);\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            if ((appointment.start >= this.dataElements.loadDate) && (appointment.start < this.dataElements.loadDateFinish)) {\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(this.dataElements.loadDate, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                AppointmentBookView.getInstance().getCalender().updateEvent(result);\n            }\n        }\n    }\n\n    private addTemplateEvents(loadDate: number, day: number, currentAppointments: any[]) {\n        logger('Loading templated events for day ' + day);\n        const appointmentTemplates = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointmentTemplates);\n        appointmentTemplates.forEach((template: any) => {\n            logger(template);\n            if (template.day === day) { // only template appointments for the day number\n                // is there already an appointment on display that matches the template?\n                const foundIndex = currentAppointments.findIndex((appt) => appt.time === template.time);\n                if (foundIndex < 0) {\n                    logger(`appointment for time ${template.time} not found, creating new appointment`)\n                    // don't already have an appointment for that time\n                    let templatedAppt = AppointmentControllerHelper.getInstance().getEventForAppointmentTemplateForDate(loadDate, day, template);\n                    templatedAppt.id = v4();\n                    templatedAppt.title = '';\n                    templatedAppt.description = '';\n                    templatedAppt.patientId = '';\n                    templatedAppt.isDNA = false;\n                    templatedAppt.isCancelled = false;\n                    templatedAppt.readyForBilling = false;\n                    templatedAppt.isBilled = false;\n                    templatedAppt.isDNA = false;\n                    templatedAppt.billingItems = '';\n                    templatedAppt.arrivalTime = '';\n                    templatedAppt.color = AppointmentControllerHelper.getInstance().getColourForAppointment(templatedAppt);\n\n                    logger(templatedAppt);\n\n                    // add the templated appointment to the persistence\n                    Controller.getInstance().getStateManager().addNewItemToState(\n                        STATE_NAMES.appointments,\n                        AppointmentControllerHelper.getInstance().getAppointmentFromEvent(templatedAppt),\n                        false);\n                    AppointmentBookView.getInstance().getCalender().addEvent(templatedAppt);\n                }\n            }\n        });\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {\n        AppointmentDetailModal.getInstance().setupAppointmentTypeDropDown(appointmentTypes);\n    }\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        AppointmentBookView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {\n        AppointmentDetailModal.getInstance().setupPatientSearchDropDown(patientSearch);\n    }\n\n    loadedProviders(providers: any[]): void {\n        AppointmentFilterView.getInstance().populateProviders(providers);\n        AppointmentBookView.getInstance().setupProviders(providers);\n    }\n\n\n}\n","import {SELECT, STATE_NAMES} from \"../AppTypes\";\nimport {datepicker, getInst, Popup, popup, select, snackbar} from \"@mobiscroll/javascript\";\nimport {AppointmentController} from \"./AppointmentController\";\nimport Controller from \"../Controller\";\nimport moment from \"moment\";\nimport {AppointmentBookView} from \"./AppointmentBookView\";\nimport {v4} from \"uuid\";\nimport {SecurityManager} from \"ui-framework-jps\";\nimport debug from \"debug\";\nimport {AppointmentTemplateView} from \"../appointment-templates/AppointmentTemplateView\";\nimport {AppointmentTemplateController} from \"../appointment-templates/AppointmentTemplateController\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\n\nconst logger = debug('appointment-detail-view');\n\ntype AppointmentDetailViewElements = {\n    popup: Popup | null,\n    range: any | null,\n    titleInput: HTMLInputElement | null,\n    descriptionTextarea: HTMLTextAreaElement | null,\n    deleteButton: HTMLButtonElement | null,\n    patientArrivedButton: HTMLButtonElement | null,\n    patientCancelledButton: HTMLButtonElement | null,\n    patientDNAButton: HTMLButtonElement | null,\n    readyForBillingButton: HTMLButtonElement | null,\n    billingCompleteButton: HTMLButtonElement | null,\n    patientSearchEl: HTMLSelectElement | null,\n    appointmentTypeEl: HTMLSelectElement | null,\n    patientSearchDropdown: any | null\n    appointmentTypeDropdown: any | null,\n    providersDropdown: any | null,\n    warningsEl: HTMLTextAreaElement | null\n}\n\n\nexport class AppointmentDetailModal {\n\n    private static _instance: AppointmentDetailModal;\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n    private patients: any[];\n    private viewElements: AppointmentDetailViewElements = {\n        popup: null,\n        range: null,\n        titleInput: null,\n        descriptionTextarea: null,\n        deleteButton: null,\n        patientArrivedButton: null,\n        patientCancelledButton: null,\n        patientDNAButton: null,\n        readyForBillingButton: null,\n        billingCompleteButton: null,\n        patientSearchEl: null,\n        appointmentTypeEl: null,\n        appointmentTypeDropdown: null,\n        patientSearchDropdown: null,\n        providersDropdown: null,\n        warningsEl: null\n    }\n\n    private constructor() {\n        this.patients = [];\n    }\n\n    public static getInstance(): AppointmentDetailModal {\n        if (!(AppointmentDetailModal._instance)) {\n            AppointmentDetailModal._instance = new AppointmentDetailModal();\n        }\n        return AppointmentDetailModal._instance;\n    }\n\n    public close() {\n        this.viewElements.popup.close();\n    }\n\n    public isVisible() {\n        return this.viewElements.popup.isVisible();\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        this.viewElements.range.setOptions({\n            stepMinute: clinicConfig.dragTimeStep\n        });\n\n    }\n\n\n    public onDocumentLoaded() {\n\n        this.viewElements.titleInput = <HTMLInputElement>document.getElementById('event-title');\n        this.viewElements.descriptionTextarea = <HTMLTextAreaElement>document.getElementById('event-desc');\n        this.viewElements.patientArrivedButton = <HTMLButtonElement>document.getElementById('event-arrived');\n        this.viewElements.deleteButton = <HTMLButtonElement>document.getElementById('event-delete');\n        this.viewElements.patientCancelledButton = <HTMLButtonElement>document.getElementById('event-cancelled');\n        this.viewElements.patientDNAButton = <HTMLButtonElement>document.getElementById('event-dna');\n        this.viewElements.readyForBillingButton = <HTMLButtonElement>document.getElementById('event-readyforbilling');\n        this.viewElements.billingCompleteButton = <HTMLButtonElement>document.getElementById('event-billingcompleted');\n\n        this.viewElements.patientSearchEl = <HTMLSelectElement>document.getElementById(SELECT.patientSearch);\n        this.viewElements.appointmentTypeEl = <HTMLSelectElement>document.getElementById(SELECT.appointmentType);\n\n        this.viewElements.warningsEl = <HTMLTextAreaElement>document.getElementById(\"patient-warning\");\n\n\n        // @ts-ignore\n        this.viewElements.popup = popup('#add-appointment-popup', {\n            display: 'bottom',\n            contentPadding: true,\n            fullScreen: true,\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n        this.viewElements.titleInput.addEventListener('input', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.title = ev.target.value;\n        });\n\n        this.viewElements.descriptionTextarea.addEventListener('change', function (ev: any) {\n            // update current event's title\n            AppointmentController.getInstance().getModel().tempEvent.description = ev.target.value;\n        });\n\n        this.viewElements.range = datepicker('#event-date', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input',\n            endInput: '#end-input',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute: 15,\n            maxTime: '17:00',\n            responsive: AppointmentDetailModal.datePickerResponsive,\n            onChange: function (args: any) {\n                let date = args.value;\n                // update event's start date\n                AppointmentController.getInstance().getModel().tempEvent.start = date[0];\n                AppointmentController.getInstance().getModel().tempEvent.end = date[1];\n            }\n        });\n\n\n        this.setupActionButtons();\n        logger('Completed setup of detail modal for appointments');\n    }\n\n    public setupAppointmentTypeDropDown(appointmentTypes: any[]) {\n\n        let types: any[] = [];\n\n        appointmentTypes.forEach((type: any) => {\n            if (!(type.isStatus)) types.push(type.name);\n        });\n\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.appointmentTypeDropdown = select('#' + SELECT.appointmentType, {\n            data: types,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.type = event.valueText;\n            }\n        });\n    }\n\n    public setupProviderDropdown(providers: any[]) {\n        // add the patient search values to the data of the select dropdown\n        this.viewElements.providersDropdown = select('#event-provider', {\n            data: providers,\n            onChange: (event: any, inst: any) => {\n                AppointmentController.getInstance().getModel().tempEvent.provider = event.valueText;\n                AppointmentController.getInstance().getModel().tempEvent.resource = event.value;\n\n            }\n        });\n\n    }\n\n    public startCreateAppointment(elm: HTMLElement) {\n        // hide delete button inside add popup\n        this.viewElements.deleteButton.style.display = 'none';\n        this.viewElements.patientCancelledButton.style.display = 'none';\n        this.viewElements.patientDNAButton.style.display = 'none';\n        this.viewElements.patientArrivedButton.style.display = 'none';\n        this.viewElements.readyForBillingButton.style.display = 'none';\n        this.viewElements.billingCompleteButton.style.display = 'none';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'block';\n        this.viewElements.appointmentTypeEl.style.display = 'block';\n\n\n        // set popup header text and buttons for adding\n        this.viewElements.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().removeEvent(AppointmentTemplateController.getInstance().getModel().tempEvent);\n                    }\n                },\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentController.getInstance().getModel().tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        let colour = AppointmentControllerHelper.getInstance().getColourForAppointmentType('Consulting');\n\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n\n                        let updatedEvent = {\n                            id: appointmentId,\n                            title: getInst<any>(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst<any>(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            color: colour,\n                            patientId: AppointmentController.getInstance().getModel().tempEvent.patientId,\n                            editable: true,\n                            resource: AppointmentController.getInstance().getModel().tempEvent.resource,\n                            isDNA: false,\n                            isCancelled: false,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: createdOn,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: AppointmentController.getInstance().getModel().tempEvent.type,\n                            provider: AppointmentController.getInstance().getModel().tempEvent.provider\n                        };\n                        logger('inserting');\n                        logger(updatedEvent);\n\n                        // remove the original event\n                        AppointmentBookView.getInstance().getCalender().removeEvent([mobiId]);\n                        AppointmentBookView.getInstance().getCalender().addEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n\n                        // navigate the calendar to the correct view\n                        AppointmentBookView.getInstance().getCalender().navigate(updatedEvent.start);\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = AppointmentController.getInstance().getModel().tempEvent.title;\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = '';\n\n        this.viewElements.range.setVal([AppointmentController.getInstance().getModel().tempEvent.start, AppointmentController.getInstance().getModel().tempEvent.end]);\n        this.viewElements.range.setOptions({\n            controls: AppointmentController.getInstance().getModel().tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentController.getInstance().getModel().tempEvent.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        this.viewElements.appointmentTypeDropdown.setVal('');\n        this.viewElements.patientSearchDropdown.setVal('');\n        this.viewElements.providersDropdown.setVal(AppointmentController.getInstance().getModel().tempEvent.resource);\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: elm});\n\n        this.viewElements.popup.open();\n    }\n\n    public updateAppointment(args: any) {\n        let ev = args.event;\n\n        // show delete button inside edit popup\n        this.viewElements.patientArrivedButton.style.display = 'block';\n        this.viewElements.deleteButton.style.display = 'block';\n        this.viewElements.patientCancelledButton.style.display = 'block';\n        this.viewElements.patientDNAButton.style.display = 'block';\n        this.viewElements.readyForBillingButton.style.display = 'block';\n        this.viewElements.billingCompleteButton.style.display = 'block';\n        // show the dropdowns\n        this.viewElements.patientSearchEl.style.display = 'none';\n        this.viewElements.appointmentTypeEl.style.display = 'none';\n\n\n        // set popup header text and buttons for editing\n        this.viewElements.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    keyCode: 'esc',\n                    handler: function () {\n                        AppointmentTemplateView.getInstance().getCalender().updateEvent(AppointmentTemplateController.getInstance().getModel().oldEvent);\n                    }\n                },\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentDetailModal.getInstance().viewElements.range.getVal();\n                        // update event with the new properties on save button click\n                        let createdOn = parseInt(moment().format('YYYYDDMMHHmmss'));\n                        //\n                        let updatedEvent = {\n                            id: ev.id,\n                            title: getInst<any>(AppointmentDetailModal.getInstance().viewElements.titleInput).value,\n                            description: getInst<any>(AppointmentDetailModal.getInstance().viewElements.descriptionTextarea).value,\n                            allDay: false,\n                            start: date[0],\n                            end: date[1],\n                            free: false,\n                            patientId: ev.patientId,\n                            editable: true,\n                            resource: ev.resource,\n                            isDNA: ev.isDNA,\n                            isCancelled: ev.isCancelled,\n                            createdBy: SecurityManager.getInstance().getLoggedInUsername(),\n                            created: ev.created,\n                            modified: createdOn,\n                            arrivalTime: '',\n                            type: ev.type,\n                            provider: ev.provider\n                        };\n                        // @ts-ignore\n                        updatedEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(updatedEvent);\n                        logger('updated');\n                        logger(updatedEvent)\n                        AppointmentBookView.getInstance().getCalender().updateEvent(updatedEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(updatedEvent),\n                            false);\n                        // navigate the calendar to the correct view\n\n                        AppointmentBookView.getInstance().getCalender().navigate(date[0]);\n                        AppointmentDetailModal.getInstance().close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.titleInput).value = ev.title || '';\n        // @ts-ignore\n        mobiscroll5.getInst(this.viewElements.descriptionTextarea).value = ev.description || '';\n        this.viewElements.range.setVal([ev.start, ev.end]);\n\n        // change range settings based on the allDay\n        this.viewElements.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentDetailModal.datePickerResponsive : AppointmentDetailModal.datetimePickerResponsive\n        });\n\n        // set the appointment type and patient\n        this.viewElements.appointmentTypeDropdown.setVal(ev.type);\n        this.viewElements.patientSearchDropdown.setVal(ev.patientId);\n        this.viewElements.providersDropdown.setVal(ev.resource);\n\n        let warningsText = this.getPatientWarnings(ev.patientId);\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n        // set anchor for the popup\n        this.viewElements.popup.setOptions({anchor: args.domEvent.currentTarget});\n        this.viewElements.popup.open();\n    }\n\n    public setupPatientSearchDropDown(patientsCollection: any[]) {\n        this.patients = [];\n\n        patientsCollection.forEach((patient: any) => {\n            this.patients.push({text: `${patient.name.surname}, ${patient.name.firstname}`, value: patient._id});\n        });\n\n        // add the patient search values to the data of the select dropdown\n        //\n        this.viewElements.patientSearchDropdown = select('#' + SELECT.patientSearch, {\n            filter: true,\n            data: AppointmentDetailModal.getInstance().patients,\n            onChange: (event: any, inst: any) => {\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.titleInput).value = event.valueText;\n\n                let warningsText = this.getPatientWarnings(event.value);\n                // @ts-ignore\n                getInst(AppointmentDetailModal.getInstance().viewElements.warningsEl).value = warningsText;\n\n                AppointmentController.getInstance().getModel().tempEvent.patientId = event.value;\n                AppointmentController.getInstance().getModel().tempEvent.warnings = warningsText;\n            }\n        });\n\n    }\n\n    protected setupActionButtons() {\n        this.viewElements.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            //\n            AppointmentBookView.getInstance().getCalender().removeEvent(AppointmentController.getInstance().getModel().tempEvent);\n            Controller.getInstance().getStateManager().removeItemFromState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(AppointmentController.getInstance().getModel().tempEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        //\n                        AppointmentBookView.getInstance().getCalender().addEvent(deletedEvent);\n                        Controller.getInstance().getStateManager().addNewItemToState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(deletedEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n        this.viewElements.patientCancelledButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            let originalType = originalEvent.type;\n            let originalNote = originalEvent.note;\n\n            originalEvent.isCancelled = true;\n            originalEvent.type = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.note = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isCancelled = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Cancelled'\n            });\n        });\n\n        this.viewElements.patientArrivedButton.addEventListener('click', function () {\n            // update the event to arrived\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n            originalEvent.arrivalTime = moment().format('HHmmss');\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n\n            //\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.arrivalTime = '';\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient Arrived'\n            });\n        });\n\n        this.viewElements.patientDNAButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n            let originalNote = originalEvent.note;\n            let originalType = originalEvent.type;\n\n            originalEvent.isDNA = true;\n            originalEvent.type = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.note = AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isDNA = false;\n                        originalEvent.type = originalType;\n                        originalEvent.note = originalNote;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Patient DNA'\n            });\n        });\n        this.viewElements.readyForBillingButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.readyForBilling = true;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.readyForBilling = false;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Ready For Billing'\n            });\n        });\n        this.viewElements.billingCompleteButton.addEventListener('click', function () {\n            // update the event to cancelled and set to non-editable\n            // save a local reference to the deleted event\n            let originalEvent = AppointmentController.getInstance().getModel().tempEvent;\n\n\n            originalEvent.isBilled = true;\n            originalEvent.editable = false;\n            originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n\n            //\n            AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n            Controller.getInstance().getStateManager().updateItemInState(\n                STATE_NAMES.appointments,\n                AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                false);\n\n            AppointmentDetailModal.getInstance().close();\n\n            snackbar({\n                button: {\n                    action: function () {\n                        originalEvent.isBilled = false;\n                        originalEvent.editable = true;\n                        originalEvent.color = AppointmentControllerHelper.getInstance().getColourForAppointment(originalEvent);\n                        AppointmentBookView.getInstance().getCalender().updateEvent(originalEvent);\n                        Controller.getInstance().getStateManager().updateItemInState(\n                            STATE_NAMES.appointments,\n                            AppointmentControllerHelper.getInstance().getAppointmentFromEvent(originalEvent),\n                            false);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Billing Complete'\n            });\n        });\n    }\n\n    private getPatientWarnings(patientId: string) {\n        let patientBasicDetails: any = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: patientId});\n        let warningsText = '';\n        if (patientBasicDetails && patientBasicDetails.flags) {\n            if (patientBasicDetails.flags.hasWarnings) {\n                patientBasicDetails.warnings.warnings.forEach((warning: any) => {\n                    warningsText += warning + '\\r\\n';\n                });\n                logger('Patient has warnings');\n                logger(patientBasicDetails);\n                logger(warningsText);\n            }\n\n        }\n        return warningsText;\n\n    }\n\n\n}\n","import {AppointmentBookView} from \"./AppointmentBookView\";\n\nexport class AppointmentFilterView {\n    private static _instance: AppointmentFilterView;\n    private providersEl: HTMLDivElement | null;\n    private calendarFilterEl: HTMLDivElement | null;\n\n    public static getInstance(): AppointmentFilterView {\n        if (!(AppointmentFilterView._instance)) {\n            AppointmentFilterView._instance = new AppointmentFilterView();\n        }\n        return AppointmentFilterView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.providersEl = <HTMLDivElement>document.getElementById('providers');\n        this.calendarFilterEl = <HTMLDivElement>document.getElementById('calendarFilter');\n    }\n\n    public populateProviders(providers: any[]): void {\n        if (providers && this.providersEl) {\n            providers.forEach((provider: any) => {\n                let labelEl = document.createElement('label');\n                let inputEl = document.createElement('input');\n                inputEl.setAttribute('type', 'checkbox');\n                inputEl.setAttribute('value', provider.name);\n                inputEl.setAttribute(\"checked\", '');\n                inputEl.setAttribute(\"mbsc-checkbox\", '');\n                inputEl.setAttribute('data-label', provider.name);\n                inputEl.classList.add('provider-checkbox');\n                labelEl.appendChild(inputEl);\n\n                this.providersEl.appendChild(labelEl);\n\n\n            });\n            // @ts-ignore\n            mobiscroll5.enhance(this.providersEl);\n            // @ts-ignore\n            mobiscroll5.enhance(this.calendarFilterEl);\n\n\n            document.querySelectorAll('.provider-checkbox').forEach(function (elm) {\n                elm.addEventListener('change', function () {\n                    let checkboxList = document.querySelectorAll('.provider-checkbox');\n                    let selected: any[] = [];\n\n                    for (let i = 0; i < checkboxList.length; i++) {\n                        let checkbox = checkboxList[i];\n                        // @ts-ignore\n                        if (checkbox.checked) {\n                            // @ts-ignore\n                            selected.push({id: checkbox.value, name: checkbox.value});\n                        }\n                    }\n\n\n                    AppointmentBookView.getInstance().getCalender().setOptions({\n                        resources: selected\n                    });\n                });\n            });\n\n            // document.querySelectorAll('.md-view-change').forEach(function (elm) {\n            //     elm.addEventListener('change', function (ev) {\n            //\n            //         let config = {...AppointmentTemplateController.getInstance().getModel().clinicConfig};\n            //          config.view.schedule.type = ev.target.value;\n            //\n            //         let options = {\n            //             //clickToCreate: config.clickToCreate,\n            //             //dragTimeStep: config.dragTimeStep,\n            //             //dragToCreate: config.dragToCreate,\n            //             //dragToMove: config.dragToMove,\n            //             //dragToResize: config.dragToResize,\n            //             //min: moment().subtract(config.min, \"months\"),\n            //             //controls: config.controls,\n            //             //showControls: config.showControls,\n            //             view: {\n            //                 schedule: {\n            //                     type: ev.target.value,\n            //                     startTime: config.view.schedule.startTime,\n            //                     endTime: config.view.schedule.endTime,\n            //                     timeCellStep:10,\n            //                     timeLabelStep:60\n            //                 }\n            //             },\n            //             //invalidateEvent: config.invalidateEvent,\n            //             //invalid: config.invalid,\n            //         }\n            //\n            //         console.log(options);\n            //\n            //         AppointmentTemplateView.getInstance().getCalender().setOptions(options);\n            //\n            //     });\n            // });\n\n\n        }\n\n    }\n\n}\n","import debug from 'debug';\nimport {\n    ChatEventListener,\n    ChatLog,\n    ChatManager,\n    CollectionView,\n    CollectionViewListener, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE,\n    Invitation,\n    Message,\n    Modifier,\n    NotificationController,\n    Priority,\n    STATE_NAMES,\n    StateChangeListener,\n    StateManager,\n    View,\n    VIEW_NAME,\n    ViewDOMConfig\n} from \"ui-framework-jps\";\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {SimpleAttachment} from \"ui-framework-jps/dist/framework/socket/Types\";\nimport moment from \"moment\";\n\nimport {DRAGGABLE as APP_DRAGGABLE, STATE_NAMES as APP_STATE_NAMES} from '../AppTypes'\nimport Controller from \"../Controller\";\nimport {AttachmentListener} from \"./AttachmentListener\";\n\n\nconst logger = debug('clinic-chat-detail-view');\n\nexport class ClinicChatDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static _instance: ClinicChatDetailView;\n\n    public static getInstance(stateManager: StateManager): ClinicChatDetailView {\n        if (!(ClinicChatDetailView._instance)) {\n            ClinicChatDetailView._instance = new ClinicChatDetailView(stateManager);\n        }\n        return ClinicChatDetailView._instance;\n    }\n\n\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static priorityId: string = 'priority';\n    private static clinicChatFastPatientSearch: string = 'clinicChatFastPatientSearch';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLDivElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLDivElement;\n    // @ts-ignore\n    protected chatForm: HTMLFormElement;\n    // @ts-ignore\n    protected priorityEl: HTMLSelectElement;\n    // @ts-ignore\n    protected commentEl: HTMLInputElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLButtonElement;\n    // @ts-ignore\n    protected fastPatientSearch: HTMLInputElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n    protected currentlySelectedPatient: any | null;\n\n    private listeners:AttachmentListener[] = [];\n\n\n\n\n    private constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handlePatientDrop = this.handlePatientDrop.bind(this);\n        this.handlePatientSelected = this.handlePatientSelected.bind(this);\n        this.handleAttachmentClicked = this.handleAttachmentClicked.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n        this.stateManager.addChangeListenerForName(APP_STATE_NAMES.patientSearch, this);\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ClinicChatDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ClinicChatDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ClinicChatDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ClinicChatDetailView.submitCommentId);\n        // @ts-ignore\n        this.priorityEl = document.getElementById(ClinicChatDetailView.priorityId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ClinicChatDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastPatientSearch = document.getElementById(ClinicChatDetailView.clinicChatFastPatientSearch);\n\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            logger('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handlePatientDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n\n        this.checkCanComment();\n\n        const fastSearchEl = $(this.fastPatientSearch);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.handlePatientSelected);\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            logger(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handlePatientDrop(event: Event) {\n        logger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            logger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === APP_DRAGGABLE.typePatientSummary) {\n                // send the patient as an attachment\n                const roomName = this.selectedChatLog.roomName;\n                const simpleAttachment: SimpleAttachment = {\n                    identifier: draggedObject._id,\n                    type: APP_DRAGGABLE.typePatientSummary,\n                    displayText: `${draggedObject.name.firstname} ${draggedObject.name.surname}`,\n                    iconClasses: 'fas fa-male'\n                }\n                let sentMessage: Message | null = ChatManager.getInstance().sendMessage(roomName, simpleAttachment.displayText, Priority.Normal, simpleAttachment, {});\n                if (sentMessage) {\n                    // add the message to our display\n                    let messageEl = this.addChatMessage(sentMessage);\n                    // scroll to bottom\n                    if (messageEl) browserUtil.scrollSmoothTo(messageEl);\n                }\n\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        logger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`Handling message event`);\n        if (this.selectedChatLog) {\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            const messageContent = this.commentEl.value.trim();\n            this.commentEl.value = '';\n\n            let priority = parseInt(this.priorityEl.value);\n            if (isNaN(priority)) priority = Priority.Normal;\n\n            let simpleAttachment: SimpleAttachment = {identifier: '', type: '', displayText: ''};\n            if (this.currentlySelectedPatient) {\n                simpleAttachment.identifier = this.currentlySelectedPatient._id;\n                simpleAttachment.type = APP_DRAGGABLE.typePatientSummary;\n                simpleAttachment.displayText = `${this.currentlySelectedPatient.name.firstname} ${this.currentlySelectedPatient.name.surname}`;\n                simpleAttachment.iconClasses = 'fas fa-male';\n            }\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, priority, simpleAttachment, {});\n            logger(sentMessage);\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                if (messageEl) browserUtil.scrollSmoothTo(messageEl);\n            }\n\n            this.currentlySelectedPatient = null;\n            this.fastPatientSearch.value = '';\n        }\n    }\n\n\n    addChatMessage(message: Message): HTMLElement | null {\n        let chatMessageEl: HTMLElement | null = null;\n\n        // ignore \"join\"/\"exit\" message?\n        if (message.from.trim().length !== 0) {\n            chatMessageEl = document.createElement('div');\n            browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, 'my-message');\n            }\n\n            // create and display a time stamp\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n            chatMessageEl.appendChild(messageSenderEl);\n            // message content\n            let contentEl = document.createElement('div');\n\n\n            // just a text message\n            let classesTextAppend = '';\n            switch (message.priority) {\n                case Priority.High: {\n                    classesTextAppend = '-high';\n                    break;\n                }\n                case Priority.Urgent: {\n                    classesTextAppend = '-urgent';\n                    break;\n                }\n            }\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, `my-message-content${classesTextAppend}`);\n            } else {\n                browserUtil.addRemoveClasses(contentEl, `message-content${classesTextAppend}`);\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n            this.chatLogDiv.appendChild(chatMessageEl);\n\n\n\n\n            // do we have a simple attachement?\n            if (message.simpleAttachment.identifier.trim().length > 0) {\n                chatMessageEl = document.createElement('div');\n                browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n                if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                    browserUtil.addRemoveClasses(chatMessageEl, 'my-message');\n                }\n\n                // message content\n                let contentEl = document.createElement('div');\n\n                const attachment = message.simpleAttachment;\n                // simple attachment - should be a patient summary\n                let attachmentLinkEl = document.createElement('a');\n                browserUtil.addAttributes(attachmentLinkEl, [{\n                    name: 'data-type',\n                    value: `${attachment.type}`\n                }, {name: 'data-id', value: `${attachment.identifier}`}]);\n                let buffer = '';\n                if (attachment.iconClasses) {\n                    buffer += `<i class=\"${attachment.iconClasses}\"></i>`;\n                }\n                buffer += `&nbsp;&nbsp;${attachment.displayText}`;\n                attachmentLinkEl.innerHTML = buffer;\n                if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                    browserUtil.addRemoveClasses(contentEl, `my-message-content-${attachment.type}`);\n                } else {\n                    browserUtil.addRemoveClasses(contentEl, `message-content-${attachment.type}`);\n                }\n                contentEl.appendChild(attachmentLinkEl);\n                attachmentLinkEl.addEventListener('click',this.handleAttachmentClicked);\n                chatMessageEl.appendChild(contentEl);\n                this.chatLogDiv.appendChild(chatMessageEl);\n            }\n\n        }\n\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        logger(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    stateChanged(managerName: string, name: string, newState: any): void {\n        if (name === APP_STATE_NAMES.patientSearch) {\n            logger(`Handling patient search results`);\n            logger(newState);\n            // load the search names into the search field\n            const fastSearchEl = $(this.fastPatientSearch);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: `${item.name.firstname} ${item.name.surname}`,\n                    value: item._id,\n                };\n                fastSearchValues.push(searchValue);\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {\n    }\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.fastPatientSearch) this.fastPatientSearch.removeAttribute(\"disabled\");\n            if (this.priorityEl) this.priorityEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastPatientSearch) this.fastPatientSearch.setAttribute(\"disabled\", \"true\");\n            if (this.priorityEl) this.priorityEl.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    handlePatientSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        logger(`Patient ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.value = ui.item.label;\n        this.currentlySelectedPatient = Controller.getInstance().getStateManager().findItemInState(APP_STATE_NAMES.patientSearch, {_id: ui.item.value});\n        logger(this.currentlySelectedPatient);\n    }\n\n    handleAttachmentClicked(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dataType = (<HTMLElement>event.target).getAttribute(\"data-type\");\n        const dataId = (<HTMLElement>event.target).getAttribute(\"data-id\");\n        logger(`Handling attachment clicked of type ${dataType} with identifier ${dataId}`);\n        this.listeners.forEach((listener) => {\n            listener.attachmentClicked(dataType,dataId);\n        });\n\n    }\n\n    public addAttachmentListener(listener:AttachmentListener) {\n        this.listeners.push(listener);\n    }\n\n}\n\n\n","import debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    ChatEventListener,\n    ChatLog,\n    ChatManager,\n    ChatUserEventListener,\n    CollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ComparisonType,\n    FilterItem,\n    Invitation,\n    isSameRoom,\n    KeyType,\n    ListViewRenderer,\n    MemoryBufferStateManager,\n    Message,\n    Modifier,\n    NotificationController,\n    SecurityManager,\n    STATE_NAMES,\n    View,\n    VIEW_NAME\n} from \"ui-framework-jps\";\nimport Controller from \"../Controller\";\n\n\nconst logger = debug('clinic-chat-list-view');\nconst dLogger = debug('clinic-chat-list-view:detail');\n\nexport class ClinicChatListView extends AbstractStatefulCollectionView implements ChatEventListener, CollectionViewListener, ChatUserEventListener {\n    private static _instance: ClinicChatListView;\n\n    public static getInstance(): ClinicChatListView {\n        if (!(ClinicChatListView._instance)) {\n            ClinicChatListView._instance = new ClinicChatListView();\n        }\n        return ClinicChatListView._instance;\n    }\n\n\n\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElement:{\n            type:'a',\n            attributes:[{name: 'href', value: '#'}],\n            classes:'list-group-item my-list-item truncate-notification list-group-item-action'\n        } ,\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-primary mr-1',\n            },\n            secondBadge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-warning mr-1',\n            },\n            thirdBadge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-danger mr-1',\n            },\n            icons: (name:string,item:any) => {\n                let results:string[] = [];\n                if (item.users.length == 2) {\n                    let filter: FilterItem = {\n                        attributeName: 'username',\n                        value: item.users[1],\n                        comparison: ComparisonType.equals,\n                    }\n                    // find the user in the state\n                    const users = Controller.getInstance().getStateManager().findItemsInState(STATE_NAMES.users, [filter]);\n                    dLogger(`Found users with filter`);\n                    dLogger(users);\n                    if (users && users.length > 0) {\n                        const user = users[0];\n                        dLogger(`Getting icons for user`);\n                        dLogger(user);\n                        if (user.isAdmin) {\n                            results.push(\"fas fa-user-cog\");\n                        }\n                        if (user.providerNo.trim().length > 0) {\n                            results.push(\"fas fa-user-md\");\n                        }\n                    }\n                }\n                return results;\n            }\n        },\n    };\n    protected selectedChatLog: ChatLog | null = null;\n    private doNotDisturbEl: HTMLInputElement|null = null;\n\n   private constructor() {\n        super(ClinicChatListView.DOMConfig, new MemoryBufferStateManager(isSameRoom), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.stateChanged = this.stateChanged.bind(this);\n        this.toggleDoNotDisturb = this.toggleDoNotDisturb.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        NotificationController.getInstance().addUserListener(this);\n\n        // load all users into the list view\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.users,this);\n    }\n\n    toggleDoNotDisturb(event:Event) {\n       event.preventDefault();\n       event.stopPropagation();\n       if (this.doNotDisturbEl) {\n           logger(`Toggling Do Not Disturb ${this.doNotDisturbEl.checked}`)\n           const doNotDisturb = !this.doNotDisturbEl.checked;\n\n           NotificationController.getInstance().setOptions({\n               showNormalPriorityMessageNotifications: doNotDisturb,\n               showHighPriorityMessageNotifications: doNotDisturb,\n               showUrgentPriorityMessageNotifications: true,\n               showInvitationDeclinedNotifications: false,\n               showInvitedNotifications: false,\n               showOfflineMessageNotification: true,\n               showFavouriteUserLoggedInNotification: false,\n               showFavouriteUserLoggedOutNotification: false,\n               showUserJoinLeaveChatNotification: false\n\n           });\n       }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n    handleFavouriteUserLoggedIn(username: string): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n    handleFavouriteUserLoggedOut(username: string): void {\n        logger(`Handling logged in users changed`);\n        this.updateStateManager();\n    }\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n    handleBlockedUsersChanged(usernames: string[]): void {}\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameRoom(item1, item2);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        logger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.doNotDisturbEl = <HTMLInputElement>document.getElementById('doNotDisturb');\n        // if (this.doNotDisturbEl) {\n        //     // @ts-ignore\n        //     mobiscroll5.enhance(this.doNotDisturbEl);\n        // }\n        this.doNotDisturbEl.addEventListener('change', this.toggleDoNotDisturb)\n\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let chatLog = <ChatLog>item;\n        if (chatLog.users.length > 1) {\n            containerEl.innerHTML = chatLog.users[1] + \"&nbsp;&nbsp;&nbsp;\";\n        }\n        else {\n            containerEl.innerHTML = 'Chat closed by other user';\n        }\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        dLogger('Checking modifiers for item');\n        dLogger(item);\n        let result = Modifier.inactive;\n        if (item.users.length == 2) {\n            // if the user is currently logged out make the item inactive\n            dLogger(`user ${item.users[1]} is logged in? ${ChatManager.getInstance().isUserLoggedIn(item.users[1])}`);\n            if (ChatManager.getInstance().isUserLoggedIn(item.users[1])) {\n                result = Modifier.active;\n            }\n        }\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.normal;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n    selectChatRoom(roomName: string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadMessages;\n    }\n    getSecondaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadHighMessages;\n    }\n    getTertiaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadUrgentMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n\n    showRequested(view: View): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private updateStateManager() {\n        logger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        logger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs, newState, true);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any) {\n        logger(`Updating state for ${name}`);\n        logger(newValue);\n        if (name === STATE_NAMES.users) {\n            // load a chat room for each other user\n            newValue.forEach((user:any) => {\n                if (user.username !== SecurityManager.getInstance().getLoggedInUsername()) {\n                    ChatManager.getInstance().addUserToFavouriteList(user.username);\n                    ChatManager.getInstance().startChatWithUser(user.username);\n                }\n            })\n        }\n        if (name === STATE_NAMES.chatLogs) {\n            super.stateChanged(managerName,name,newValue);\n        }\n\n    }\n}\n\n","\nimport {ClinicChatListView} from \"./ClinicChatListView\";\nimport {ClinicChatDetailView} from \"./ClinicChatDetailView\";\nimport {SidebarLocation, SidebarPrefs, SidebarViewContainer, StateManager} from \"ui-framework-jps\";\n\nexport class ClinicChatSidebar extends SidebarViewContainer {\n    private static _instance: ClinicChatSidebar;\n\n    public static getInstance(stateManager: StateManager): ClinicChatSidebar {\n        if (!(ClinicChatSidebar._instance)) {\n            ClinicChatSidebar._instance = new ClinicChatSidebar(stateManager);\n        }\n        return ClinicChatSidebar._instance;\n    }\n\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'chatSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    private constructor(stateManager: StateManager) {\n        super(ClinicChatSidebar.SidebarPrefs);\n        const chatView = ClinicChatListView.getInstance();\n        this.addView(chatView, {containerId: ClinicChatSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = ClinicChatDetailView.getInstance(stateManager);\n        this.addView(chatLogView, {containerId: ClinicChatSidebar.SidebarContainers.chatLog});\n        chatView.addEventListener(chatLogView);\n    }\n}\n\n\n","import Controller from \"../Controller\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport {StateChangeListener} from \"ui-framework-jps\";\nimport debug from 'debug';\nimport moment from \"moment\";\nimport {computeTimeStringFromStartTimeAndDurationInSeconds} from \"../DurationFunctions\";\nimport {v4} from \"uuid\";\nimport {ScheduleLoadedListener} from \"./ScheduleLoadedListener\";\nimport {AppointmentController} from \"../appointments/AppointmentController\";\n\n\nconst logger = debug('appointment-controller-helper');\n\nexport class AppointmentControllerHelper implements StateChangeListener{\n    private static _instance: AppointmentControllerHelper;\n    \n    public static getInstance(): AppointmentControllerHelper {\n        if (!(AppointmentControllerHelper._instance)) {\n            AppointmentControllerHelper._instance = new AppointmentControllerHelper();\n        }\n        return AppointmentControllerHelper._instance;\n    }\n\n    public static APPOINTMENT_STATUS_ARRIVED = 'Patient Arrived';\n    public static APPOINTMENT_STATUS_READY_FOR_BILLING = 'Ready For Billing';\n    public static APPOINTMENT_STATUS_BILLING_COMPLETE = 'Billing Complete';\n    public static APPOINTMENT_TYPE_PATIENT_CANCELLED = 'Patient Cancelled';\n    public static APPOINTMENT_TYPE_PATIENT_DNA = 'Did Not Arrive';\n    \n    private appointmentTypes:any[] = [];\n    private clinicConfig:any|null = null;\n    private patientSearch:any[] = [];\n    private providers:any[] = [];\n\n    private listeners:ScheduleLoadedListener[] = [];\n    \n    private constructor() {\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.providers, this)\n\n        this.handleAppointmentTemplateRendering = this.handleAppointmentTemplateRendering.bind(this);\n        this.handleAppointmentRendering = this.handleAppointmentRendering.bind(this);\n    }\n\n    public addListener(listener:ScheduleLoadedListener) {\n        this.listeners.push(listener);\n    }\n\n    public haveAppointentTypesLoaded() {\n        return (this.appointmentTypes.length > 0);\n    }\n\n    public havePatientSearchesLoaded() {\n        return (this.patientSearch.length > 0);\n    }\n\n    public haveProvidersLoaded() {\n        return (this.providers.length > 0);\n    }\n\n    public hasClinicConfigLoaded() {\n        return (this.clinicConfig);\n\n    }\n\n    public getAppointmentTypes():any[] {\n        return this.appointmentTypes;\n    }\n\n    public getPatientSearch():any[] {\n        return this.patientSearch;\n    }\n\n    public getProviders():any[] {\n        return this.providers;\n    }\n\n    public getClinicConfig():any {\n        if (this.clinicConfig) {\n            const config = JSON.parse(JSON.stringify(this.clinicConfig));\n            return config;\n        }\n        else {\n            let options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'week',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n            return options;\n        }\n    }\n\n\n    public getIconForAppointmentType(appointmentType: string) {\n        logger(`Getting icon for appoint type ${appointmentType}`);\n        let result = ``;\n        if (this.appointmentTypes) {\n            let foundIndex = this.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) {\n                if (this.appointmentTypes[foundIndex].icon) {\n                    result = `<i class=\"md-custom-event-icon ${this.appointmentTypes[foundIndex].icon}\"></i>`;\n                }\n\n            }\n        }\n        return result;\n    }\n\n\n\n    public getIconsForEvent(event: any): string {\n        let buffer = '';\n        if (event.arrivalTime) {\n            if (event.arrivalTime.trim().length > 0) {\n                buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (event.readyForBilling) {\n            buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n        }\n        if (event.isBilled) {\n            buffer += this.getIconForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n        }\n        buffer += this.getIconForAppointmentType(event.type);\n\n        return buffer;\n    }\n\n    public getColourForAppointmentType(appointmentType: string) {\n        let result = `rgba(10, 100, 100, 50)`;\n        if (this.appointmentTypes) {\n            let foundIndex = this.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = this.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    public getColourForAppointmentTemplate(appointment: any) {\n        return this.getColourForAppointmentType(appointment.type);\n\n    }\n\n    public getColourForAppointment(appointment: any) {\n        let colour = this.getColourForAppointmentType(appointment.type);\n\n        if (appointment.arrivalTime) {\n            if (appointment.arrivalTime.trim().length > 0) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_ARRIVED);\n            }\n        }\n        if (appointment.readyForBilling || appointment.isBilled || appointment.isCancelled || appointment.isDNA) {\n            if (appointment.readyForBilling) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_READY_FOR_BILLING);\n            }\n            if (appointment.isBilled) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_STATUS_BILLING_COMPLETE);\n            }\n            if (appointment.isCancelled) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_CANCELLED);\n            }\n            if (appointment.isDNA) {\n                colour = this.getColourForAppointmentType(AppointmentControllerHelper.APPOINTMENT_TYPE_PATIENT_DNA);\n            }\n        }\n        return colour;\n    }\n\n    public getEventForAppointment(loadDate: number, appointment: any): any {\n        const today = parseInt(moment().format('YYYYMMDD'));\n\n        let canEdit = ((loadDate >= today) && (!appointment.isDNA && !appointment.isCancelled) && (!appointment.isBilled));\n        const timeString = computeTimeStringFromStartTimeAndDurationInSeconds(appointment.time, appointment.duration);\n\n        let result = {\n            id: appointment._id,\n            start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n            title: appointment.name,\n            description: appointment.note,\n            allDay: false,\n            editable: canEdit,\n            resource: appointment.provider,\n            patientId: appointment._patient,\n            isDNA: appointment.isDNA,\n            isCancelled: appointment.isCancelled,\n            createdBy: appointment.createdBy,\n            created: appointment.created,\n            modified: appointment.modified,\n            arrivalTime: appointment.arrivalTime,\n            type: appointment.type,\n            provider: appointment.provider,\n            readyForBilling: appointment.readyForBilling,\n            billingItems: appointment.billingItems,\n            isBilled: appointment.isBilled\n        }\n        // @ts-ignore\n        result.color = this.getColourForAppointment(appointment);\n\n\n        return result;\n    }\n\n    public getAppointmentFromEvent(event: any): any {\n        let start = parseInt(moment(event.start).format('YYYYMMDD'));\n        let time = moment(event.start).format('HHmmss');\n        let duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        let appointment = {\n            _id: event.id,\n            name: event.title,\n            note: event.description,\n            start: start,\n            time: time,\n            duration: duration,\n            _patient: event.patientId,\n            isDNA: event.isDNA,\n            isCancelled: event.isCancelled,\n            createdBy: Controller.getInstance().getLoggedInUsername(),\n            created: event.created,\n            modified: event.modified,\n            arrivalTime: event.arrivalTime,\n            type: event.type,\n            provider: event.resource,\n            readyForBilling: event.readyForBilling,\n            isBilled: event.isBilled,\n            billingItems: event.billingItems\n        };\n        return appointment;\n    }\n\n\n\n    filterResults(managerName: string, name: string, filterResults: any): void {}\n\n    getListenerName(): string {\n        return \"Appointment Controller Helper\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                this.clinicConfig = newValue[0];\n                this.listeners.forEach((listener) => {\n                    const config = JSON.parse(JSON.stringify(this.clinicConfig));\n                    listener.loadedClinicAppointmentBookConfig(config);\n                });\n                break;\n            }\n            case (STATE_NAMES.patientSearch): {\n                this.patientSearch = newValue;\n                this.listeners.forEach((listener) => listener.loadedPatientSearch(this.patientSearch));\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                this.appointmentTypes = newValue;\n                this.listeners.forEach((listener) => listener.loadedAppointmentTypes(this.appointmentTypes));\n                break;\n\n            }\n            case (STATE_NAMES.providers): {\n                this.providers = newValue;\n                this.listeners.forEach((listener) => listener.loadedProviders(this.providers));\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        switch(name) {\n            case (STATE_NAMES.appointmentTypes): {\n                this.appointmentTypes = Controller.getInstance().getStateManager().getStateByName(name);\n                this.listeners.forEach((listener) => listener.loadedAppointmentTypes(this.appointmentTypes));\n                break;\n\n            }\n        }\n    }\n\n    public getEventForAppointmentTemplateForDate(startDate: number, dayNumber: number, template: any): any {\n        logger(`Creating event for appointment template on date ${startDate} with ${dayNumber}`);\n        logger(template);\n        if (template.day < dayNumber) return null;\n        const loadDate = startDate + (template.day - dayNumber);\n\n        const timeString = computeTimeStringFromStartTimeAndDurationInSeconds(template.time, template.duration);\n\n\n        let result = {\n            id: template._id,\n            start: moment(`${startDate}${template.time}`, 'YYYYMMDDHHmmss'),\n            end: moment(`${startDate}${timeString}`, 'YYYYMMDDHHmm'),\n            color: this.getColourForAppointmentTemplate(template),\n            allDay: false,\n            editable: true,\n            resource: template.provider,\n            createdBy: template.createdBy,\n            created: template.created,\n            modified: template.modified,\n            type: template.type,\n            provider: template.provider\n        }\n        logger('Converted to event');\n        logger(result);\n\n        return result;\n\n    }\n\n\n\n    \n    public getAppointmentTemplateFromEvent(event: any): any {\n        let day = parseInt(moment(event.start).format('d'));\n        let time = moment(event.start).format('HHmmss');\n        let duration = moment(event.end).diff(moment(event.start), 'seconds');\n\n\n        let appointment = {\n            _id: event.id,\n            day: day,\n            time: time,\n            duration: duration,\n            createdBy: event.createdBy,\n            created: event.created,\n            modified: event.modified,\n            type: event.type,\n            provider: event.resource\n        };\n        return appointment;\n    }\n\n    handleAppointmentTemplateRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentControllerHelper.getInstance().getIconForAppointmentType(data.original.type);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row \">' +\n            `      <div style=\"background:${data.color}\" class=\"col-12 md-custom-event-template-type\">${data.original.type}</div>` +\n            '      <div class=\"col-12 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n                `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n                '      </div>' +\n                '  </div>' +\n                '</div>';\n        } else {\n            buffer += '' +\n                '  </div>' +\n                '</div>';\n        }\n        return buffer;\n    }\n\n    handleAppointmentRendering(data: any) {\n        logger(`Rendering event`);\n        logger(data);\n        const icons = AppointmentControllerHelper.getInstance().getIconsForEvent(data.original);\n        logger(`Applicable icons`);\n        logger(icons);\n\n        let buffer = '' +\n            '<div class=\"md-custom-event-cont\" style=\"border-left: 5px solid ' + data.color + ';background:' + data.color + '\">' +\n            '  <div class=\"md-custom-event-wrapper\">' +\n            '    <div class=\"container-fluid\">' +\n            '    <div class=\"row \">' +\n            `      <div style=\"background:${data.color}\" class=\"col-sm-12 col-md-2 md-custom-event-type\">${data.original.type}</div>` +\n            `      <div class=\"col-sm-4 col-md-6 md-custom-event-title\">${data.title}</div>` +\n            '      <div class=\"col-sm-6 col-md-4 d-flex w-100 justify-content-between md-custom-event-time\">' +\n            `        <span>${data.start} - ${data.end}</span>`;\n        if (icons.trim().length > 0) {\n            buffer += '' +\n                `        <span class=\"md-custom-event-img-cont\">${icons}</span>` +\n                '      </div>' +\n                '  </div>' +\n                '</div>';\n        } else {\n            buffer += '' +\n                '  </div>' +\n                '</div>';\n        }\n        return buffer;\n    }\n\n\n\n\n}","import {TabularViewContainer, TabularViewDOMConfig, TabularViewListener} from \"ui-framework-jps\";\n\nexport class PatientRecordTabularView extends TabularViewContainer {\n    protected static config:TabularViewDOMConfig = {\n        containedById: 'patientRecord',\n        containerId: 'patientRecordTabularView',\n        tabViewContainer: {\n            type:'div',\n            classes: 'row'\n        },\n        tabBarContainer: {\n            type: 'div',\n            classes: 'col-12'\n        },\n        tabBarElement: {\n            type: 'ul',\n            classes:'nav nav-pills nav-fill'\n        },\n        tabularViewContainer: {\n            type: 'div',\n            classes: 'col-12'\n        },\n        tabs: [\n            {\n                id: 'demographics',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Demographics'\n                },\n                isDefaultActive:true\n            },\n            {\n                id: 'consults',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'History and Consults'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'scripts',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Allergies and Scripts'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'results',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Results'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'documents',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Documents and Letters'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'vaccinations',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Vaccinations'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'workcover',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Workcover'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'tasks',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Tasks'\n                },\n                isDefaultActive:false\n            },\n            {\n                id: 'archive',\n                element:{\n                    type:'li',\n                    classes:'nav-item'\n                },\n                subElement: {\n                    type:'a',\n                    classes:'nav-link',\n                    attributes:[{name:'href',value:'#'}],\n                    innerHTML:'Script Archive'\n                },\n                isDefaultActive:false\n            },\n        ],\n    }\n\n    constructor() {\n        super(PatientRecordTabularView.config);\n    }\n}","import {PatientSearchSidebarContainers, PatientSearchSidebarPrefs} from \"../AppTypes\";\nimport {SidebarViewContainer} from \"ui-framework-jps\";\nimport {PatientSearchView} from \"./PatientSearchView\";\nimport Controller from \"../Controller\";\n\nexport class PatientSearchSidebar extends SidebarViewContainer {\n\n    private static _instance: PatientSearchSidebar;\n\n    private constructor() {\n        super(PatientSearchSidebarPrefs);\n        const recentSearches = new PatientSearchView(Controller.getInstance().getStateManager());\n        this.addView(recentSearches, {containerId: PatientSearchSidebarContainers.container});\n    }\n\n    public static getInstance(): PatientSearchSidebar {\n        if (!(PatientSearchSidebar._instance)) {\n            PatientSearchSidebar._instance = new PatientSearchSidebar();\n        }\n        return PatientSearchSidebar._instance;\n    }\n}\n\n\n","import debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BrowserStorageStateManager,\n    CollectionViewDOMConfig,\n    isSameMongo,\n    KeyType,\n    ListViewRenderer,\n    Modifier,\n    StateManager,\n    View\n} from \"ui-framework-jps\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\n\n\nconst vLogger = debug('patient-search');\nconst vLoggerDetail = debug('patient-search-detail');\n\nexport class PatientSearchView extends AbstractStatefulCollectionView {\n    static fastSearchInputId: string = 'fastPatientSearch';\n    static dataLimit: number = 20;\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentPatientSearches',\n            dataSourceId: VIEW_NAME.patientSearch,\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                classes: 'mb-1',\n                type: 'span',\n            },\n            select: true,\n            quickDelete: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typePatientSummary,\n                from: DRAGGABLE.fromPatientSearch\n            },\n        },\n    };\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    constructor(stateManager: StateManager) {\n        super(PatientSearchView.DOMConfig, stateManager, STATE_NAMES.patientSearch);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventPatientSelected = this.eventPatientSelected.bind(this);\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true, true, isSameMongo);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentPatientSearches, this);\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        const fastSearchEl = $(`#${PatientSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventPatientSelected);\n\n        super.updateViewForNamedCollection(STATE_NAMES.patientSearch, this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches));\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = `${item.name.firstname} ${item.name.surname}`;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        if (item.flags.isInactive) result = Modifier.inactive;\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.normal;\n        if (item.flags.hasWarnings) result = Modifier.warning;\n        return result;\n\n    }\n\n\n    eventPatientSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentPatientSearches, {_id: ui.item.value})) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentPatientSearches}`);\n        if (recentUserSearches.length >= PatientSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentPatientSearches, item, true);\n        }\n\n        const patient = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.patientSearch, {_id: ui.item.value});\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentPatientSearches, patient, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentPatientSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentPatientSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.patientSearch) {\n            vLogger(`Handling patient search results`);\n            vLogger(newState);\n            // load the search names into the search field\n            const fastSearchEl = $(`#${PatientSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: `${item.name.firstname} ${item.name.surname}`,\n                    value: item._id,\n                };\n                fastSearchValues.push(searchValue);\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search patient ${selectedItem.firstname} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentPatientSearches, selectedItem, true);\n    }\n\n\n}\n\n","\nimport debug from \"debug\";\nimport {\n    CollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandler,\n    CollectionViewRenderer,\n    ContextualInformationHelper,\n    DataObjectDefinition, DefaultFieldPermissionChecker, DisplayOrder,\n    FieldType,\n    ItemViewConfigHelper,\n    Modifier,\n    ObjectDefinitionRegistry,\n    TableUIConfig, ViewFieldPermissionChecker\n} from \"ui-framework-jps\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME} from \"ui-framework-jps/dist/framework/ui/ConfigurationTypes\";\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {BasicTableRowImplementation} from \"../framework/table/BasicTableRowImplementation\";\nimport {v4} from \"uuid\";\n\n\nconst logger = debug('tabular-item-view-renderer');\n\nexport class TabularItemViewRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected tableConfig: TableUIConfig;\n    protected tableRowViews: BasicTableRowImplementation[] = [];\n    protected dataObjDef:DataObjectDefinition|null = null;\n    protected idField:string|null;\n    protected configHelper:ItemViewConfigHelper;\n    protected permissionCheck:ViewFieldPermissionChecker;\n    private displayOrders: DisplayOrder[];\n    private tableBodyId: string;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, tableConfig: TableUIConfig,displayOrders:DisplayOrder[],configHelper:ItemViewConfigHelper,permissionCheck:ViewFieldPermissionChecker|null = new DefaultFieldPermissionChecker()) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.tableConfig = tableConfig;\n        this.configHelper = configHelper;\n        this.permissionCheck = permissionCheck;\n        this.displayOrders = displayOrders;\n    }\n\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        let result = document.createElement('tr');\n        if (this.dataObjDef && this.idField) {\n            let rowView = new BasicTableRowImplementation(this.idField, this.tableBodyId, this.dataObjDef, this.configHelper, this.permissionCheck, false);\n            rowView.initialise(this.displayOrders,false,true);\n            rowView.startUpdate(item);\n            this.tableRowViews.push(rowView);\n            result = rowView.getRowElement();\n        }\n        return result;\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        if (!(this.dataObjDef)) {\n            this.dataObjDef = ObjectDefinitionRegistry.getInstance().findDefinition(collectionName);\n            if (this.dataObjDef) {\n                // find the key field\n                this.dataObjDef.fields.forEach((field) => {\n                   if (field.isKey) {\n                       this.idField = field.id;\n                   }\n                });\n            }\n\n        }\n        logger(`view ${this.view.getName()}: creating Results`);\n        logger(newState);\n        // remove the previous items from list\n        this.tableRowViews.forEach((view) => {\n            view.setIsVisible(false);\n        });\n\n        browserUtil.removeAllChildren(containerEl);\n\n\n\n\n        // create the table\n        let tableEl = document.createElement(this.tableConfig.table.type);\n        browserUtil.addRemoveClasses(tableEl, this.tableConfig.table.classes);\n        browserUtil.addAttributes(tableEl, this.tableConfig.table.attributes);\n\n        // create the headers\n        let tableHeaderEl = document.createElement(this.tableConfig.header.type);\n        browserUtil.addRemoveClasses(tableHeaderEl, this.tableConfig.header.classes);\n        browserUtil.addAttributes(tableHeaderEl, this.tableConfig.header.attributes);\n\n\n        // create the column headers\n        this.tableConfig.headerColumns.forEach((header) => {\n            let thEl = document.createElement(header.element.type);\n            browserUtil.addRemoveClasses(thEl, header.element.classes);\n            browserUtil.addAttributes(thEl, header.element.attributes);\n            if (header.element.innerHTML) thEl.innerHTML = header.element.innerHTML;\n            tableHeaderEl.appendChild(thEl);\n        });\n\n        // create the action column header (if one)\n        if (this.tableConfig.actionColumn) {\n            let thEl = document.createElement(this.tableConfig.actionColumn.element.type);\n            browserUtil.addRemoveClasses(thEl, this.tableConfig.actionColumn.element.classes);\n            browserUtil.addAttributes(thEl, this.tableConfig.actionColumn.element.attributes);\n            if (this.tableConfig.actionColumn.element.innerHTML) thEl.innerHTML = this.tableConfig.actionColumn.element.innerHTML;\n            tableHeaderEl.appendChild(thEl);\n        }\n        tableEl.appendChild(tableHeaderEl);\n\n\n        // create the table body\n        let tableBodyEl = document.createElement(this.tableConfig.body.type);\n        this.tableBodyId = v4();\n        browserUtil.addRemoveClasses(tableBodyEl, this.tableConfig.body.classes);\n        browserUtil.addAttributes(tableBodyEl, this.tableConfig.body.attributes);\n        browserUtil.addAttributes(tableBodyEl,[{name:'id',value:this.tableBodyId}]);\n        tableEl.appendChild(tableBodyEl);\n        containerEl.appendChild(tableEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            logger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            //tableBodyEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n    }\n}","import debug from \"debug\";\nimport moment from \"moment\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {SecurityManager, StateChangeListener} from \"ui-framework-jps\";\nimport {ScheduleLoadedListener} from \"../helper/ScheduleLoadedListener\";\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport {TodayView} from \"./TodayView\";\n\nconst logger = debug('today-controller');\n\nexport class TodayController implements StateChangeListener,ScheduleLoadedListener {\n    private static _instance: TodayController;\n\n     private constructor() {\n        this.onPageLoading = this.onPageLoading.bind(this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointments, this);\n        AppointmentControllerHelper.getInstance().addListener(this);\n    }\n\n    public static getInstance(): TodayController {\n        if (!(TodayController._instance)) {\n            TodayController._instance = new TodayController();\n        }\n        return TodayController._instance;\n    }\n\n\n    public onDocumentLoaded() {\n        TodayView.getInstance().onDocumentLoaded();\n    }\n\n\n    public onPageLoading(event: any, inst: any): void {  // load the events for the view\n        logger(event);\n        const today = parseInt(moment().format('YYYYMMDD'));\n        logger(`Need to load today ${today})`);\n\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        let results: any[] = [];\n        let appointmentsForTheDay: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if (appointment.start === today) {\n                appointmentsForTheDay.push(appointment);\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                results.push(result);\n            }\n\n        });\n\n\n        inst.setEvents(results);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName(): string {\n        return \"Today\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n\n            case (STATE_NAMES.appointments): {\n                const today = parseInt(moment().format('YYYYMMDD'));\n                const currentProvider = Controller.getInstance().getLoggedInUsername();\n\n                const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n                let results: any[] = [];\n                appointments.forEach((appointment: any) => {\n                    if (appointment.start === today) {\n\n\n\n                        if (appointment.provider === currentProvider) {\n                            logger(`Found appointment for today and provider ${currentProvider}`);\n                            logger(appointment);\n\n                            let result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                            logger('Converted to event');\n                            logger(result);\n                            results.push(result);\n                        }\n                    }\n\n                });\n\n                TodayView.getInstance().getCalender().setEvents(results);\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('New Appointment inserted by another user');\n            logger(appointment);\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                TodayView.getInstance().getCalender().addEvent(result);\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, appointment: any): void {\n        if (name === STATE_NAMES.appointments) {\n            logger('Appointment deleted by another user');\n            logger(appointment);\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n                TodayView.getInstance().getCalender().removeEvent([appointment._id]);\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, appointment: any): void {\n        if ((name === STATE_NAMES.appointments) && (appointment.createdBy !== SecurityManager.getInstance().getLoggedInUsername())) {\n            logger('Appointment updated by another user');\n            logger(appointment);\n\n            const today = parseInt(moment().format('YYYYMMDD'));\n            if (appointment.start === today) {\n\n                let result = AppointmentControllerHelper.getInstance().getEventForAppointment(today, appointment);\n                logger('Converted to event');\n                logger(result);\n\n                TodayView.getInstance().getCalender().updateEvent(result);\n            }\n        }\n    }\n\n    loadedAppointmentTypes(appointmentTypes: any[]): void {}\n\n    loadedClinicAppointmentBookConfig(clinicConfig: any): void {\n        TodayView.getInstance().applyClinicConfig(clinicConfig);\n    }\n\n    loadedPatientSearch(patientSearch: any[]): void {}\n\n    loadedProviders(providers: any[]): void {}\n\n}\n","import {TodayController} from \"./TodayController\";\nimport {eventcalendar, Eventcalendar} from \"@mobiscroll/javascript\";\nimport debug from \"debug\";\n\nimport {AppointmentControllerHelper} from \"../helper/AppointmentControllerHelper\";\nimport moment from \"moment\";\nimport Controller from \"../Controller\";\n\nconst logger = debug('today-view');\n\nexport class TodayView {\n    private static _instance: TodayView;\n    private calendar: Eventcalendar | null = null;\n    private currentProviderNo:string = '';\n\n    private constructor() {\n    }\n\n    public static getInstance(): TodayView {\n        if (!(TodayView._instance)) {\n            TodayView._instance = new TodayView();\n        }\n        return TodayView._instance;\n    }\n\n    getCalender(): Eventcalendar {\n        return this.calendar;\n    }\n\n\n    public onDocumentLoaded() {\n        this.currentProviderNo = Controller.getInstance().getLoggedInUsername();\n\n        let options = AppointmentControllerHelper.getInstance().getClinicConfig();\n        logger('Using clinic config options');\n        const day = parseInt(moment().format('d'));\n        options.view.startDay = day;\n        options.view.endDay = day;\n        options.clickToCreate = false;\n        options.dragToCreate = false;\n        options.dragToMove = false;\n        options.dragToResize = false;\n        options.min = new Date();\n        options.showControls = false;\n        options.resources = [this.currentProviderNo];\n        options.groupBy =  'date';\n\n        options.onPageLoading = (event: any, inst: any) => {\n            TodayController.getInstance().onPageLoading(event, inst);\n        };\n\n        options.renderHeader = function () {\n            return `<div class=\"my-custom-title\"><strong>${moment().format('ddd DD')}</strong></div>`;\n        }\n\n\n        options.onEventClick = (args: any) => {\n            logger(args.event);\n        }\n        options.renderScheduleEvent = AppointmentControllerHelper.getInstance().handleAppointmentRendering;\n\n        // @ts-ignore\n        this.calendar = eventcalendar(document.getElementById(\"todayDetail\"), options);\n    }\n\n    public applyClinicConfig(clinicConfig: any) {\n        if (this.calendar) {\n            this.currentProviderNo = Controller.getInstance().getLoggedInUsername();\n            logger('State changed, using clinic config options');\n            const day = parseInt(moment().format('d'));\n            clinicConfig.view.startDay = day;\n            clinicConfig.view.endDay = day;\n            clinicConfig.clickToCreate = false;\n            clinicConfig.dragToCreate = false;\n            clinicConfig.dragToMove = false;\n            clinicConfig.dragToResize = false;\n            clinicConfig.min = new Date();\n            clinicConfig.showControls = false;\n            clinicConfig.resources = [this.currentProviderNo];\n            clinicConfig.groupBy =  'date';\n\n            this.calendar.setOptions(clinicConfig);\n        }\n    }\n}","import {\n    ComparisonType,\n    ConditionResponse,\n    FieldDefinition,\n    Form,\n    ViewMode,\n    ValidationManager,\n    ValidationRule, ViewFieldValidator\n} from \"ui-framework-jps\";\nimport {STATE_NAMES} from \"../AppTypes\";\nimport debug from 'debug';\nimport {RuleCheck} from \"ui-framework-jps/dist/framework/ui/validation/ValidationManager\";\n\nconst logger = debug('user-validation-helper');\n\nexport class UserValidationHelper implements ViewFieldValidator {\n    private static _instance: UserValidationHelper;\n\n    public static getInstance(): UserValidationHelper {\n        if (!(UserValidationHelper._instance)) {\n            UserValidationHelper._instance = new UserValidationHelper();\n        }\n        return UserValidationHelper._instance;\n    }\n\n    private constructor() {\n    }\n\n    public setupValidationForDetailsForm(form: Form) {\n        /*\n        *\n        * Create user rules\n        *\n         */\n\n\n        let rule: ValidationRule = {\n            viewMode: ViewMode.create,\n            targetDataFieldId: 'resetPassword',\n            response: ConditionResponse.hide,\n            conditions: []\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        rule = {\n            viewMode: ViewMode.create,\n            targetDataFieldId: 'isProvider',\n            response: ConditionResponse.hide,\n            conditions: []\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n\n        rule = {\n            viewMode: ViewMode.create,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.invalid,\n            conditions: [\n                {\n                    comparison: ComparisonType.isNotNull\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        rule = {\n            viewMode: ViewMode.update,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    comparison: ComparisonType.hasValue,\n                    sourceDataFieldId: 'resetPassword',\n                    values: 'true'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.update,\n            targetDataFieldId: 'password',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    comparison: ComparisonType.hasValue,\n                    sourceDataFieldId: 'resetPassword',\n                    values: 'false'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n\n        ValidationManager.getInstance().addViewValidator(this);\n    }\n\n    applyRulesToTargetField(form: Form, viewMode: ViewMode, fieldDef: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        let result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // are we dealing with the form for users?\n        if (form.getDataObjectDefinition().id === STATE_NAMES.users) {\n            // we are only checking for invalid state\n            if (((onlyRulesOfType) && (onlyRulesOfType === ConditionResponse.invalid)) || (!(onlyRulesOfType))) {\n                // are we dealing with the reset password field?\n                if (fieldDef.id === 'password') {\n                    logger('User form, password field, invalid check');\n                    // what is the value of the field reset password\n                    let resetField = form.getFieldFromDataFieldId('resetPassword');\n                    if (resetField) {\n                        let resetValue = resetField.getValue();\n                        logger(`User form, password field, invalid check - reset is ${resetValue}`);\n                        if (resetValue && (resetValue === 'true')) {\n                            // check the password value\n                            let passwordField = form.getFieldFromDataFieldId(fieldDef.id);\n                            if (passwordField) {\n                                let passwordValue = passwordField.getValue();\n                                logger(`User form, password field, invalid check - reset is ${resetValue}, password is \"${passwordValue}\"`);\n                                if (passwordValue) {\n                                    if (passwordValue.trim().length === 0) {\n                                        logger(`User form, password field, invalid check - FAILED`);\n                                        result.ruleFailed = true;\n                                        result.message = 'Password must be supplied.';\n                                    }\n                                } else {\n                                    logger(`User form, password field, invalid check - FAILED`);\n                                    result.ruleFailed = true;\n                                    result.message = 'Password must be supplied.';\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n            }\n        }\n\n        return result;\n    }\n\n}\n","import {STATE_NAMES, UsersSidebarContainers, VIEW_NAME} from \"../AppTypes\";\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    BootstrapTableConfigHelper,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    DataObjectDefinition,\n    DisplayOrder,\n    isSameMongo,\n    KeyType,\n    Modifier,\n    ObjectDefinitionRegistry,\n    StateManager,\n    TableUIConfig,\n    TabularViewRendererUsingContext,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('users-view');\n\nexport class UsersCollectionView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: UsersSidebarContainers.list,\n            dataSourceId: VIEW_NAME.users,\n        },\n        resultsElement: {\n            type: 'tr',\n            attributes: [{name: 'href', value: '#'}],\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'table-secondary',\n            active: 'table-success',\n            warning: 'table-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                let results: string[] = [];\n\n                if (item.isAdmin) {\n                    results.push(\"fas fa-user-cog\");\n                }\n                if (item.isProvider) {\n                    results.push(\"fas fa-user-md\");\n                }\n\n\n                return results;\n            },\n        },\n        sorter: UsersCollectionView.sortUsers\n    };\n\n    constructor(stateManager: StateManager) {\n        super(UsersCollectionView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        let userDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.users);\n        if (userDef) {\n            let displayOrders: DisplayOrder[] = [];\n            displayOrders.push({fieldId: 'username', displayOrder: 1});\n            displayOrders.push({fieldId: 'isCurrent', displayOrder: 2});\n            displayOrders.push({fieldId: 'isAdmin', displayOrder: 3});\n            displayOrders.push({fieldId: 'isProvider', displayOrder: 4});\n            displayOrders.push({fieldId: 'providerNo', displayOrder: 5});\n\n            let tableUIConfig: TableUIConfig = BootstrapTableConfigHelper.getInstance().generateTableConfig(userDef, displayOrders, 1, false, true);\n\n            tableUIConfig.headerColumns[1].element.classes += ' text-center';\n            tableUIConfig.headerColumns[2].element.classes += ' text-center';\n            tableUIConfig.headerColumns[3].element.classes += ' text-center';\n            tableUIConfig.headerColumns[4].element.classes += ' text-center';\n\n            this.renderer = new TabularViewRendererUsingContext(this, this, tableUIConfig);\n            this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n            this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n            this.getItemId = this.getItemId.bind(this);\n\n            ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.users, 'Users');\n\n        }\n    }\n\n    private static sortUsers(item1: any, item2: any) {\n        let result = -1;\n        if (item1.name > item2.name) result = 1;\n        return result;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += `<strong style=\"text-colour:${item.colour}\">` + item.username + '</strong> ';\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        return false;\n    }\n\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.isCurrent) {\n            return Modifier.normal;\n        }\n        return Modifier.inactive\n    }\n\n\n}\n\n","import Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {\n    BasicObjectDefinitionFactory,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener, DefaultFieldPermissionChecker,\n    DetailView,\n    DetailViewImplementation, Form,\n    FormDetailViewRenderer,\n    LinkedCollectionDetailController,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer\n} from \"ui-framework-jps\";\nimport {STATE_NAMES, UsersSidebarContainers, VIEW_NAME} from \"../AppTypes\";\n\nimport {BootstrapFormConfigHelper} from \"ui-framework-jps/dist/framework/ui/helper/BootstrapFormConfigHelper\";\nimport {UsersCollectionView} from \"./UsersCollectionView\";\nimport {UserValidationHelper} from \"./UserValidationHelper\";\n\n\nconst logger = debug('users-composite-view');\n\n\nexport class UsersCompositeView implements DataObjectListener {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const apptTypes = new UsersCollectionView(Controller.getInstance().getStateManager());\n        this.sideBar.addView(apptTypes, {containerId: UsersSidebarContainers.list});\n\n        const userDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.users);\n\n        if (userDef) {\n            let detailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(UsersSidebarContainers.detail, userDef, new DefaultFieldPermissionChecker(), BootstrapFormConfigHelper.getInstance(), false);\n\n            let usersDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: UsersSidebarContainers.detail,\n                    dataSourceId: VIEW_NAME.userDetail\n                }, detailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.users, apptTypes);\n            viewLinker.addLinkedDetailView(usersDetailView);\n            this.sideBar.onDocumentLoaded();\n\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(userDef);\n            usersDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm:Form|null = detailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                UserValidationHelper.getInstance().setupValidationForDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createUser = <HTMLButtonElement>document.getElementById('addNewUser');\n            logger(`Setting up button for creating users`);\n            logger(createUser);\n            if (createUser) {\n                createUser.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Handling create`);\n        switch (typeName) {\n            case STATE_NAMES.users: {\n                logger(`Handling create new user`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {}\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Handling update`);\n        switch (typeName) {\n            case STATE_NAMES.users: {\n                logger(`Handling update user`);\n                logger(dataObj);\n                Controller.getInstance().getStateManager().updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n}","import debug from 'debug';\nimport Controller from './Controller';\n\nimport {API_Config, AppointmentTypesSidebarPrefs, NAVIGATION, STATE_NAMES, UsersSidebarPrefs,} from \"./AppTypes\";\nimport React, {ReactNode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AppointmentController} from \"./appointments/AppointmentController\";\nimport {\n    ContextualInformationHelper, NotificationController,\n    SecurityManager, SidebarViewContainer,\n    UnreadMessageCountListener\n} from \"ui-framework-jps\";\nimport {setOptions} from \"@mobiscroll/javascript\";\nimport {AppointmentTemplateController} from \"./appointment-templates/AppointmentTemplateController\";\nimport browserUtil from \"ui-framework-jps/dist/framework/util/BrowserUtil\";\nimport {PatientSearchSidebar} from \"./patients/PatientSearchSidebar\";\nimport {AppointmentTypesCompositeView} from \"./appointment-types/AppointmentTypesCompositeView\";\nimport {ClinicChatSidebar} from \"./clinic-chat/ClinicChatSidebar\";\nimport {ClinicChatListView} from \"./clinic-chat/ClinicChatListView\";\nimport {UsersCompositeView} from \"./users/UsersCompositeView\";\nimport {TodayController} from \"./today/TodayController\";\nimport {PatientRecordTabularView} from \"./patients/PatientRecordTabularView\";\n\n\nconst logger = debug('app');\n\nexport default class App extends React.Component implements UnreadMessageCountListener {\n\n    private thisEl: HTMLDivElement | null = null;\n    private chatNavigationItem: HTMLAnchorElement | null = null;\n    private apptTypeSidebar: SidebarViewContainer | null = null;\n    private usersSidebar: SidebarViewContainer | null = null;\n\n\n    public constructor() {\n        // @ts-ignore\n        super();\n        // event handlers\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowAppointmentBook = this.handleShowAppointmentBook.bind(this);\n        this.handleShowAppointmentTemplates = this.handleShowAppointmentTemplates.bind(this);\n        this.handleShowPatientRecord = this.handleShowPatientRecord.bind(this);\n        this.handleShowPatientSearch = this.handleShowPatientSearch.bind(this);\n        this.handleShowAppointmentTypes = this.handleShowAppointmentTypes.bind(this);\n        this.handleShowUsers = this.handleShowUsers.bind(this);\n        this.handleShowToday = this.handleShowToday.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    render(): ReactNode {\n        logger(\"Rendering App\");\n        return (\n            <div></div>\n        )\n    }\n\n\n    componentDidMount(): void {\n        logger('component Did Mount');\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        PatientSearchSidebar.getInstance().onDocumentLoaded();\n\n        this.apptTypeSidebar = new SidebarViewContainer(AppointmentTypesSidebarPrefs);\n        new AppointmentTypesCompositeView(this.apptTypeSidebar).onDocumentLoaded();\n\n        this.usersSidebar = new SidebarViewContainer(UsersSidebarPrefs);\n        new UsersCompositeView(this.usersSidebar).onDocumentLoaded();\n\n        ClinicChatSidebar.getInstance(Controller.getInstance().getStateManager()).onDocumentLoaded();\n\n        new PatientRecordTabularView().onDocumentLoaded();\n\n\n        this.setupNavigationItemHandling();\n\n        AppointmentController.getInstance().onDocumentLoaded();\n        AppointmentTemplateController.getInstance().onDocumentLoaded();\n        TodayController.getInstance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        NotificationController.getInstance().setOptions({\n            showNormalPriorityMessageNotifications:true,\n            showHighPriorityMessageNotifications:true,\n            showUrgentPriorityMessageNotifications:true,\n            showInvitationDeclinedNotifications:false,\n            showInvitedNotifications:false,\n            showOfflineMessageNotification:true,\n            showFavouriteUserLoggedInNotification:false,\n            showFavouriteUserLoggedOutNotification:false,\n            showUserJoinLeaveChatNotification:false\n        })\n        Controller.getInstance().onDocumentLoaded();\n\n        if (Controller.getInstance().isProvider()) {\n            this.handleShowToday(null);\n        }\n        else {\n            this.handleShowAppointmentBook(null);\n        }\n\n\n\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    hideAllSideBars() {\n        ClinicChatSidebar.getInstance(Controller.getInstance().getStateManager()).eventHide(null);\n        PatientSearchSidebar.getInstance().eventHide(null);\n        this.usersSidebar.eventHide(null);\n        this.apptTypeSidebar.eventHide(null);\n    }\n\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        ClinicChatSidebar.getInstance(Controller.getInstance().getStateManager()).eventShow(null);\n        if (roomName) {\n            ClinicChatListView.getInstance().selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(unreadNormalMessages: number, unreadHighMessages: number, unreadUrgentMessages: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (unreadNormalMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${unreadNormalMessages}&nbsp;</span>`;\n        }\n        if (unreadHighMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-warning\">&nbsp;${unreadHighMessages}&nbsp;</span>`;\n        }\n        if (unreadUrgentMessages > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-danger\">&nbsp;${unreadUrgentMessages}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    protected handleShowAppointmentBook(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing appointment book`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n    }\n\n    protected handleShowAppointmentTemplates(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing appointment templates`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n\n    }\n\n    protected handleShowToday(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing today`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', false);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', true);\n\n    }\n    protected handleShowPatientRecord(event: Event): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        logger(`Showing patient record`);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentBook'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('appointmentTemplates'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('today'), 'd-none', true);\n        browserUtil.addRemoveClasses(document.getElementById('patientRecord'), 'd-none', false);\n    }\n\n    protected handleShowPatientSearch(event: Event): void {\n        logger(`Showing patient search`);\n        PatientSearchSidebar.getInstance().eventShow(null);\n\n    }\n\n    protected handleShowAppointmentTypes(event: Event): void {\n        logger(`Showing appointment types`);\n        if (this.apptTypeSidebar) this.apptTypeSidebar.eventShow(null);\n\n    }\n\n    protected handleShowUsers(event: Event): void {\n        logger(`Showing users`);\n        if (this.usersSidebar) this.usersSidebar.eventShow(null);\n\n    }\n\n\n    private setupNavigationItemHandling() {\n        document.getElementById(NAVIGATION.appointmentBook).addEventListener('click', this.handleShowAppointmentBook);\n        let templateEl = document.getElementById(NAVIGATION.appointmentTemplates);\n        if (templateEl) {\n            templateEl.addEventListener('click', this.handleShowAppointmentTemplates);\n        }\n        let apptTypesEl = document.getElementById(NAVIGATION.appointmentTypes);\n        if (apptTypesEl) {\n            apptTypesEl.addEventListener('click', this.handleShowAppointmentTypes);\n        }\n        document.getElementById(NAVIGATION.patientRecord).addEventListener('click', this.handleShowPatientRecord);\n        document.getElementById(NAVIGATION.patientSearch).addEventListener('click', this.handleShowPatientSearch);\n        let usersEl = document.getElementById(NAVIGATION.users);\n        if (usersEl) {\n            usersEl.addEventListener('click', this.handleShowUsers);\n        }\n        let todayEl = document.getElementById(NAVIGATION.today);\n        if (todayEl) {\n            todayEl.addEventListener('click',this.handleShowToday);\n        }\n\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.clinicChat);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n\n}\n\nlocalStorage.debug = 'app api-ts-results default-item-view default-item-view-detail default-item-view-detail-validation';// basic-table-row basic-table-row-detail abstract-field colour-editor colour-input-field editing-event-listener';// tabular-item-view-renderer default-item-view default-item-view-detail';   //tabular-view-container';//user-validation-helper validation-manager validation-manager-multiple-condition-rule-results validation-helper-functions validation-manager-rule-failure';\n//localStorage.debug = 'socket-listener';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n$(function () {\n\n    setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    mobiscroll5.setOptions({\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n\n    // @ts-ignore\n    const element = <App className=\"container-fluid justify-content-around\"/>;\n    ReactDOM.render(element, document.getElementById('root'));\n\n});\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkpatient_booking_system\"] = self[\"webpackChunkpatient_booking_system\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","patientSearch","recentPatientSearches","appointments","appointmentTypes","clinicConfig","providers","appointmentTemplates","patients","API_Config","login","graphQL","patientDemographics","NAVIGATION","appointmentBook","clinicChat","patientRecord","logout","today","DRAGGABLE","typeUser","fromUserSearch","typePatientSummary","fromPatientSearch","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","appointmentTypeDetail","userDetail","VIEW_CONTAINER","calendarControl","calendarDetail","PatientSearchSidebarPrefs","id","expandedSize","location","SidebarLocation","left","PatientSearchSidebarContainers","container","AppointmentTypesSidebarPrefs","AppointmentTypesSidebarContainers","list","detail","colourPicker","UsersSidebarPrefs","right","UsersSidebarContainers","SELECT","appointmentType","cLogger","debug","cLoggerDetail","generate","result","field","patientQuery","constructor","getInstance","Controller","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","find","findAll","create","update","destroy","idField","qlSM","GraphQLApiStateManager","apiURL","apis","data","aggregateSM","memorySM","asyncREST","asyncQL","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","loggedInUser","getLoggedInUsername","isProvider","handleMessage","getCurrentUser","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","handleShowChat","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","v4","addWorkoutExercisesToCurrentWorkout","workout","exercise","filterResults","setupDataObjectDefinitions","apptTypeDef","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","statusFieldDef","userDef","isCurrentFieldDef","isProviderFieldDef","resetPasswordFieldDef","passwordFieldDef","generator","onCreation","onModify","getServerAPIURL","window","getValue","dataObj","durationRegexp","duration1Valid","duration2Valid","duration1Components","duration1","duration2Components","duration2","carry","duration1Seconds","parseInt","duration2Seconds","sumSeconds","duration1Minutes","duration2Minutes","sumMinutes","duration1Hours","duration2Hours","sumHours","time","startTimeHours","Math","startTimeMinutes","appointmentDuration","duration","endTimeHours","endTimeMinutes","timeString","slLogger","handleDataChangedByAnotherUser","message","type","user","stateObj","SecurityManager","DataChangeType","logger","dataElements","oldEvent","tempEvent","currentFirstDate","currentLastDate","currentFirstDateDayNumber","AppointmentControllerHelper","loadedPatientSearch","loadedProviders","AppointmentTemplateFilterView","AppointmentTemplateView","loadedClinicAppointmentBookConfig","loadedAppointmentTypes","AppointmentTemplateDetailModal","AppointmentTemplateController","getModel","getEventForAppointmentTemplate","template","loadDate","onPageLoading","moment","event","results","appointment","inst","name","datePickerResponsive","medium","controls","touchUi","datetimePickerResponsive","viewElements","popup","range","deleteButton","appointmentTypeEl","appointmentTypeDropdown","providersDropdown","close","isVisible","applyClinicConfig","stepMinute","dragTimeStep","document","display","contentPadding","fullScreen","responsive","width","datepicker","select","startInput","endInput","showRangeLabels","maxTime","onChange","date","args","setupAppointmentTypeDropDown","types","setupProviderDropdown","startCreateAppointmentTemplate","headerText","buttons","text","keyCode","handler","mobiId","appointmentId","colour","createdOn","updatedEvent","allDay","start","end","free","color","editable","resource","createdBy","created","modified","provider","cssClass","anchor","elm","updateAppointmentTemplate","ev","currentTarget","setupActionButtons","deletedEvent","snackbar","button","action","registerComponent","populateProviders","labelEl","inputEl","enhance","checkboxList","selected","i","checkbox","value","resources","calendar","getCalender","options","Object","groupBy","eventcalendar","clickToCreate","dragToCreate","dragToMove","dragToResize","showControls","view","invalidateEvent","invalid","setupProviders","providersCollection","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElement","attributes","classes","keyId","keyType","KeyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElement","item","sorter","AppointmentTypesCollectionView","sortAppointmentTypes","displayOrders","fieldId","displayOrder","tableUIConfig","BootstrapTableConfigHelper","BootstrapTableRowConfigHelper","ContextualInformationHelper","item1","item2","getItemDescription","buffer","canDeleteItem","selectedItem","compareItemsForEquality","isSameMongo","getIdForItemInNamedCollection","renderDisplayForItemInNamedCollection","containerEl","hasPermissionToDeleteItemInNamedCollection","getModifierForItemInNamedCollection","Modifier","hasPermissionToUpdateItem","hasPermissionToDeleteItem","hasPermissionToEditField","apptTypes","containerId","apptTypeDefinition","apptTypeDetailRenderer","BootstrapFormConfigHelper","apptTypeDetailView","viewLinker","startingDisplayOrder","createApptType","datePicker","AppointmentBookView","AppointmentDetailModal","AppointmentController","min","setupDatePicker","dateFormat","dayNamesMin","showWeekNumbers","loadDateFinish","AppointmentFilterView","loadDateDayNumber","appointmentsForTheDay","addTemplateEvents","foundIndex","currentAppointments","appt","templatedAppt","titleInput","descriptionTextarea","patientArrivedButton","patientCancelledButton","patientDNAButton","readyForBillingButton","billingCompleteButton","patientSearchEl","patientSearchDropdown","warningsEl","getInst","startCreateAppointment","title","description","patientId","isDNA","isCancelled","arrivalTime","mobiscroll5","updateAppointment","warningsText","setupPatientSearchDropDown","patientsCollection","patient","surname","firstname","_id","filter","originalEvent","originalType","originalNote","getPatientWarnings","patientBasicDetails","ClinicChatDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","priorityId","clinicChatFastPatientSearch","listeners","APP_STATE_NAMES","fastSearchEl","$","hasActionPermission","canSelectItem","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","getSecondaryModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","itemDeselected","roomName","itemSelected","itemDeleted","hideRequested","handlePatientDrop","draggedObjectJSON","draggedObject","JSON","APP_DRAGGABLE","simpleAttachment","identifier","displayText","iconClasses","sentMessage","Priority","messageEl","browserUtil","handleChatLogUpdated","handleAddMessage","messageContent","priority","isNaN","addChatMessage","chatMessageEl","messageSenderEl","contentEl","classesTextAppend","attachment","attachmentLinkEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","fastSearchValues","newState","searchValue","label","source","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","itemDragStarted","itemAction","documentLoaded","showRequested","itemDropped","getName","hidden","getDataSourceKeyId","getUIConfig","render","show","getItemId","checkCanComment","clearChatLog","handlePatientSelected","ui","handleAttachmentClicked","dataType","dataId","listener","addAttachmentListener","dLogger","ClinicChatListView","badge","secondBadge","thirdBadge","attributeName","comparison","ComparisonType","equals","selectedChatLog","doNotDisturbEl","toggleDoNotDisturb","checked","doNotDisturb","showNormalPriorityMessageNotifications","showHighPriorityMessageNotifications","showUrgentPriorityMessageNotifications","showInvitationDeclinedNotifications","showInvitedNotifications","showOfflineMessageNotification","showFavouriteUserLoggedInNotification","showFavouriteUserLoggedOutNotification","showUserJoinLeaveChatNotification","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","isSameRoom","selectChatRoom","room","getSecondaryBadgeValueForItemInNamedCollection","getTertiaryBadgeValueForItemInNamedCollection","updateStateManager","newValue","ClinicChatSidebar","SidebarPrefs","SidebarContainers","chatView","chatLogView","APPOINTMENT_STATUS_ARRIVED","APPOINTMENT_STATUS_READY_FOR_BILLING","APPOINTMENT_STATUS_BILLING_COMPLETE","APPOINTMENT_TYPE_PATIENT_CANCELLED","APPOINTMENT_TYPE_PATIENT_DNA","addListener","haveAppointentTypesLoaded","havePatientSearchesLoaded","haveProvidersLoaded","hasClinicConfigLoaded","getAppointmentTypes","getPatientSearch","getProviders","getClinicConfig","config","schedule","startDay","endDay","startTime","endTime","timeCellStep","timeLabelStep","recurring","repeat","weekDays","getIconForAppointmentType","icon","getIconsForEvent","getColourForAppointmentType","getColourForAppointmentTemplate","getColourForAppointment","getEventForAppointment","canEdit","computeTimeStringFromStartTimeAndDurationInSeconds","readyForBilling","billingItems","isBilled","getAppointmentFromEvent","note","_patient","getEventForAppointmentTemplateForDate","startDate","dayNumber","getAppointmentTemplateFromEvent","day","handleAppointmentTemplateRendering","handleAppointmentRendering","containedById","tabViewContainer","tabBarContainer","tabBarElement","tabularViewContainer","tabs","element","subElement","innerHTML","isDefaultActive","PatientRecordTabularView","recentSearches","PatientSearchSidebar","vLogger","vLoggerDetail","fastSearchInputId","dataLimit","quickDelete","drag","from","PatientSearchView","eventPatientSelected","tableRowViews","dataObjDef","permissionCheck","createDisplayElementForCollectionItem","rowView","setDisplayElementsForCollectionInContainer","tableEl","tableHeaderEl","header","thEl","tableBodyEl","tableBodyId","childEl","TodayController","TodayView","currentProvider","currentProviderNo","UserValidationHelper","setupValidationForDetailsForm","rule","viewMode","ViewMode","targetDataFieldId","response","ConditionResponse","conditions","ValidationManager","isNotNull","sourceDataFieldId","values","applyRulesToTargetField","ruleFailed","form","onlyRulesOfType","fieldDef","resetField","resetValue","passwordField","passwordValue","UsersCollectionView","sortUsers","detailRenderer","usersDetailView","detailForm","createUser","React","ReactDOM","SidebarViewContainer","setOptions","AppointmentTypesCompositeView","UsersCompositeView","App","Component","thisEl","chatNavigationItem","apptTypeSidebar","usersSidebar","bind","handleShowAppointmentBook","handleShowAppointmentTemplates","handleShowPatientRecord","handleShowPatientSearch","handleShowAppointmentTypes","handleShowUsers","handleShowToday","localStorage","componentDidMount","getElementById","setupNavigationItemHandling","hideAllSideBars","eventHide","href","eventShow","countChanged","unreadNormalMessages","unreadHighMessages","unreadUrgentMessages","preventDefault","stopPropagation","addRemoveClasses","templateEl","apptTypesEl","usersEl","todayEl","plugin","log","console","info","theme","themeVariant"],"sourceRoot":""}