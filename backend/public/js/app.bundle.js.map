{"version":3,"file":"app.bundle.js","mappings":"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AAC81B,IAAR,CAAahB,IAAb,CAAkB90B,OAAlB,CAAZ;AAEA2S,CAAC,CAAC,YAAY;AAEV;AACA;AAEA;AACA1S,EAAAA,WAAW,CAAC81B,UAAZ,CAAwB;AACpBtyB,IAAAA,KAAK,EAAE,KADa;AAEpBuyB,IAAAA,YAAY,EAAE;AAFM,GAAxB,EANU,CAUV;AACA;;AACA,QAAMxlB,OAAO,gBAAG,iDAAC,GAAD;AAAK,aAAS,EAAC;AAAf,IAAhB;AACAgkB,EAAAA,6CAAA,CAAgBhkB,OAAhB,EAAyBnS,QAAQ,CAAC22B,cAAT,CAAwB,MAAxB,CAAzB;AAEH,CAfnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/app/AppointmentController.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/app/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/app/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/framework/CommonTypes.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/security/SecurityManager.ts","webpack://template-feo-react-babel/./src/framework/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/framework/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/framework/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/framework/socket/Types.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/GraphQLApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/BlockedUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogsView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchView.ts","webpack://template-feo-react-babel/./src/framework/ui/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/patient-booking-system/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["import {SidebarLocation, SidebarPrefs} from \"../framework/ui/ConfigurationTypes\";\n\n\nexport enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch',\n    patientSearch: 'fastSearchNames',\n    recentPatientSearches: 'recentPatientSearches',\n    appointments: 'appointment',\n    appointmentTypes: 'appointmentType',\n    clinicConfig:'clinicConfig'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphQL',\n    users: '/api/users',\n    clinicConfig: '/api/clinic-config'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary: 'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n    logout: 'navigationItemLogout'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone',\n    calendarControl: 'calendarControl',\n    calendarDetail:'calendarDetail'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\nexport const CurrentWorkoutSidebarPrefs: SidebarPrefs = {\n    id: 'currentWorkoutSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.right\n}\n\nexport const CurrentWorkoutContainers = {\n    list: 'exercises',\n    detail: 'workoutDetail'\n}\n\nexport const ExerciseTypesSidebarPrefs: SidebarPrefs = {\n    id: 'exerciseTypesSidebar',\n    expandedSize: '50%',\n    location: SidebarLocation.left\n}\n\nexport const ExerciseTypesSidebarContainers = {\n    container: 'exerciseTypesContainer',\n}\n\nexport const  WorkoutSummarySidebarPrefs: SidebarPrefs = {\n    id: 'workoutSummarySidebar',\n    expandedSize: '100%',\n    location: SidebarLocation.bottom\n}\n\nexport const  WorkoutSummarySidebarContainers = {\n    container: 'workoutSummary',\n}\n\nexport const SELECT = {\n    appointmentType : 'event-appt-type',\n    patientSearch : 'event-patient'\n}\n\n","import debug from \"debug\";\nimport moment from \"moment\";\nimport {SELECT, STATE_NAMES, VIEW_CONTAINER} from \"./AppTypes\";\nimport Controller from \"./Controller\";\nimport {StateChangeListener} from \"../framework/state/StateChangeListener\";\nimport {v4} from \"uuid\";\nimport App from \"../App\";\n\n\nconst logger = debug('appointment-controller');\n\nexport class AppointmentController implements StateChangeListener {\n    private static _instance: AppointmentController;\n\n    public static getInstance(): AppointmentController {\n        if (!(AppointmentController._instance)) {\n            AppointmentController._instance = new AppointmentController();\n        }\n        return AppointmentController._instance;\n    }\n\n    private static datePicker: any | null = null;\n    private static calendar: any | null = null;\n    private static appointmentTypes: any[] | null = null;\n    private static clinicConfig: any | null = null;\n\n    private static popup:any|null = null;\n    private static range:any|null = null;\n    private static oldEvent:any|null = null;\n    private static tempEvent:any = {};\n\n    private static deleteEvent:boolean = false;\n    private static restoreEvent:boolean = false;\n\n    private static titleInput:any|null = null;\n    private static descriptionTextarea:any|null = null;\n    private static allDaySwitch:any|null = null;\n    private static freeSegmented:any|null = null;\n    private static busySegmented:any|null = null;\n    private static deleteButton:any|null = null;\n    private static patientSearchEl:HTMLSelectElement|null = null;\n    private static appointmentTypeEl:HTMLSelectElement|null = null;\n\n\n    private static patientSearchDropdown:any|null = null;\n    private static appointmentTypeDropdown:any|null = null;\n\n    private static datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    }\n    private static datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    }\n\n\n    private constructor() {\n        this.handleNewDatePicked = this.handleNewDatePicked.bind(this);\n        this.onPageLoading = this.onPageLoading.bind(this);\n        this.onAppointmentEditRequested = this.onAppointmentEditRequested.bind(this);\n        this.onAppointmentDeleting = this.onAppointmentDeleting.bind(this);\n        this.onAppointmentDeleted = this.onAppointmentDeleted.bind(this);\n        this.onAppointmentCreated = this.onAppointmentCreated.bind(this);\n        this.onAppointmentContext = this.onAppointmentContext.bind(this);\n        this.onAppointmentUpdated = this.onAppointmentUpdated.bind(this);\n\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.clinicConfig,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.appointmentTypes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.patientSearch,this);\n\n    }\n\n    public handleNewDatePicked(event: any, inst: any): void {\n        logger(`Handling new date picked`);\n        logger(event);\n    }\n\n    protected getColourForAppointmentType(appointmentType: string) {\n        let result = `rgba(10, 100, 100, 50)`;\n        if (AppointmentController.appointmentTypes) {\n            let foundIndex = AppointmentController.appointmentTypes.findIndex((type) => type.name === appointmentType);\n            if (foundIndex >= 0) result = AppointmentController.appointmentTypes[foundIndex].colour;\n        }\n        return result;\n    }\n\n    protected getColourForAppointment(appointment: any) {\n        return this.getColourForAppointmentType(appointment.type);\n    }\n\n    public onPageLoading(event: any, inst: any): void {\n        logger(event);\n        const today = parseInt(moment().format('YYYYMMDD'));\n        const loadDate = parseInt(moment(event.firstDay).format('YYYYMMDD'));\n        logger(`Need to load date ${loadDate}`);\n\n        let canEdit = (loadDate < today);\n\n        const appointments = Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.appointments);\n        let results: any[] = [];\n        appointments.forEach((appointment: any) => {\n            if ((appointment.start === loadDate)) {\n                logger('Found appointment');\n                logger(appointment);\n\n                // convert the start and end time into the format for the calendar\n                const time = parseInt(appointment.time); // HHMMSS as a time\n                const duration = appointment.duration; // seconds\n\n                const startTimeHours = Math.floor(appointment.time / 10000);\n                const startTimeMinutes = Math.floor((time - (startTimeHours * 10000)) / 100);\n                const appointmentDuration = Math.floor(duration / 60);\n\n                let endTimeHours = startTimeHours;\n                let endTimeMinutes = startTimeMinutes + appointmentDuration;\n\n                if (endTimeMinutes > 60) {\n                    endTimeMinutes -= 60;\n                    endTimeHours += 1; // 24 hour time\n                }\n\n                let timeString = `${endTimeHours}`;\n                if (endTimeHours < 10) timeString = '0' + timeString;\n                if (endTimeMinutes < 10) timeString += '0';\n                timeString += `${endTimeMinutes}`;\n\n                let result = {\n                    id: appointment._id,\n                    start: moment(`${loadDate}${appointment.time}`, 'YYYYMMDDHHmmss'),\n                    end: moment(`${loadDate}${timeString}`, 'YYYYMMDDHHmm'),\n                    title: appointment.name,\n                    color: this.getColourForAppointment(appointment),\n                    allDay: false,\n                    editable: canEdit,\n                    resource: appointment.provider,\n                    patientId:appointment._patient\n                }\n                logger('Converted to event');\n                logger(result);\n                results.push(result);\n            }\n\n        });\n\n        inst.setEvents(results);\n\n\n    }\n\n    public onAppointmentEditRequested(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentDeleting(event: any, inst: any): boolean {\n        logger(event);\n        return false;\n    }\n\n    public onAppointmentDeleted(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentCreated(event: any, inst: any): void {\n        logger(event);\n\n    }\n\n    public onAppointmentContext(event: any, inst: any): void {\n\n        logger(event);\n    }\n\n    public onAppointmentUpdated(event: any, inst: any): void {\n\n        logger(event);\n    }\n\n    public onDocumentLoaded() {\n        // setup the scheduler\n        // @ts-ignore\n        AppointmentController.datePicker = mobiscroll5.datepicker(document.getElementById(VIEW_CONTAINER.calendarControl), {\n            controls: ['calendar'],\n            display: \"inline\",\n            dateFormat: 'YYYYMMDD',\n            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            showWeekNumbers: true,\n            onChange: (event: any, inst: any) => {\n                AppointmentController.calendar?.navigate(event.value);\n                AppointmentController.getInstance().handleNewDatePicked(event.value, inst)\n            }\n        });\n\n        let options: any;\n        if (AppointmentController.clinicConfig) {\n            logger('Using clinic config options');\n            options = {\n                clickToCreate: AppointmentController.clinicConfig.clickToCreate,\n                dragTimeStep: AppointmentController.clinicConfig.dragTimeStep,\n                dragToCreate: AppointmentController.clinicConfig.dragToCreate,\n                dragToMove: AppointmentController.clinicConfig.dragToMove,\n                dragToResize: AppointmentController.clinicConfig.dragToResize,\n                min: moment().subtract(AppointmentController.clinicConfig.min, \"months\"),\n                controls: AppointmentController.clinicConfig.controls,\n                showControls: AppointmentController.clinicConfig.showControls,\n                view: AppointmentController.clinicConfig.view,\n                invalidateEvent: AppointmentController.clinicConfig.invalidateEvent,\n                invalid: AppointmentController.clinicConfig.invalid,\n            }\n        } else {\n            logger('Using DEFAULT config options');\n            options = {\n                clickToCreate: 'double',\n                dragTimeStep: 5,\n                dragToCreate: true,\n                dragToMove: true,\n                dragToResize: true,\n                min: moment().subtract(3, \"months\"),\n                controls: ['calendar'],\n                showControls: true,\n                view: {\n                    schedule: {\n                        type: 'day',\n                        startDay: 1,\n                        endDay: 5,\n                        startTime: '09:00',\n                        endTime: '17:00',\n                        timeCellStep: 15,\n                        timeLabelStep: 60\n                    }\n                },\n                invalidateEvent: 'strict',\n                invalid: [{\n                    recurring: {\n                        repeat: 'weekly',\n                        weekDays: 'SA,SU'\n                    }\n                },\n                    {\n                        start: '12:00',\n                        end: '13:00',\n                        title: 'Lunch Break',\n                        recurring: {\n                            repeat: 'weekly',\n                            weekDays: 'MO,TU,WE,TH,FR'\n                        }\n                    }\n                ]\n\n            }\n        }\n        options.onSelectedDateChange = (event: any, inst: any) => {\n            AppointmentController.getInstance().handleNewDatePicked(event.date, inst);\n            AppointmentController.datePicker?.setVal(event.date);\n        };\n        options.onPageLoading = (event: any, inst: any) => {\n            AppointmentController.getInstance().onPageLoading(event, inst);\n        };\n        options.onEventCreated = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentCreated(event, inst);\n            AppointmentController.popup.close();\n            // store temporary event\n            AppointmentController.tempEvent = event.event;\n            console.log(event.event);\n            this.createAddPopup(event.target);\n        };\n        options.onEventDelete = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentDeleting(event, inst);\n        };\n        options.onEventDeleted = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentDeleted(event, inst);\n            // @ts-ignore\n            mobiscroll5.snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentController.calendar.addEvent(event.event);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        };\n        options.onEventRightClick = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentContext(event, inst);\n        };\n        options.onEventUpdated = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentUpdated(event, inst);\n        };\n        options.onEventDoubleClick = (event: any, inst: any) => {\n            AppointmentController.getInstance().onAppointmentEditRequested(event, inst);\n        };\n        options.onEventClick = (args:any) => {\n            AppointmentController.oldEvent = Object.assign({}, args.event);\n            AppointmentController.tempEvent = args.event;\n\n            if (!AppointmentController.popup.isVisible()) {\n                console.log(args);\n                this.createEditPopup(args);\n            }\n        }\n\n        options.calendar = {labels: true}\n\n        AppointmentController.titleInput = document.getElementById('event-title');\n        AppointmentController.descriptionTextarea = document.getElementById('event-desc');\n        AppointmentController.allDaySwitch = document.getElementById('event-all-day');\n        AppointmentController.freeSegmented = document.getElementById('event-status-free');\n        AppointmentController.busySegmented = document.getElementById('event-status-busy');\n        AppointmentController.deleteButton = document.getElementById('event-delete');\n        AppointmentController.patientSearchEl = <HTMLSelectElement>document.getElementById(SELECT.patientSearch);\n        AppointmentController.appointmentTypeEl =<HTMLSelectElement>document.getElementById(SELECT.appointmentType);\n\n\n        // @ts-ignore\n        AppointmentController.popup = mobiscroll5.popup('#demo-add-popup', {\n            display: 'bottom',\n            contentPadding: false,\n            fullScreen: true,\n            onClose: function () {\n                if (AppointmentController.deleteEvent) {\n                    // @ts-ignore\n                    AppointmentController.calendar.removeEvent(AppointmentController.tempEvent);\n                } else if (AppointmentController.restoreEvent) {\n                    // @ts-ignore\n                    AppointmentController.calendar.updateEvent(AppointmentController.oldEvent);\n                }\n            },\n            responsive: {\n                medium: {\n                    display: 'anchored',\n                    width: 400,\n                    fullScreen: false,\n                    touchUi: false\n                }\n            }\n        });\n\n        AppointmentController.titleInput.addEventListener('input', function (ev:any) {\n            // update current event's title\n            AppointmentController.tempEvent.title = ev.target.value;\n        });\n\n        AppointmentController.descriptionTextarea.addEventListener('change', function (ev:any) {\n            // update current event's title\n            AppointmentController.tempEvent.description = ev.target.value;\n        });\n\n        AppointmentController.allDaySwitch.addEventListener('change', function () {\n            let checked = AppointmentController.allDaySwitch.checked\n            // change range settings based on the allDay\n            AppointmentController.range.setOptions({\n                controls: checked ? ['date'] : ['datetime'],\n                responsive: checked ? AppointmentController.datePickerResponsive : AppointmentController.datetimePickerResponsive\n            });\n\n            // update current event's allDay property\n            AppointmentController.tempEvent.allDay = checked;\n        });\n\n        // @ts-ignore\n        AppointmentController.range = mobiscroll5.datepicker('#event-date', {\n            controls: ['date'],\n            select: 'range',\n            startInput: '#start-input',\n            endInput: '#end-input',\n            showRangeLabels: false,\n            touchUi: true,\n            stepMinute:15,\n            maxTime:'17:00',\n            responsive: AppointmentController.datePickerResponsive,\n            onChange: function (args:any) {\n                var date = args.value;\n                // update event's start date\n                AppointmentController.tempEvent.start = date[0];\n                AppointmentController.tempEvent.end = date[1];\n            }\n        });\n\n        document.querySelectorAll('input[name=event-status]').forEach(function (elm) {\n            elm.addEventListener('change', function () {\n                // update current event's free property\n                // @ts-ignore\n                AppointmentController.tempEvent.free = mobiscroll5.getInst(AppointmentController.freeSegmented).checked;\n            });\n        });\n\n        AppointmentController.deleteButton.addEventListener('click', function () {\n            // delete current event on button click\n            // @ts-ignore\n            AppointmentController.calendar.removeEvent(AppointmentController.tempEvent);\n            AppointmentController.popup.close();\n\n            // save a local reference to the deleted event\n            let deletedEvent = AppointmentController.tempEvent;\n\n            // @ts-ignore\n            mobiscroll5.snackbar({\n                button: {\n                    action: function () {\n                        // @ts-ignore\n                        AppointmentController.calendar.addEvent(deletedEvent);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n\n        // @ts-ignore\n        AppointmentController.calendar = mobiscroll5.eventcalendar(document.getElementById(VIEW_CONTAINER.calendarDetail), options);\n\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    getListenerName():string {\n        return \"Appointment Manager\";\n    }\n\n    stateChanged(managerName:string, name:string, newValue:any):void {\n        logger(`Handling state changed ${name}`);\n\n        switch (name) {\n            case STATE_NAMES.clinicConfig: {\n                AppointmentController.clinicConfig = newValue[0];\n                if (AppointmentController.calendar) {\n                    logger('State changed, using clinic config options');\n\n                    AppointmentController.calendar.setOptions({\n                        clickToCreate: AppointmentController.clinicConfig.clickToCreate,\n                        dragTimeStep: AppointmentController.clinicConfig.dragTimeStep,\n                        dragToCreate: AppointmentController.clinicConfig.dragToCreate,\n                        dragToMove: AppointmentController.clinicConfig.dragToMove,\n                        dragToResize: AppointmentController.clinicConfig.dragToResize,\n                        min: moment().subtract(AppointmentController.clinicConfig.min, \"months\"),\n                        controls: AppointmentController.clinicConfig.controls,\n                        showControls: AppointmentController.clinicConfig.showControls,\n                        view: AppointmentController.clinicConfig.view,\n                        invalidateEvent: AppointmentController.clinicConfig.invalidateEvent,\n                        invalid: AppointmentController.clinicConfig.invalid,\n                    });\n\n                    AppointmentController.range.setOptions( {\n                        stepMinute:AppointmentController.clinicConfig.dragTimeStep\n                    });\n                }\n                break;\n            }\n            case (STATE_NAMES.patientSearch): {\n                let patients:any[] = [];\n\n                newValue.forEach((patient:any) => {\n                    patients.push({text:`${patient.name.surname}, ${patient.name.firstname}`,value:patient._id});\n                });\n\n                // add the patient search values to the data of the select dropdown\n                // @ts-ignore\n                AppointmentController.patientSearchDropdown = mobiscroll5.select('#' + SELECT.patientSearch ,{\n                    filter:true,\n                    data: patients,\n                    onChange: (event:any, inst:any) => {\n                        // @ts-ignore\n                        mobiscroll5.getInst(AppointmentController.titleInput).value = event.valueText;\n                        console.log(event.value);\n                        AppointmentController.tempEvent.patientId = event.value;\n                    }\n                });\n                break;\n            }\n            case (STATE_NAMES.appointmentTypes): {\n                AppointmentController.appointmentTypes = newValue;\n\n                let types:any[] = [];\n\n                newValue.forEach((type:any) => {\n                    types.push(type.name);\n                });\n\n                // add the patient search values to the data of the select dropdown\n                // @ts-ignore\n                AppointmentController.appointmentTypeDropdown = mobiscroll5.select('#' + SELECT.appointmentType ,{\n                    data: types,\n                    onChange: (event:any, inst:any) => {\n                        // @ts-ignore\n                        mobiscroll5.getInst(AppointmentController.descriptionTextarea).value = event.valueText;\n                    }\n                });\n                break;\n\n            }\n\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    private createAddPopup(elm:HTMLElement) {\n        // hide delete button inside add popup\n        AppointmentController.deleteButton.style.display = 'none';\n        // show the dropdowns\n        AppointmentController.patientSearchEl.style.display = 'block';\n        AppointmentController.appointmentTypeEl.style.display = 'block';\n\n        AppointmentController.deleteEvent = true;\n        AppointmentController.restoreEvent = false;\n\n        // set popup header text and buttons for adding\n        AppointmentController.popup.setOptions({\n            headerText: 'New event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Add',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentController.range.getVal();\n                        // store the event created by the UI\n                        let mobiId = AppointmentController.tempEvent.id;\n                        // generate a new UUID\n                        let appointmentId = v4();\n                        // get the colour for the event type\n                        // @ts-ignore\n                        let colour = AppointmentController.getInstance().getColourForAppointmentType(mobiscroll5.getInst(AppointmentController.descriptionTextarea).value);\n\n                        // @ts-ignore\n                        let updatedEvent = {id: appointmentId, title: mobiscroll5.getInst(AppointmentController.titleInput).value, description: mobiscroll5.getInst(AppointmentController.descriptionTextarea).value, allDay: mobiscroll5.getInst(AppointmentController.allDaySwitch).checked, start: date[0], end: date[1], free: mobiscroll5.getInst(AppointmentController.freeSegmented).checked, color: colour,patientId:AppointmentController.tempEvent.patientId};\n                        console.log('inserting');\n                        console.log(updatedEvent);\n\n                        // remove the original event\n                        AppointmentController.calendar.removeEvent([mobiId]);\n                        AppointmentController.calendar.addEvent(updatedEvent);\n                        // @ts-ignore\n                        AppointmentController.deleteEvent = false;\n\n                        // navigate the calendar to the correct view\n                        // @ts-ignore\n                        AppointmentController.calendar.navigate(updatedEvent.start);\n\n                        // @ts-ignore\n                        AppointmentController.popup.close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with a new event data\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.titleInput).value = AppointmentController.tempEvent.title;\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.descriptionTextarea).value = '';\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.allDaySwitch).checked = AppointmentController.tempEvent.allDay;\n        AppointmentController.range.setVal([AppointmentController.tempEvent.start, AppointmentController.tempEvent.end]);\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.busySegmented).checked = true;\n        AppointmentController.range.setOptions({\n            controls: AppointmentController.tempEvent.allDay ? ['date'] : ['datetime'],\n            responsive: AppointmentController.tempEvent.allDay ? AppointmentController.datePickerResponsive : AppointmentController.datetimePickerResponsive\n        });\n        // set anchor for the popup\n        AppointmentController.popup.setOptions({ anchor: elm});\n\n        AppointmentController.popup.open();\n    }\n\n    private createEditPopup(args:any) {\n        let ev = args.event;\n\n        console.log(ev.patientId);\n\n        // show delete button inside edit popup\n        AppointmentController.deleteButton.style.display = 'block';\n        // show the dropdowns\n        AppointmentController.patientSearchEl.style.display = 'none';\n        AppointmentController.appointmentTypeEl.style.display = 'none';\n\n\n        AppointmentController.deleteEvent = false;\n        AppointmentController.restoreEvent = true;\n\n        // set popup header text and buttons for editing\n        AppointmentController.popup.setOptions({\n            headerText: 'Edit event',\n            buttons: [\n                'cancel',\n                {\n                    text: 'Save',\n                    keyCode: 'enter',\n                    handler: function () {\n                        let date = AppointmentController.range.getVal();\n                        // update event with the new properties on save button click\n                        // @ts-ignore\n                        let updatedEvent = {id: ev.id, title: mobiscroll5.getInst(AppointmentController.titleInput).value, description: mobiscroll5.getInst(AppointmentController.descriptionTextarea).value, allDay: mobiscroll5.getInst(AppointmentController.allDaySwitch).checked, start: date[0], end: date[1], free: mobiscroll5.getInst(AppointmentController.freeSegmented).checked, color: ev.color,};\n                        console.log('updated');\n                        console.log(updatedEvent)\n                        AppointmentController.calendar.updateEvent(updatedEvent);\n\n                        // navigate the calendar to the correct view\n                        // @ts-ignore\n                        AppointmentController.calendar.navigate(date[0]);;\n\n                        AppointmentController.restoreEvent = false;\n                        AppointmentController.popup.close();\n                    },\n                    cssClass: 'mbsc-popup-button-primary'\n                }\n            ]\n        });\n\n        // fill popup with the selected event data\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.titleInput).value = ev.title || '';\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.descriptionTextarea).value = ev.description || '';\n        // @ts-ignore\n        mobiscroll5.getInst(AppointmentController.allDaySwitch).checked = ev.allDay || false;\n        AppointmentController.range.setVal([ev.start, ev.end]);\n\n        if (ev.free) {\n            // @ts-ignore\n            mobiscroll5.getInst(AppointmentController.freeSegmented).checked = true;\n        } else {\n            // @ts-ignore\n            mobiscroll5.getInst(AppointmentController.busySegmented).checked = true;\n        }\n\n\n        // change range settings based on the allDay\n        AppointmentController.range.setOptions({\n            controls: ev.allDay ? ['date'] : ['datetime'],\n            responsive: ev.allDay ? AppointmentController.datePickerResponsive : AppointmentController.datetimePickerResponsive\n        });\n\n        // set anchor for the popup\n        AppointmentController.popup.setOptions({ anchor: args.domEvent.currentTarget ,theme:'ios'});\n        AppointmentController.popup.open();\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport {isSameMongo} from \"./EqualityFunctions\";\nimport {StateChangeListener} from \"../framework/state/StateChangeListener\";\nimport {DataObjectListener} from \"../framework/model/DataObjectListener\";\nimport {RESTApiStateManager} from \"../framework/state/RESTApiStateManager\";\nimport {GraphQLApiStateManager} from \"../framework/state/GraphQLApiStateManager\";\nimport {AggregateStateManager} from \"../framework/state/AggregateStateManager\";\nimport {MemoryBufferStateManager} from \"../framework/state/MemoryBufferStateManager\";\nimport {AsyncStateManagerWrapper} from \"../framework/state/AsyncStateManagerWrapper\";\nimport {SocketManager} from \"../framework/socket/SocketManager\";\nimport {ChatManager} from \"../framework/socket/ChatManager\";\nimport { NotificationController } from '../framework/socket/NotificationController';\nimport {DownloadManager} from \"../framework/network/DownloadManager\";\nimport {StateManager} from \"../framework/state/StateManager\";\nimport {DataObjectController} from \"../framework/model/DataObjectController\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../framework/model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"../framework/ui/helper/SimpleValueDataSource\";\nimport {KeyType} from \"../framework/ui/ConfigurationTypes\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true\n            },\n            {\n                stateName: STATE_NAMES.clinicConfig,\n                serverURL: '',\n                api: API_Config.clinicConfig,\n                isActive: true\n            },\n        ]);\n        let qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([\n            {\n                stateName: STATE_NAMES.patientSearch,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getPatientSearchDetails {_id,identifiers { legacyId},flags {isInactive,hasWarnings},name {firstname,surname}}}',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getPatientSearchDetails',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointments,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointments {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name}}',\n                    create: 'mutation createAppointment($data: AppointmentInput!){addAppointment(appt: $data) {_id,_patient, start, time, duration,createdBy,isDNA,isCancelled,provider,note,type,name }}',\n                    destroy: 'mutation deleteAppointment($identifier: String!){deleteAppointment(id: $identifier)}',\n                    update: 'mutation updateAppointment($data: AppointmentInput!){updateAppointment(appt: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointments',\n                    create: 'addAppointment',\n                    destroy: 'deleteAppointment',\n                    update: 'updateAppointment',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.appointmentTypes,\n                serverURL: '',\n                apiURL: API_Config.graphQL,\n                apis: {\n                    findAll: 'query {getAppointmentTypes {_id,name,colour}}',\n                    create: 'mutation createAppointmentType($data: AppointmentInput!){addAppointmentType(apptType: $data) {_id,name,colour}}',\n                    destroy: 'mutation deleteAppointmentType($identifier: String!){deleteAppointmentType(id: $identifier)}',\n                    update: 'mutation updateAppointmentType($data: AppointmentInput!){updateAppointmentType(apptType: $data)}',\n                    find: '',\n                },\n                data: {\n                    findAll: 'getAppointmentTypes',\n                    create: 'addAppointmentType',\n                    destroy: 'deleteAppointmentType',\n                    update: 'updateAppointmentType',\n                    find: ''\n                },\n                isActive: true,\n                idField: '_id'\n            },\n        ])\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo);\n        let memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        let asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n        let asyncQL = new AsyncStateManagerWrapper(aggregateSM, qlSM, isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches, STATE_NAMES.appointments,STATE_NAMES.patientSearch,STATE_NAMES.recentPatientSearches], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches, STATE_NAMES.users,STATE_NAMES.clinicConfig], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.appointmentTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.clinicConfig);\n            this.getStateManager().getStateByName(STATE_NAMES.patientSearch);\n            this.getStateManager().getStateByName(STATE_NAMES.appointments);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\n\n","\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","\n\nimport debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {SocketListener} from \"../framework/socket/SocketListener\";\nimport {NotificationManager, NotificationType} from \"../framework/notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user});\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.info);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.appointmentTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointmentTypes, stateObj, true);\n                            break;\n                        }\n                        case STATE_NAMES.appointments: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.appointments, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n}\n\nexport type FilterItem = {\n    attributeName: string,\n    comparison: ComparisonType,\n    value: any,\n    evaluator?: evaluatorFunction\n}\n\nexport type equalityFunction = (item1: any, item2: any) => boolean;\nexport type evaluatorFunction = (item: any, filter: FilterItem) => boolean;","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\nimport {SecurityManager} from \"../security/SecurityManager\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${SecurityManager.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    collectionOfDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\nconst apiResultsLogger = debug('api-ts-results');\n\nexport class ApiUtil {\n\n    private static _instance: ApiUtil;\n\n    public static getInstance(): ApiUtil {\n        if (!(ApiUtil._instance)) {\n            ApiUtil._instance = new ApiUtil();\n        }\n        return ApiUtil._instance;\n    }\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiResultsLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiResultsLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import {v4} from 'uuid';\nimport {QueueListener} from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\nimport {ApiUtil} from \"./ApiUtil\";\n\nconst logger = debug('dm-api-ts');\n\nexport class DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                ApiUtil.getInstance().apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                ApiUtil.getInstance().apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                ApiUtil.getInstance().apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                ApiUtil.getInstance().apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport {IndexedDBStateManager} from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport {DownloadManager} from \"./DownloadManager\";\nimport {NotificationManager, NotificationType} from \"../notification/NotificationManager\";\nimport {StateChangeListener} from \"../state/StateChangeListener\";\nimport {AsynchronousStateManager} from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","import {Notification} from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import {BootstrapNotification} from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport class NotificationFactory {\n    private static _instance: NotificationFactory;\n\n\n    public static getInstance(): NotificationFactory {\n        if (!(NotificationFactory._instance)) {\n            NotificationFactory._instance = new NotificationFactory();\n        }\n        return NotificationFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\n","import {NotificationFactory} from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = NotificationFactory.getInstance().createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\n","import debug from \"debug\";\n\nconst logger = debug('security-manager');\n\nexport class SecurityManager {\n    private static _instance: SecurityManager;\n    private hash: string | null = null;\n    private logoutEl: HTMLElement | null = null;\n\n    private constructor() {\n    }\n\n    public static getInstance(): SecurityManager {\n        if (!(SecurityManager._instance)) {\n            SecurityManager._instance = new SecurityManager();\n        }\n        return SecurityManager._instance;\n    }\n\n    public onDocumentLoaded(logoutElementId: string) {\n        this.logoutEl = document.getElementById(logoutElementId);\n\n        // find the secret hash for the current user (if any)\n        const username = this.getLoggedInUsername();\n        if (username && username.trim().length > 0) {\n            logger(`found user ${username}`);\n            this.hash = localStorage.getItem(username);\n            if (this.hash) {\n                sessionStorage.setItem(username, this.hash);\n            } else {\n                this.hash = sessionStorage.getItem(username);\n            }\n            localStorage.removeItem(username);\n            logger(`found user ${username} hash - removed from local storage`);\n        }\n\n        if (this.logoutEl) {\n            this.logoutEl.addEventListener('click', (event) => {\n                localStorage.removeItem(username);\n                sessionStorage.removeItem(username);\n            });\n        }\n    }\n\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n\n    public encryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.encrypt(value, this.hash).toString();\n        }\n        return result;\n    }\n\n    public decryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.decrypt(value, this.hash).toString(CryptoJS.enc.Utf8);\n        }\n        return result;\n    }\n\n    public encryptObject(dataObj: any): string {\n        return this.encryptString(JSON.stringify(dataObj));\n    }\n\n    public decryptObject(value: string): any {\n        return JSON.parse(this.decryptString(value));\n    }\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport {SocketManager} from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport {BrowserStorageStateManager} from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\nimport {isSameRoom} from \"../util/EqualityFunctions\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true, true, isSameRoom);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport {NotificationManager, NotificationType} from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message, Priority} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, NotificationType.info, 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, NotificationType.info, 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                // provide visual notifications if do not disturb is not on, unless the message is marked priority\n                if (this.doNotDisturb && (displayMessage.priority !== Priority.Urgent)) return;\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, NotificationType.message, 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, NotificationType.warning, 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, NotificationType.priority, 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport {SocketListener} from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nexport class SocketManager {\n    private static _instance: SocketManager;\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport {StateChangeListener} from './StateChangeListener';\nimport {StateEventType, StateManager, StateManagerType, StateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {ComparisonType, equalityFunction, FilterItem} from \"../CommonTypes\";\n\nconst smLogger = debug('state-manager-ts');\n\nexport type EqualityFnForName = {\n    name: string,\n    equality: equalityFunction\n}\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n    protected defaultEquality: equalityFunction;\n    protected equalityFns: EqualityFnForName[] | null = null;\n\n    protected constructor(managerName: string, defaultEquality: equalityFunction, fnPerState: EqualityFnForName[] | null = null) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.defaultEquality = defaultEquality;\n        if (fnPerState) {\n            this.equalityFns = fnPerState;\n        }\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    receivedFilterResults(name: string, filterResults: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, filterResults, StateEventType.FilterResults, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: StateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: StateValue): void;\n\n    public abstract _getState(name: string): StateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] { // default implementation assumes local values and simple comparisons\n        let results: any[] = [];\n        const state: StateValue = this._getState(name);\n        try {\n            state.value.forEach((item: any) => {\n                let isMatch: boolean = true;\n                filters.forEach((filter) => {\n                    if (isMatch) { // don't bother with other filters if we have already failed\n\n                        let attributeValue = item[filter.attributeName];\n                        if (filter.evaluator) {\n                            isMatch = filter.evaluator(item, filter);\n                        } else {\n                            switch (filter.comparison) {\n                                case ComparisonType.isNull: {\n                                    isMatch = !(attributeValue);\n                                    break;\n                                }\n                                case ComparisonType.isNotNull: {\n                                    if (attributeValue) {\n                                        isMatch = true;\n                                    }\n                                    break;\n                                }\n                                case ComparisonType.equals: {\n                                    isMatch = ((attributeValue) && (attributeValue === filter.value));\n                                    break;\n                                }\n                                case ComparisonType.lessThan: {\n                                    isMatch = ((attributeValue) && (attributeValue < filter.value));\n                                    break;\n                                }\n                                case ComparisonType.greaterThan: {\n                                    isMatch = ((attributeValue) && (attributeValue > filter.value));\n                                    break;\n                                }\n                                case ComparisonType.lessThanEqual: {\n                                    isMatch = ((attributeValue) && (attributeValue <= filter.value));\n                                    break;\n                                }\n                                case ComparisonType.greaterThanEqual: {\n                                    isMatch = ((attributeValue) && (attributeValue >= filter.value));\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                });\n                if (isMatch) results.push(item);\n            });\n        } catch (err) {\n            smLogger(`filter, state value for ${state.name} is not any array`);\n        }\n        return results;\n    }\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: StateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, StateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: StateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: StateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, oldItem, StateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        this._ensureStatePresent(name);\n        return this._findItemsInState(name, filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.Local;\n    }\n\n    protected getEqualityFnForName(name: string): equalityFunction {\n        let result = this.defaultEquality;\n        if (this.equalityFns) {\n            const foundIndex = this.equalityFns.findIndex((fn) => fn.name === name);\n            if (foundIndex >= 0) result = this.equalityFns[foundIndex].equality;\n        }\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, StateValue} from \"./StateManager\";\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n\n    private stateManagers: managerWithFilters[];\n\n    public constructor(defaultEq: equalityFunction, equalityFns: EqualityFnForName[] | null = null) {\n        super('aggregate', defaultEq, equalityFns);\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): StateValue {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._findItemsInState(name, filters);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state.value;\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {StateManagerType, StateValue} from \"./StateManager\";\nimport {StateChangeListener} from \"./StateChangeListener\";\n\nimport debug from 'debug';\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager, defaultEq: equalityFunction) {\n        super('async', defaultEq);\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    public getType(): StateManagerType {\n        return this.wrappedSM.getType();\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        asyncLogger(`finding items with filters`);\n        return this.wrappedSM.findItemsInState(name, filters);\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): StateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: StateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: StateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n        asyncLogger(`Wrapped SM has supplied filter results ${name} passing to top level SM`);\n        this.topLevelSM.receivedFilterResults(name, filterResults);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {StateValue} from \"./StateManager\";\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst lsLogger = debug('browser-storage');\n\nexport class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n\n    protected storage: Storage;\n    protected allowPersistence: boolean;\n    // @ts-ignore\n    protected configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false, allowPersistence: boolean = false, defaultEq: equalityFunction, equalFns: EqualityFnForName[] | null = null) {\n        super('browser', defaultEq, equalFns);\n        this.storage = window.sessionStorage;\n        this.allowPersistence = allowPersistence;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): StateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) {\n            if (!this.allowPersistence) {\n                return;\n            }\n        }\n\n        let state: StateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport {DownloadManager} from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\nimport {FilterItem} from \"../CommonTypes\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst logger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    serverURL: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean,\n    idField?: string\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    private static _instance: GraphQLApiStateManager;\n\n    private static FUNCTION_ID_ADD_ITEM = 'graphql.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'graphql.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'graphql.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'graphql.api.state.manager.get.items';\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(GraphQLApiStateManager._instance)) {\n            GraphQLApiStateManager._instance = new GraphQLApiStateManager();\n        }\n        return GraphQLApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: StateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): StateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callbackId: GraphQLApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                logger(`Getting All ${name} with query \"${query}\"`);\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: StateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL, config.apis.create,\n                {data: stateObj}, GraphQLApiStateManager.FUNCTION_ID_ADD_ITEM, name, false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item to ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let identifier = stateObj.id;\n            if (config.idField) {\n                identifier = stateObj[config.idField];\n            }\n\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL, config.apis.destroy,\n                {identifier: identifier}, GraphQLApiStateManager.FUNCTION_ID_UPDATE_ITEM, name, false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL, config.apis.update,\n                {data: stateObj}, GraphQLApiStateManager.FUNCTION_ID_REMOVE_ITEM, name, false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncRemote;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            serverURL: '',\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], StateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n}","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {FilterItem} from \"../CommonTypes\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nexport class IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n    }\n\n    public _getState(name: string): StateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, StateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncLocal;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n    }\n\n\n}\n\n","import debug from 'debug';\nimport {AbstractStateManager, EqualityFnForName} from './AbstractStateManager';\nimport {StateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nexport class MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: StateValue[];\n\n    public constructor(defaultEq: equalityFunction, equalFns: EqualityFnForName[] | null = null) {\n        super('memory', defaultEq, equalFns);\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: StateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): StateValue {\n        // @ts-ignore\n        let state: StateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\n","import {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport {DownloadManager} from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\nimport {FilterItem} from \"../CommonTypes\";\n\n\nconst logger = debug('state-manager-api');\n\nexport type ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: StateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): StateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: StateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        // TO DO\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return this._findItemsInState(name, filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncRemote;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n        }\n        logger(data);\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        logger(data);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(data);\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateEventType, stateListeners} from \"./StateManager\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nexport class StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (StateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.FilterResults): {\n                            listener.filterResults(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {FilterItem} from \"../CommonTypes\";\n\nexport type StateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum StateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged,\n    FilterResults\n}\n\nexport enum StateManagerType {\n    Local,\n    AsyncLocal,\n    AsyncRemote\n}\n\n\nexport interface StateManager extends StateChangeInformer {\n    getType(): StateManagerType;\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any): any;\n\n    findItemsInState(name: string, filters: FilterItem[]): any[];\n\n    isItemInState(name: string, item: any): boolean;\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: StateValue): void;\n\n    _getState(name: string): StateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: StateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[];\n}","export type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType: string,\n    elementAttributes?: Attribute[],\n    elementClasses: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElementType: string,\n    textElementClasses: string,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses: string,\n    attributes?: Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElementType: string,\n    resultsElementAttributes?: [Attribute],\n    resultsClasses: string,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from '../view/interface/View';\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\n\nconst vLogger = debug('user-search-sidebar');\n\nexport class BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static _instance: BlockedUserView;\n\n    public static getInstance(stateManager: StateManager): BlockedUserView {\n        if (!(BlockedUserView._instance)) {\n            BlockedUserView._instance = new BlockedUserView(stateManager);\n        }\n        return BlockedUserView._instance;\n    }\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes: [DRAGGABLE.typeUser],\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    private constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {StateChangeListener} from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier, ViewDOMConfig} from \"../ConfigurationTypes\";\nimport {View} from '../view/interface/View';\nimport {NotificationManager} from \"../../notification/NotificationManager\";\nimport {CollectionView} from '../view/interface/CollectionView';\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\nimport {SecurityManager} from \"../../security/SecurityManager\";\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nexport class ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static _instance: ChatLogDetailView;\n\n    public static getInstance(stateManager: StateManager): ChatLogDetailView {\n        if (!(ChatLogDetailView._instance)) {\n            ChatLogDetailView._instance = new ChatLogDetailView(stateManager);\n        }\n        return ChatLogDetailView._instance;\n    }\n\n\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    private constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = SecurityManager.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {\n    }\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n}\n\n\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {MemoryBufferStateManager} from \"../../state/MemoryBufferStateManager\";\nimport {isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../view/delegate/CollectionViewListenerForwarder\";\nimport {STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\nimport {StateManager} from \"../../state/StateManager\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nexport class ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener, CollectionViewListener {\n    private static _instance: ChatLogsView;\n\n    public static getInstance(): ChatLogsView {\n        if (!(ChatLogsView._instance)) {\n            ChatLogsView._instance = new ChatLogsView();\n        }\n        return ChatLogsView._instance;\n    }\n\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n    protected selectedChatLog: ChatLog | null = null;\n\n   private constructor() {\n        super(ChatLogsView.DOMConfig, new MemoryBufferStateManager(isSameRoom), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameRoom(item1, item2);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n    selectChatRoom(roomName: string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n\n    showRequested(view: View): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs, newState, true);\n    }\n}\n\n","import {SidebarViewContainer} from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\nimport {StateManager} from \"../../state/StateManager\";\nimport {ChatLogsView} from \"./ChatLogsView\";\nimport {ChatLogDetailView} from \"./ChatLogDetailView\";\n\nexport class ChatRoomsSidebar extends SidebarViewContainer {\n    private static _instance: ChatRoomsSidebar;\n\n    public static getInstance(stateManager: StateManager): ChatRoomsSidebar {\n        if (!(ChatRoomsSidebar._instance)) {\n            ChatRoomsSidebar._instance = new ChatRoomsSidebar(stateManager);\n        }\n        return ChatRoomsSidebar._instance;\n    }\n\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'chatSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    private constructor(stateManager: StateManager) {\n        super(ChatRoomsSidebar.SidebarPrefs);\n        const chatView = ChatLogsView.getInstance();\n        this.addView(chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = ChatLogDetailView.getInstance(stateManager);\n        this.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        chatView.addEventListener(chatLogView);\n    }\n}\n\n\n","export const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    userSearch: 'userSearch',\n}\n\n\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nexport class FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static _instance: FavouriteUserView;\n\n    public static getInstance(stateManager: StateManager): FavouriteUserView {\n        if (!(FavouriteUserView._instance)) {\n            FavouriteUserView._instance = new FavouriteUserView(stateManager);\n        }\n        return FavouriteUserView._instance;\n    }\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch],\n                acceptTypes: [DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    private constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('', {})\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n    }\n\n    showRequested(view: View): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\n\n","import {SidebarViewContainer} from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\nimport {StateManager} from \"../../state/StateManager\";\nimport {UserSearchView} from \"./UserSearchView\";\nimport {FavouriteUserView} from \"./FavouriteUserView\";\nimport {BlockedUserView} from \"./BlockedUserView\";\nimport {ChatRoomsSidebar} from \"./ChatRoomsSidebar\";\n\nexport class UserSearchSidebar extends SidebarViewContainer {\n\n    private static _instance: UserSearchSidebar;\n\n    public static getInstance(stateManager:StateManager): UserSearchSidebar {\n        if (!(UserSearchSidebar._instance)) {\n            UserSearchSidebar._instance = new UserSearchSidebar(stateManager);\n        }\n        return UserSearchSidebar._instance;\n    }\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'userSearchSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    private logSB:SidebarViewContainer;\n\n    private constructor(stateManager:StateManager) {\n        super(UserSearchSidebar.SidebarPrefs);\n        const recentSearches = UserSearchView.getInstance(stateManager);\n        this.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = FavouriteUserView.getInstance(stateManager);\n        this.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = BlockedUserView.getInstance(stateManager);\n        this.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n\n        this.logSB = ChatRoomsSidebar.getInstance(stateManager);\n    }\n}\n\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {BrowserStorageStateManager} from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\nimport {SecurityManager} from \"../../security/SecurityManager\";\nimport {ChatRoomsSidebar} from \"./ChatRoomsSidebar\";\nimport {ChatLogsView} from \"./ChatLogsView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nexport class UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    private static _instance: UserSearchView;\n\n    public static getInstance(stateManager: StateManager): UserSearchView {\n        if (!(UserSearchView._instance)) {\n            UserSearchView._instance = new UserSearchView(stateManager);\n        }\n        return UserSearchView._instance;\n    }\n\n    static fastSearchInputId: string = 'fastSearchUserNames';\n    static dataLimit: number = 10;\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    private constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true, false, isSameMongo);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value})) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = SecurityManager.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        ChatRoomsSidebar.getInstance(this.stateManager).eventShow(null);\n        if (roomName) ChatLogsView.getInstance().selectChatRoom(roomName);\n    }\n\n\n}\n\n\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nexport class SidebarViewContainer implements CollectionViewListener {\n    protected prefs: SidebarPrefs;\n    protected views: View[];\n\n    public constructor(prefs: SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view: View, config: SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n\n}\n\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.elementType);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n\n    abstract hasActionPermission(actionName: string, from: string, item: any): boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n}\n","import {StateChangeListener} from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener, CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName: string) {\n        super(uiConfig, stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName, this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render(): void {\n        this.updateViewForNamedCollection(this.collectionName, this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show(): void {\n    }\n\n    hidden(): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","import browserUtil from \"../../../util/BrowserUtil\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nexport class BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string | undefined = undefined, isAdding: boolean = true): void {\n        if (classesText) {\n            const classes = classesText.split(' ');\n            classes.forEach((classValue) => {\n                if (classValue.trim().length > 0) {\n                    if (isAdding) {\n                        element.classList.add(classValue);\n                    } else {\n                        element.classList.remove(classValue);\n                    }\n                }\n            });\n        }\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\n\n\n\nimport debug from 'debug';\nimport Controller from './app/Controller';\n\nimport {\n    API_Config,\n    NAVIGATION,\n} from \"./app/AppTypes\";\nimport React, {ReactNode} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AppointmentController} from \"./app/AppointmentController\";\nimport {UnreadMessageCountListener} from \"./framework/socket/UnreadMessageCountListener\";\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport {SecurityManager} from \"./framework/security/SecurityManager\";\nimport {UserSearchSidebar} from \"./framework/ui/chat/UserSearchSidebar\";\nimport {ChatRoomsSidebar} from \"./framework/ui/chat/ChatRoomsSidebar\";\n\n\n\n\n\n\nconst logger = debug('app');\n\nexport default class App extends React.Component implements UnreadMessageCountListener {\n\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    private thisEl: HTMLDivElement | null = null;\n    private chatNavigationItem: HTMLAnchorElement | null = null;\n\n\n\n    public constructor() {\n        // @ts-ignore\n        super();\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    render(): ReactNode {\n        logger(\"Rendering App\");\n        return (\n            <div></div>\n        )\n    }\n\n\n\n\n    componentDidMount(): void {\n        logger('component Did Mount');\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        AppointmentController.getInstance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = UserSearchSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = ChatRoomsSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.chatSidebar.onDocumentLoaded();\n    }\n}\n\nlocalStorage.debug = 'api-ts-results appointment-controller';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n$(function () {\n\n    // @ts-ignore\n    //mobiscroll4.setOptions = {theme:'ios'};\n\n    // @ts-ignore\n    mobiscroll5.setOptions( {\n        theme: 'ios',\n        themeVariant: 'light'\n    });\n    //datepicker(\"#calendarControl\",{display:'inline'});\n    // @ts-ignore\n    const element = <App className=\"container-fluid justify-content-around\"/>;\n    ReactDOM.render(element, document.getElementById('root'));\n\n});\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","patientSearch","recentPatientSearches","appointments","appointmentTypes","clinicConfig","API_Config","login","graphQL","NAVIGATION","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","logout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","calendarControl","calendarDetail","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","CurrentWorkoutSidebarPrefs","id","expandedSize","location","SidebarLocation","right","CurrentWorkoutContainers","list","detail","ExerciseTypesSidebarPrefs","left","ExerciseTypesSidebarContainers","container","WorkoutSummarySidebarPrefs","bottom","WorkoutSummarySidebarContainers","SELECT","appointmentType","logger","debug","getInstance","AppointmentController","datePicker","calendar","popup","range","oldEvent","tempEvent","deleteEvent","restoreEvent","titleInput","descriptionTextarea","allDaySwitch","freeSegmented","busySegmented","deleteButton","patientSearchEl","appointmentTypeEl","patientSearchDropdown","appointmentTypeDropdown","datePickerResponsive","medium","controls","touchUi","datetimePickerResponsive","constructor","Controller","handleNewDatePicked","getColourForAppointmentType","result","foundIndex","type","getColourForAppointment","appointment","onPageLoading","today","parseInt","moment","loadDate","event","canEdit","results","time","duration","startTimeHours","Math","startTimeMinutes","appointmentDuration","endTimeHours","endTimeMinutes","timeString","start","end","title","color","allDay","editable","resource","patientId","_patient","inst","onAppointmentEditRequested","onAppointmentDeleting","onAppointmentDeleted","onAppointmentCreated","onAppointmentContext","onAppointmentUpdated","onDocumentLoaded","document","display","dateFormat","dayNamesMin","showWeekNumbers","onChange","options","clickToCreate","dragTimeStep","dragToCreate","dragToMove","dragToResize","min","showControls","view","invalidateEvent","invalid","schedule","startDay","endDay","startTime","endTime","timeCellStep","timeLabelStep","recurring","repeat","weekDays","console","mobiscroll5","button","action","text","message","args","Object","labels","contentPadding","fullScreen","onClose","responsive","width","ev","checked","select","startInput","endInput","showRangeLabels","stepMinute","maxTime","date","elm","deletedEvent","filterResults","getListenerName","stateChanged","name","newValue","patients","patient","surname","firstname","value","_id","filter","data","types","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","createAddPopup","headerText","buttons","keyCode","handler","mobiId","appointmentId","v4","colour","updatedEvent","description","free","cssClass","anchor","createEditPopup","theme","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","qlSM","GraphQLApiStateManager","apiURL","apis","findAll","create","destroy","update","find","idField","aggregateSM","memorySM","asyncREST","asyncQL","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","isLoggedIn","getLoggedInUserId","loggedInUser","getLoggedInUsername","handleMessage","getCurrentUser","handleShowChat","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","addWorkoutExercisesToCurrentWorkout","workout","exercise","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","window","item1","item2","slLogger","handleDataChangedByAnotherUser","user","changeUser","username","stateObj","NotificationManager","NotificationType","ComparisonType","flogger","vlogger","glogger","rlogger","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","setSubElements","formatValue","field","displayName","currentValue","parsed","parseFloat","isNaN","isValidValue","response","isValid","resetOnFailure","BasicFieldOperations","renderValue","generate","setPreviousValue","index","fieldValue","generateValue","SecurityManager","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","generateStartingDisplayOrder","dataObjDef","order","fieldId","fieldDef","displayOrder","createBasicObjectDefinition","createModifierFields","idFieldName","objDef","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","addStringFieldToObjDefinition","isMandatory","datasource","addNumericFieldToObjDefinition","addCreatedDateToArray","addModifiedDateToArray","addCreatedByToArray","addModifiedByToArray","addFieldToArray","displayOnly","addStringFieldToArray","addNumericFieldToArray","findDefinition","definition","addDefinition","createInstanceFromDef","fieldOps","createInstance","apiLogger","apiResultsLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","url","params","JSON","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","status","callback","error","callbacks","CallbackRegistry","addRegisterCallback","fn","getCallbackById","defaultFn","associatedStateName","processOfflineItems","OfflineManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","RequestType","variables","callbackId","state","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","jsonRequest","managerRequest","originalRequest","queueType","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","callbackForQueueRequest","queueId","httpStatus","element","initiateFetchForQueueItem","item","DB_NAME","OBJECT_STORE","indexedDB","keyField","processQueuedResults","serverBackOnline","areWeOffline","Poller","addOfflineRequest","offlineResults","length","INTERVAL_DEFAULT","URL_CALL","interval","isPollingBool","startPolling","delay","setInterval","isPolling","stopPolling","clearInterval","show","topOffset","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","context","containerEl","$","setTimeout","NotificationFactory","createNotification","getContainerId","notification","notificationNode","remove","parentEl","hash","logoutEl","localStorage","sessionStorage","encryptString","CryptoJS","decryptString","encryptObject","decryptObject","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","addChatEventHandler","addChatUserEventHandler","isUserLoggedIn","receiveUserList","listener","addUserToBlockedList","blocked","removeUserFromBlockedList","isUserInBlockedList","addUserToFavouriteList","favourite","removeUserFromFavouriteList","isUserInFavouriteList","getFavouriteUserList","getBlockedUserList","setCurrentUser","savedLogs","receiveJoinedRoom","InviteType","log","room","created","joinDateTime","from","priority","receivedLeftRoom","receiveInvitation","invite","didChatAlreadyExist","happyToProceed","receiveLogin","receiveLogout","receiveDecline","setUnreadCountListener","touchChatLog","getChatLog","receiveMessage","receiveQueuedInvites","invites","receiveQueuedMessages","messages","joinChat","leaveChat","declineInvite","sendInvite","requiresAcceptDecline","subject","sendMessage","Priority","attachment","sent","getChatLogs","startChatWithUser","roomName","saveLogs","saveBlockedList","saveFavouriteList","ensureChatLogExists","lastViewed","numOfNewMessages","ChatRoom","ensureChatLogExistsWithUser","foundLog","doesChatRoomExist","emitUnreadMessageCountChanged","unreadCount","addMessageToChatLog","addSenderToRoomIfNotAlreadyPresent","removeChatLog","notLogger","doNotDisturb","handleInvitationDeclined","handleNewInviteReceived","addListener","addUserListener","setDoNotDisturb","dontDisturbMe","blackListUser","isBlackedListed","favouriteUser","isFavourited","isFavouriteUser","isBlockedUser","handleChatLogsUpdated","handleChatLogUpdated","displayMessage","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleBlockedUsersChanged","usernames","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","content","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","forceSaves","managerName","equalityFns","fnPerState","receivedFilterResults","StateEventType","suppressEvents","emitEvents","dontForceSavesOnAddRemoveUpdate","forceSavesOnAddRemoveUpdate","informChangeListenersForStateWithName","eventType","previousObjValue","addChangeListenerForName","_findItemsInState","isMatch","filters","attributeValue","addStateByName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","isItemInState","removeItemFromState","oldItem","updateItemInState","findItemsInState","getType","StateManagerType","getEqualityFnForName","aggLogger","addStateManager","mWF","manager","stateManager","_addNewNamedStateToStorage","managerWithFilters","_getState","sm","_ensureStatePresent","_replaceNamedStateInStorage","_saveState","_addItemToState","_removeItemFromState","_updateItemInState","stateNameInFilters","asyncLogger","stateNamesToMonitor","lsLogger","configuration","useLocalStorage","allowPersistence","equalFns","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","config","setCompletedRun","runsComplete","configItem","identifier","Error","getConfigurationForStateName","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","dataAttribute","callbackForAddItem","IndexedDBStateManager","collection","dbName","openDB","upgrade","collections","db","keyPath","autoIncrement","blocking","terminated","saveWithCollectionKey","key","transaction","objectStore","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","stateObjectForName","getWithCollectionKey","cursor","getKeyFieldForKey","checkForObjectStore","saveItemsToCollection","saveData","removeAllItemsFromCollectionKey","msManager","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","RowPosition","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","startAlert","confirmHandler","outcome","cancelHandler","vLogger","BlockedUserView","DOMConfig","viewConfig","resultsContainerId","dataSourceId","drop","acceptFrom","acceptTypes","resultsElementType","resultsElementAttributes","resultsClasses","keyId","keyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElementType","textElementClasses","quickDelete","buttonClasses","iconClasses","canDeleteItem","documentLoaded","itemDeleted","selectedItem","itemSelected","itemDragStarted","itemAction","hideRequested","showRequested","renderDisplayForItemInNamedCollection","getSecondaryModifierForItemInNamedCollection","getIdForItemInNamedCollection","updateViewForNamedCollection","itemDropped","droppedItem","itemDeselected","canSelectItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasActionPermission","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","compareItemsForEquality","getModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","handleAddMessage","messageContent","sentMessage","messageEl","browserUtil","fastSearchEl","eventUserSelected","ui","label","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","ssFastSearchUserNames","myUsername","fastSearchValues","searchValue","source","disabled","minLength","getName","hidden","getDataSourceKeyId","getUIConfig","render","getItemDescription","getItemId","checkCanComment","clearChatLog","csLogger","ChatLogsView","badge","elementType","elementClasses","selectedChatLog","isSameRoom","selectChatRoom","updateStateManager","newState","ChatRoomsSidebar","SidebarPrefs","SidebarContainers","chatView","chatLogView","vLoggerDetail","FavouriteUserView","drag","extraActions","favUsers","actionName","UserSearchSidebar","recentSearches","favourites","UserSearchView","fastSearchInputId","dataLimit","isSameMongo","sbvcLogger","addView","viewContainer","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","ContextualInformationHelper","addContextFromView","addContextToElement","addTooltip","placement","html","findContextFromEvent","target","addActionToContext","hasPermission","elementDefinition","elementAttributes","icon","handleContextMenu","ensureInRegistry","defaultType","internalType","actions","findContextFromElement","desc","parent","findAllContextsFromElement","contexts","addContextActionToContext","buildContextMenu","contextDef","collectionView","compareWith","itemEl","hideContextMenu","showContextMenu","pageX","pageY","addValueOption","getOptions","getDragData","itemId","dataSource","eventStartDrag","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","completed","getItemContext","AbstractView","avLogger","avLoggerDetails","uiConfig","forwarder","getCollectionName","getCollectionUIConfig","addEventCollectionListener","renderBackgroundForItemInNamedCollection","isSame","hasPermissionToActionItemInNamedCollection","setRenderer","getItemInNamedCollection","DATA_SOURCE","handleDrop","droppedObjectType","droppedObjectFrom","acceptType","objectType","createDisplayElementForCollectionItem","dataSourceKeyId","resultDataKeyId","childEl","textEl","imgEl","buttonsEl","badgeValue","badgeEl","extraAction","hasPermissionForAction","iconEl","deleteButtonEl","modifier","secondModifier","setDisplayElementsForCollectionInContainer","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","classesText","isAdding","classes","classValue","addAttributes","attributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","React","ReactDOM","App","Component","thisEl","chatNavigationItem","handleShowUserSearch","bind","componentDidMount","getElementById","setupUserSearchViews","setupChatViews","setupNavigationItemHandling","hideAllSideBars","chatSidebar","userSearchSidebar","preventDefault","href","countChanged","newCount","buffer","innerHTML","plugin","info","setOptions","themeVariant"],"sourceRoot":""}